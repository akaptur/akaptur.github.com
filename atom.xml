<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Allison Kaptur]]></title>
  <link href="http://akaptur.github.com/atom.xml" rel="self"/>
  <link href="http://akaptur.github.com/"/>
  <updated>2015-10-10T18:20:00-07:00</updated>
  <id>http://akaptur.github.com/</id>
  <author>
    <name><![CDATA[akaptur]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Learning Strategies for Programmers]]></title>
    <link href="http://akaptur.github.com/blog/2015/10/10/effective-learning-strategies-for-programmers/"/>
    <updated>2015-10-10T15:15:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2015/10/10/effective-learning-strategies-for-programmers</id>
    <content type="html"><![CDATA[<p>In early September I gave a keynote at <a href="https://nzpug.org/">Kiwi PyCon</a> in New Zealand on effective learning for programmers. There were two pieces to the talk: one about mindset, and one about particular strategies we can use. The text below is an aspirational and lightly edited transcript of the mindset piece of that talk. There&rsquo;s also a <a href="https://www.youtube.com/watch?v=Mcc6JEhDSpo">video</a> available if you&rsquo;d like to see the strategies piece.</p>

<h3>Recurse Center</h3>

<p>Before I joined Dropbox last year, I spent two years working at a company in NYC called the <a href="https://www.recurse.com/">Recurse Center</a>. The Recurse Center is like a writers&#8217; retreat for programmers. Participants spend 3 months working on whatever is most interesting to them. So someone who&rsquo;d been writing Java for ten years might come to RC to learn a new language like Clojure, or someone who just graduated with a CS degree might come work on their web development skills, or someone who&rsquo;d been learning programming in their spare time might come to turbo-charge their learning. There&rsquo;s almost no structure to the program &ndash; no deadlines, no assignments, no teaching. It&rsquo;s an experiment in unstructured learning for adults.</p>

<p>My role as a facilitator was to help people make the most of that disorienting amount of freedom that they had at RC. People who come out of traditional educational experiences or traditional jobs very often don&rsquo;t know what to do with that. So I&rsquo;d help them with goal-setting and help them make the most of the experience. One of the things we thought a lot about was how to have the most effective learning experience possible for programmers. Today I&rsquo;ll talk about some of the research into how to be an effective learner, and how we can apply that research to our daily lives as programmers and engineers.</p>

<h3>What to get out of this post</h3>

<p>Take a minute and consider what you&rsquo;d like to get out of this post. You might want to learn something new about how to be as efficient and effective in your job as possible. You might want to hear about how you can be a better teacher or mentor to junior engineers. Or you might want to hear about how you can make institutional change in your organization to set up a better environment for these kinds of things.</p>

<p>All of these are useful goals, and I&rsquo;ll touch on material relevant to all of them. However, I want to challenge you to consider the strategies mostly for yourself. When I hear about these strategies, very often it seems obvious to me that other people should be following them, but not necessarily obvious that I myself should. I&rsquo;ll come back to that tension a little bit later on.</p>

<h2>Growth mindset: Carol Dweck</h2>

<p>Let&rsquo;s talk about the first key to effective learning. The sociologist Carol Dweck has ton a ton of interesting research about how people think about intelligence. She&rsquo;s found that there are two different frameworks for thinking about intelligence. The first, which she calls the fixed mindset, holds that intelligence is a fixed trait, and people can&rsquo;t change how much of it they have. The other mindset is a growth mindset. Under a growth mindset, people believe that intelligence is malleable and can increase with effort.</p>

<p>Dweck found that a person&rsquo;s theory of intelligence &ndash; whether they hold a fixed or growth mindset &ndash; can significantly influence the way they select tasks to work on, the way they respond to challenges, their cognitive performance, and even their honesty. I&rsquo;m going to run through a couple of the most interesting results from her work here.</p>

<h3>These mindsets cause differences in effort</h3>

<p>The first interesting result is that this framing impacts how people view effort. If you have a fixed mindset &ndash; you believe that people are either smart or they&rsquo;re not, and they can&rsquo;t really change that &ndash; then you also tend to believe that if you&rsquo;re good at something, it should be easy for you, and if something is hard for you than you must not be good at it. That&rsquo;s a fixed-mindset view.  People who have a growth mindset believe that you need to exert effort and work hard at something to become better at it.</p>

<p>Several studies found that people with a fixed mindset can be reluctant to really exert effort, because they believe it means they&rsquo;re not good at the thing they&rsquo;re working hard on. Dweck notes, &ldquo;It would be hard to maintain confidence in your ability if every time a task requires effort, your intelligence is called into question.&rdquo;</p>

<h3>&ldquo;Praise that backfires&rdquo;</h3>

<p>The second interesting result is probably the most famous. Dweck and her collaborators showed that giving students subtly different kinds of praise significantly impacted their performance.</p>

<p>In this study, Dweck and her collaborators gave a students a series of problems. After the first set of problems, all of the students did pretty well. Then half of the students were told &ldquo;Wow, you did really well on those problems &ndash; you must be very smart.&rdquo; and the other  &ldquo;Wow, you did really well on those problems &ndash; you must have worked very hard.&rdquo;  Then they got a second set of problems, much harder, where everyone did badly. Then they got a third set of problems that were like the first set &ndash; back to the easier level.</p>

<p>Here, they&rsquo;re creating a fixed mindset in the first group of students (your performance shows that you&rsquo;re smart) and a growth mindset in the second set of students (your effort drives your success).</p>

<p>They found a bunch of interesting things from this. The first aspect of the experiment is that in between the first and second problem sets they asked the students if they&rsquo;d like to do an easier exercise or a harder one next. (In practice, everyone got the harder set next.) Dweck et al. wanted to see if there would be a difference between the students who got different kinds of praise. And sure enough, there was: 90% of the students praised for effort chose to do a harder set of problems next, compared to only a third of the group praised for intelligence. The kids praised for effort were much more interested in a challenge.</p>

<p>The second thing that they looked at was how student performed on the third set of problems. They found that students who&rsquo;d been praised for their intelligence did significantly worse on the third problem set than they had on the first, but students who&rsquo;d been praised for effort did slightly better.  Students who got intelligence praise weren&rsquo;t able to recover effectively from hitting a wall on the second set of problems, while students who got effort praise could bounce back.</p>

<p>After this, they had the students write letters to pen pals about the study, saying &ldquo;We did this study at school, and here&rsquo;s the score that I got.&rdquo; They found that <em>almost half of the students praised for intelligence lied about their scores</em>, and almost no one who was praised for working hard was dishonest.</p>

<p>So there are three implications here: a growth mindset made students more likely to choose a challenge instead of something easy, more likely to persist after a setback, and more honest about their performance, compared to the students with a fixed mindset.</p>

<p>What&rsquo;s fascinating about this is how subtle the difference in praise is. Being told you&rsquo;re smart leads to all of these attempts to preserve the appearance of smartness, by only doing easy things you know you can perform well on and by hiding your poor performance. Being told that you work hard leads to attempts to preserve the appearance of working hard &ndash; and the best way to do that is to actually work hard.</p>

<h3>Response to confusion</h3>

<p>Another study looked at what happened when students faced a temporary period of confusion. Dweck and her collaborators designed a short course on psychology to give to elementary school students. The course was a booklet on psychology followed by a quiz. Some of the booklets had a confusing passage in them, and others didn&rsquo;t. The confusing part wasn&rsquo;t on the quiz, so students could master the material if they just completely ignored the confusing bit. The researchers wanted to see whether students would be able to recover from being totally bewildered in the middle of this booklet.</p>

<p>They found that students with a growth mindset mastered the material about 70% of the time, regardless of whether there was a confusing passage in it. Among students with a fixed mindset, if they read the booklet without the confusing passage, again about 70% of them mastered the material. But the fixed-mindset students who encountered the confusing passage saw their mastery drop to 30%. Students with a fixed mindset were pretty bad at recovering from being confused.</p>

<blockquote><p>&ldquo;How can one best describe the nature of people who will most of all be that way which will make the imitating of others happen most often? Is it that these are the people we want to be like because they are fine or is it that these are the people we want to be liked by?&rdquo;</p></blockquote>

<p>I wanted to put up a section of the confusing passage because this really resonated with me. Hands up if you&rsquo;ve ever started using a new tool and run into documentation that sounded like this. [Roughly 100% of hands go up.] It happens all the time &ndash; you get domain experts writing docs aimed at beginners, or out-of-date docs, or some other issue. It&rsquo;s a critical skill for programmers to push past this kind of confusion and be able to successfully retain the rest of the information in the document we&rsquo;re reading.</p>

<h3>Programmers need a growth mindset</h3>

<p>Programmers need a growth mindset! Key skills for programmers &ndash; like responding to confusion, recovering from setbacks, and being willing to take on new challenges &ndash; are all much easier with a growth mindset, and much harder with a fixed mindset.</p>

<h3>Does anyone believe in a fixed mindset?</h3>

<p>Now sometimes when people hear this idea of the fixed mindset, it almost sounds like a straw man. Like, does anyone in the tech industry actually believe this? I think that absolutely a fixed mindset is a widespread belief. Here are a couple of examples.</p>

<h4>10x engineers</h4>

<p>Start with the idea of the 10x engineer. This is the idea that some engineers are an order of magnitude more effective than others, for some definition of effective. And there&rsquo;s lots of critiques of this framing, but we&rsquo;ll set that aside for a moment. If you believe in the idea of the 10x engineer, do you think that engineer was born as a super effective engineer? Or did they get to be 10x one x at a time?</p>

<p>I think very often in the popular framing of this, the 10x engineer is set up on a pedestal, as someone that other people cannot become. Very often this is approached from a fixed-mindset perspective.</p>

<h4>Hero worship</h4>

<p>Another case where we see evidence of a fixed mindset is with hero worship. So Julie Pagano did a great talk at PyCon 2014 about impostor syndrome, and one of her suggestions for a way to combat impostor syndrome was &ldquo;kill your heroes.&rdquo; Don&rsquo;t put other programmers on a pedestal, don&rsquo;t say &ldquo;that person is so different from me.&rdquo; Fixed/growth mindset is a really useful framing for this too. If you have programming heroes, do you consider them to be totally different from you? Could you become <em>more like</em> the kind of person you admire? If you don&rsquo;t think so, that&rsquo;s some evidence of a fixed mindset.</p>

<p>So I&rsquo;d argue that yes, a fixed mindset is quite prevalent in the tech industry.</p>

<h3>Can you change a fixed mindset? Heck yes</h3>

<p>Hopefully by now you&rsquo;re convinced that a growth mindset is better for you than a fixed mindset. So the next question is: is this malleable? Can you take a fixed mindset and turn it into a growth mindset? And the answer is heck yes, you absolutely can change a fixed mindset into a growth one.</p>

<p>In fact, in many of Dweck&rsquo;s studies they experimentally induce a fixed or growth mindset, often in really subtle ways. The praise study is one example: one sentence of praise changes the students&#8217; behavior. In other studies they have students read a paragraph about a famous person&rsquo;s success, and at the end it says &ldquo;because they worked very hard,&rdquo; or &ldquo;because it was in their DNA.&rdquo; This is absolutely a malleable thing.</p>

<p>So how do you change a fixed mindset? Sometimes the challenge is mostly in actually identifying the fixed mindset, and once you hear yourself say the words, &ldquo;I could never learn physics,&rdquo; it&rsquo;s already obvious that that&rsquo;s probably not true. But other times it&rsquo;s harder to root out the fixed mindset. So here are a couple of flags you can use to identify fixed mindsets so you can root them out.</p>

<h3>How do you identify a fixed mindset?</h3>

<h4>&ldquo;I am ..&rdquo;</h4>

<h4>&ldquo;Some people are just &hellip;&rdquo;</h4>

<p>If you&rsquo;re on the lookout for places where your mindset might be fixed, you should be listening for sentences that start like this. Things like &ldquo;I&rsquo;ve never been good at CSS&rdquo; or &ldquo;I&rsquo;m not a people person&rdquo; or &ldquo;Some programmers are just faster than others.&rdquo; Anything that starts with &ldquo;I am &hellip;&rdquo; is a candidate. The word &ldquo;just&rdquo; is often present.</p>

<p>Now, obviously, you can say sentences with &ldquo;I am&rdquo; that aren&rsquo;t indicators of a fixed mindset. Instead, the point here is to treat sentences like this as a little bit of a yellow flag for yourself, to notice and then to examine your mindset more closely.</p>

<p>Just as an aside, the example &ldquo;I&rsquo;m not a people person&rdquo; is supported by the research &ndash; Dweck and collaborators did a study on making friends and social situations, and this research holds there too. [See the Q&amp;A for more about this.]</p>

<h3>How do you change a fixed mindset?</h3>

<h4>Reframe praise &amp; success</h4>

<p>Ok, so once you&rsquo;ve identified a fixed mindset, how can you go about changing it? Here are four strategies.</p>

<p>The first is to reframe praise and success. By reframe praise I mean that when you get the wrong kind of compliments, turn them into growth-mindset compliments. So if someone says &ldquo;wow, great job on that project, you&rsquo;re so smart,&rdquo; translate it to &ldquo;yeah, it was great, I worked really hard on that project.&rdquo; You don&rsquo;t necessarily have to do this out loud! But this reframing reinforces for yourself that you gain mastery by seeking out challenges and by exerting effort.</p>

<p>And you can use the same techniques for successes and accomplishments. When something goes well, don&rsquo;t think, &ldquo;Of course that went well because I&rsquo;m awesome.&rdquo; Instead think, &ldquo;I used an effective strategy on that project! I should do that more often.&rdquo;</p>

<h4>Reframe failure</h4>

<p>Of course the flip side of this dynamic is also really effective. A huge part of a fixed or growth mindset is how you respond to failure. What&rsquo;s your self-talk when you face a setback or don&rsquo;t get what you wanted? If you&rsquo;re saying, &ldquo;Maybe I&rsquo;m not cut out for this job after all,&rdquo; treat that as a red flag. Instead, ask what you <em>learned</em> from your unsuccessful attempt or what strategies you could have used instead. It sounds cheesy, but it really works.</p>

<h4>Celebrate challenges</h4>

<p>The third way that you can change a fixed mindset is to celebrate challenges. How do you respond when you have to struggle? Try explicitly celebrating. This is something that I was really consistent about when I was facilitating at the Recurse Center. Someone would sit down next to me and say, &ldquo;[sigh] I think I&rsquo;ve got a weird Python bug,&rdquo; and I&rsquo;d say, &ldquo;Awesome, I <em>love</em> weird Python bugs!&rdquo; First of all, this is definitely true &ndash; if you have a weird Python bug, let&rsquo;s discuss &ndash; but more importantly, it emphasized to the participant that finding something where they struggled an accomplishment, it was intentional, and it was a good thing for them to have done that day.</p>

<p>As I mentioned, at the Recurse Center there are no deadlines and no assignments, so this attitude is pretty much free. I&rsquo;d say, &ldquo;You get to spend a day chasing down this weird bug in Flask, how exciting!&rdquo; Now, at Dropbox, where we have a product to ship, and deadlines, and users, I&rsquo;m not always uniformly delighted about spending a day on a weird bug. So I&rsquo;m sympathetic to the reality of the world where there are deadlines. However, if I have a bug to fix, I have to fix it, and being grumbly about the existence of the bug isn&rsquo;t going to help me fix it faster. I think that even in a world where deadlines loom, you can still apply this attitude.</p>

<h4>Ask about processes</h4>

<p>The last strategy for changing a fixed mindset is to ask about processes. Like many of you, I work with some great engineers. Sometimes, I&rsquo;ll try to fix a tricky bug and won&rsquo;t be able to, and then one of them will be able to fix it right away. In these situations I&rsquo;ve tried to be really disciplined about <em>asking how they did it.</em> Particularly when I was new at Dropbox, the answers would be really illuminating. Sometimes the information had come from a source I didn&rsquo;t know existed. Now that I&rsquo;ve been there longer, it&rsquo;s usually a technique or strategy difference, or a detail about why my strategy had not succeeded.</p>

<p>This is a much more useful strategy in the long term than saying &ldquo;Oh, of course, that person got the bug because they are a wizard.&rdquo;</p>

<h2>Confidence &amp; imposter syndrome</h2>

<p>Dweck&rsquo;s research is really interesting in the context of the discussion around impostor syndrome. Impostor syndrome is the feeling that you&rsquo;re secretly an unqualified fraud who will be uncovered any second now. Hands up if you&rsquo;ve ever felt impostor syndrome in your career? [80% of hands in the room go up.] Yeah, that&rsquo;s lots of you, and I definitely have as well. And it <em>sucks</em>! It&rsquo;s so painful, and it&rsquo;s really bad for your career, because you&rsquo;re less likely to take chances or to look for new opportunities to grow if you&rsquo;re worrying about getting fired from the job you already have.</p>

<p>The proposed solutions for impostor syndrome very often center around confidence. Like, &ldquo;Oh, if you feel like you&rsquo;re not qualified for the job you already have, you should be more confident, and then you&rsquo;ll be fine.&rdquo; This sometimes is as simple as, &ldquo;Don&rsquo;t feel that way,&rdquo; which is not very helpful as advice goes. But even when it&rsquo;s more nuanced than that, there&rsquo;s a focus on confidence and past accomplishments.</p>

<h3>Confidence doesn&rsquo;t help you <em>respond to challenges</em></h3>

<h4>Henderson &amp; Dweck, 1990</h4>

<p>But here&rsquo;s the catch. Dweck&rsquo;s research shows that confidence doesn&rsquo;t actually predict your success at responding to new challenges or recovering from setbacks.</p>

<p>Henderson and Dweck did a study of students moving from elementary school to junior high in the U.S. They asked the students to assess their confidence when they were still in the younger grade, and they also measured whether the students held fixed or growth mindsets. Then they tracked the students&#8217; academic performance in junior high.</p>

<p>They found that confident students with a fixed mindset suffered academically. By contrast, students with a growth mindset tended to thrive academically, regardless of whether their confidence was high or low. Confidence wasn&rsquo;t a useful predictor of success at all.</p>

<p>Now, there&rsquo;s lots of other research that shows confidence is correlated with success. Dweck argues that confidence is a good predictor of how well you can do <em>things you&rsquo;re already doing,</em> but it&rsquo;s not a good predictor of how you respond to new challenges and how you feel about failure.</p>

<p>The second, related point that Dweck has discovered is that a history of success also doesn&rsquo;t impact how you respond to challenges and how you deal with failure.</p>

<p>So past successes don&rsquo;t predict your response to new setbacks and failures, and your confidence level also doesn&rsquo;t predict your response to failure. The thing that is a good predictor of resilience in the face of failure is having a growth mindset.</p>

<h3>Break the framework</h3>

<p>This is hugely exciting to me and I think it doesn&rsquo;t come up nearly often enough in the discussions around impostor syndrome. This gives us a new and more useful framework for combating impostor syndrome. Basically, if you&rsquo;re holding a fixed mindset, you&rsquo;re going to be really stressed and afraid at any moment that you have to struggle. We&rsquo;re programmers, so it&rsquo;s <em>mostly</em> struggle, right? It&rsquo;s struggle all the time. With a growth mindset, you can enjoy the struggling and enjoy working on something that&rsquo;s really hard.</p>

<p>And guess what? When your identity isn&rsquo;t being threatened by a particularly tricky bug, it&rsquo;s a lot easier to stay focused on the bug. You&rsquo;re not worried about also getting fired and being a fraud, so you can free up those cognitive resources to focus on the task at hand.</p>

<p>So, again: if you believe, for example, that &ldquo;some people just aren&rsquo;t cut out for programming,&rdquo; you can spend a ton of time &amp; energy trying to find evidence and validation and reassurance that you are one of the people who can make it. Instead, upend this framework. Break the idea of fixed levels of talent and move to the idea that everyone can increase their skill by exerting effort.</p>

<h4><em>Self-theories: Their role in motivation, personality, and development</em></h4>

<p>Having a growth mindset makes you more resilient to failure, makes it easier to exert effort, makes you more likely to take on challenges, all things that are very useful to programmers.</p>

<p>If you&rsquo;d like to dig more into the details of this research, and also see some of the findings that I didn&rsquo;t have time to cover today, I highly recommend a book Dweck wrote called <a href="http://www.amazon.com/Self-theories-Motivation-Personality-Development-Psychology/dp/1841690244"><em>Self-theories</em></a>.  Self-theories is a collection of short essays that summarize many major points of her research. It&rsquo;s got detail about the studies but is accessible to a lay reader. She&rsquo;s also got a book called <em>Mindset</em> that&rsquo;s written for a pop-science audience, but if you want a little more nuance and detail about the particular studies, <em>Self-theories</em> is the way to go.</p>

<h3>Q &amp; A</h3>

<p>A selection from the Q&amp;A:</p>

<p><em>Q</em>: Is there any research in growth and fixed mindsets at the team-level, and how teams approach problems?</p>

<p><em>A</em>: I&rsquo;m not aware of any, but that&rsquo;s a fascinating question. I&rsquo;d love to see that research if it exists.</p>

<p><em>Q</em>: I read Mindset, and I&rsquo;m a father to twin girls. I found that these strategies really changed their resilience and their approach to problem solving.</p>

<p><em>A</em>: Yeah, this research is kind of terrifying. Like, do you tell your children that they&rsquo;re smart? You&rsquo;re ruining them! I didn&rsquo;t have a chance to talk about this, but there is some research in this book about gender discrepancies, and findings that high-achieving girls are more likely to have a fixed mindset and less likely to risk failure when they hit something hard. Many of the women in the room in particular can probably relate to this.</p>

<p><em>Q</em>: Is this binary, or a gray scale?</p>

<p><em>A</em>: I think it probably is a spectrum, yes. For this research it&rsquo;s classified into a binary model. I&rsquo;m not precisely sure where the line gets drawn. And some of these cases with experimental induction of a fixed or growth mindset, if someone has one mindset going in and has the other induced, they&rsquo;ll probably end up in a moderate place.</p>

<p><em>Q</em>: Is it possible to have a fixed mindset in one area and a growth mindset in another?</p>

<p><em>A</em>: Absolutely. One that is common for programmers is to have a growth mindset about programming and a fixed mindset about social skills.</p>

<p><em>Q</em> (from a CS lecturer/TA): For our new students, is there a way we can create a growth mindset in the students? A lot of people come in from school with a fixed one, and it can be damaging in those early courses.</p>

<p><em>A</em>: If you&rsquo;re a lecturer or have a chance to get up in front of the auditorium, you can say it explicitly: &ldquo;Programming is a skill that you can get better at with effort,&rdquo; and even though it doesn&rsquo;t sound like it&rsquo;d convince people, the research shows that it does make a difference.</p>

<p>The other thing that&rsquo;s really interesting is a study on a values exercise. This shows that having women in particular write down their values before they enter into a context where they&rsquo;d experience stereotype threat can significantly improve their performance. The basic idea here is if you&rsquo;re identifying as a programmer, and your programmer identity is threatened, that&rsquo;s very painful and difficult. But if you have these other things that you value about yourself, then that mitigates the threat. The results are really dramatic for people who are marginalized in tech (and it doesn&rsquo;t hurt those who aren&rsquo;t).
For more, see <a href="https://github.com/hypatia/virtuoso/">this worksheet</a> by Leigh Honeywell.</p>

<p><em>Q</em>: So this is nature versus nurture all over again, isn&rsquo;t it?</p>

<p><em>A</em>: I wouldn&rsquo;t characterize it that way, in part because I think both of those remove agency from the individual. Your mindset is something that you can control to a significant extent. That&rsquo;s why I think it&rsquo;s so important to think about this research from the context of ourselves, and not just our children or our students.</p>

<p><em>Q</em>: It&rsquo;s easy to think of lots of ways to apply this in programming, but can you talk more about ways to apply this in social situations?</p>

<p><em>A</em>: Sure. In the study covered in a <em>Self-theories</em>, Dweck had children write letters applying to the pen pal club (which was a real pen pal club &ndash; they did eventually match people up). Then all the children got rejected from the pen pal club. [Audience laughter] Before writing the letter, they&rsquo;d told half the children, &ldquo;This is to see how good you are at making friends,&rdquo; and the other half, &ldquo;This is a chance to practice and improve your ways of making friends.&rdquo; The children who heard the fixed-mindset framing sometimes wrote the same letter or sometimes wrote a shorter and less detailed letter. The kids who got the growth framing were much more likely to write longer things, to be more inviting, to say, &ldquo;Oh, I love talking to you&rdquo; even though it&rsquo;s a first letter to a pen pal. [Audience makes sympathetic noises.] Yeah, throughout this book Dweck and her collaborators were pretty careful to not traumatize any students, not to leave them thinking that they&rsquo;re stupid or bad at making friends.</p>

<p>If you&rsquo;re interested in particular strategies for social situations, I highly recommend the blog <a href="http://captainawkward.com/">Captain Awkward</a>. Captain Awkward has some constructions of social challenges, like &ldquo;I&rsquo;ll go to a party and talk to three people, and award myself ten points for each person I talk to and learn a fact about.&rdquo; There&rsquo;s a lot of interesting stuff on the internet about strategies for coping with social anxiety that I think you can apply whether or not that&rsquo;s something that you struggle with.</p>

<h3>Thanks</h3>

<p>My thanks to Maggie Zhou, Amy Hanlon, Alyssa Frazee, and Julia Evans for feedback on early versions of this talk.</p>

<p>Thanks to Sasha Laundy, who invited people to consider what they wanted to get out of her <a href="https://www.youtube.com/watch?v=hY14Er6JX2s">PyCon talk on giving and getting help</a>, and inspired me to use the same construction.</p>

<p>Thanks to the Kiwi PyCon organizers, particularly Marek Kuziel, for hosting me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PS1 for Python3]]></title>
    <link href="http://akaptur.github.com/blog/2014/10/23/ps1-for-python3/"/>
    <updated>2014-10-23T14:38:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2014/10/23/ps1-for-python3</id>
    <content type="html"><![CDATA[<p>I spend a lot of time flipping back and forth between Python 2.x and 3.x: I use different versions for different projects, talk to people about different versions, explore differences between the two, and paste the output of REPL sessions into chat windows.  I also like to keep long-running REPL sessions.  These two activities in combination became quite confusing, and I&rsquo;d often forget which version I was using.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">some_var</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">some_var</span>
</span><span class='line'>                 <span class="o">^</span>
</span><span class='line'><span class="ne">SyntaxError</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">syntax</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># *swears*</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the hundredth time I made this mistake, I decided to modify my prompt to make it always obvious which version was which, even in long-running REPL sessions.  You can do this by creating a file to be run when Python starts up.  Add this line to your <code>.bashrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">export</span> <span class="n">PYTHONSTARTUP</span><span class="o">=~/</span><span class="n">mystartupscript</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in <code>mystartupscript.py</code>:</p>

<figure class='code'><figcaption><span>mystartupscript.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">version_info</span><span class="o">.</span><span class="n">major</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">ps1</span> <span class="o">=</span> <span class="s">&quot;PY3 &gt;&gt;&gt; &quot;</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">ps2</span> <span class="o">=</span> <span class="s">&quot;PY3 ... &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes it obvious when you&rsquo;re about to slip up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">PY3</span> <span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">giant_collection</span><span class="p">:</span>
</span><span class='line'><span class="n">PY3</span> <span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="n">PY3</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve also add this line to <code>mystartupscript.py</code> to bite the bullet and start using print as a function everywhere:</p>

<figure class='code'><figcaption><span>mystartupscript.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has no effect in Python3.x, but will move 2.x to the new syntax.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm joining Dropbox]]></title>
    <link href="http://akaptur.github.com/blog/2014/10/10/im-joining-dropbox/"/>
    <updated>2014-10-10T11:49:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2014/10/10/im-joining-dropbox</id>
    <content type="html"><![CDATA[<p>Big news for me: I’m leaving Hacker School and going to work for Dropbox in San Francisco, joining Jessica McKellar’s team.  I met Jessica when she was part of the first round of residents at Hacker School in fall 2012, and I’ve had tremendous respect for her work and leadership ever since.  Dropbox has an impressive crop of Pythonistas (including Guido van Rossum, of course), and I couldn’t be more excited to join.  I’ll be moving to San Francisco at the end of October.  If you have recommendations for people to meet, places to go, or things to do, let me know!</p>

<p>This means I’m leaving Hacker School, after more than two years facilitating. My last day will be October 24th. I love Hacker School, and I know I’m going to miss it. Hacker School is entirely responsible for the fact that I’m a programmer at all.  I was working in a finance job and contemplating new careers when my brother saw <a href="https://www.hackerschool.com/blog/1-summer-2012-applications-open">this post</a> about Hacker School’s experiment with Etsy to get more qualified women into the summer 2012 batch.  I read the post and the thoughtful, welcoming FAQ, then went home and picked up a Python book.  Two months later, I started Hacker School.</p>

<p>Hacker School is about becoming a better programmer, and there’s no doubt that it’s worked for me.  For two years, I’ve had total freedom to <a href="https://github.com/akaptur/byteme">chase down</a> <a href="https://www.hackerschool.com/blog/14-there-is-no-magic-virtualenv-edition">whatever</a> <a href="http://akaptur.github.io/blog/2013/10/29/a-python-puzzle/">weird</a> <a href="http://akaptur.github.io/blog/2013/07/02/more-side-effecting/">thing</a> <a href="https://www.youtube.com/watch?v=4s9MkZATWY4">catches</a> <a href="https://gist.github.com/akaptur/4348873">my</a> <a href="http://akaptur.github.io/blog/2014/06/11/of-syntax-warnings-and-symbol-tables/">eye</a>; I’ve worked with creative, hilarious, brilliant Hacker Schoolers and residents on a dizzying variety of projects; and I’ve been delighted to help <a href="https://www.hackerschool.com/blog/38-subtle-isms-at-hacker-school">build a more inclusive environment</a> at Hacker School, although there’s always more work to be done. (If you’re a curious, sharp, and self-directed programmer, I can’t recommend Hacker School enough.)</p>

<p>I’m thankful that leaving my job at Hacker School doesn’t mean leaving the Hacker School community.  I’m trading in my faculty status and becoming one of hundreds of alumni around the world. I’ll still be on Zulip, Community, and everywhere else Hacker Schoolers can be found, and I’ll still have my <a href="https://twitter.com/khaullen/status/331201457359560704">cape</a>. I may be leaving, but I’ll never graduate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging with pstree]]></title>
    <link href="http://akaptur.github.com/blog/2014/09/21/debugging-with-pstree/"/>
    <updated>2014-09-21T17:46:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2014/09/21/debugging-with-pstree</id>
    <content type="html"><![CDATA[<p>I hit a very fun bug yesterday while trying to run a script that sends emails to certain subsets of Hacker Schoolers. When I tried to test the script locally, I discovered that one of the tables of the database, <code>Batch</code>, was missing from my local version.  After briefly panicking and making sure that the actual site was still up, I could dig in.</p>

<p>It turns out that my local version of psql was way out of date, and as of a few days ago we&rsquo;d started using a data type that wasn&rsquo;t present in my old version. Because of that, creating that particular table failed when I pulled from the production database the night before. The failure was logged, but the output is so verbose that I didn&rsquo;t notice the problem. Both the diagnosis and the fix here were easy &ndash; I went back and read the logs, googled the data type that was raising an error, and then upgraded Postgres.app and psql. That&rsquo;s when the real trouble started.</p>

<p>The new version of Postgres.app was placed in a new spot on the $PATH, as you&rsquo;d expect, and the upgrade prompted me to change my <code>.bashrc</code>, which I did. But the rake tasks we use to manage local copies of the database errored out with this message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ pg_restore --verbose --clean --no-acl --no-owner -h localhost -U `whoami` -d hackerschool latest.dump
</span><span class='line'>sh: pg_restore: command not found
</span></code></pre></td></tr></table></div></figure>


<p>This was pretty clearly a $PATH problem. I tried the usual things first, like sourcing my <code>.bashrc</code> in the terminal I was using, closing the terminal and opening a new one, etc. None of that worked.</p>

<p>One thing that jumped out to me was the <code>sh</code> in the error message. That was an indicator that rake wasn&rsquo;t using bash as a shell &ndash; it was using <code>sh</code> &ndash; which means my <code>.bashrc</code> wasn&rsquo;t setting the environment. Reading the rake task showed that it was a thin wrapper around lots of system calls via Ruby&rsquo;s <code>system("cmd here")</code>. I added the line <code>system("echo $PATH")</code> and verified that the new location of <code>pg_restore</code> wasn&rsquo;t in it.</p>

<p>At this point I found I had lots of questions about the execution context of the rake task. Since I was making system calls and could easily edit the rakefile, I added in the line <code>system("sh")</code> to drop me into a shell mid-execution. This turned out to be an efficient way to figure out what was going on (and made me feel like a badass hacker).</p>

<p>From within in that shell, I could do <code>$$</code> to get that process&rsquo;s PID, then repeatedly do <code>ps -ef | grep [PID]</code> to find the parent process.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>sh-3.2$ $$
</span><span class='line'>sh: 34652: command not found
</span><span class='line'>sh-3.2$ ps -ef | grep 34652
</span><span class='line'>  501 34652 34639   0  4:18PM ??         0:00.04 sh
</span><span class='line'>    0 34881 34652   0  4:26PM ??         0:00.01 ps -ef
</span><span class='line'>  501 34882 34652   0  4:26PM ??         0:00.01 grep 34652
</span><span class='line'>sh-3.2$ ps -ef | grep 34639
</span><span class='line'>  501 34639  2914   0  4:18PM ??         0:00.41 rake db:drop db:create db:pull
</span><span class='line'>  501 34652 34639   0  4:18PM ??         0:00.04 sh
</span><span class='line'>  501 34885 34652   0  4:28PM ??         0:00.00 grep 34639
</span><span class='line'>sh-3.2$ ps -ef | grep 2914
</span><span class='line'>  501  2914  2913   0 10Sep14 ??        27:11.72 spring app    | hackerschool | started 244 hours ago | development mode
</span><span class='line'>  501 34639  2914   0  4:18PM ??         0:00.41 rake db:drop db:create db:pull
</span><span class='line'>  501 34889 34652   0  4:28PM ??         0:00.01 grep 2914
</span><span class='line'>sh-3.2$ ps -ef | grep 2913
</span><span class='line'>  501  2914  2913   0 10Sep14 ??        27:11.98 spring app    | hackerschool | started 244 hours ago | development mode
</span><span class='line'>  501 34892 34652   0  4:29PM ??         0:00.00 grep 2913
</span><span class='line'>  501  2913     1   0 10Sep14 ttys001    0:00.94 spring server | hackerschool | started 244 hours ago
</span></code></pre></td></tr></table></div></figure>


<p>Aha! The parent process of the rake task I was running is the spring server, which starts on boot &ndash; several days ago, at the time &ndash; and doesn&rsquo;t have the new and updated $PATH information.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> A kick to the spring server (with <code>kill 2913</code>) forced the server process to restart with the new environment.</p>

<p>It turns out there&rsquo;s a handy utility called <code>pstree</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> (brew installable) to visualize the tree of processes. This would have saved me a couple of steps of grepping. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>hackerschool [master] $ pstree -p 35351
</span><span class='line'>-+= 00001 root /sbin/launchd
</span><span class='line'> \-+- 35129 afk spring server | hackerschool | started 25 hours ago
</span><span class='line'>   \-+= 35130 afk spring app    | hackerschool | started 25 hours ago | development mode
</span><span class='line'>     \--- 35351 afk rails_console
</span></code></pre></td></tr></table></div></figure>


<p>This bug and some related ones have gotten me more interested in operating systems, and I&rsquo;ve started reading the book <a href="http://pages.cs.wisc.edu/~remzi/OSTEP/">Operating Systems: Three Easy Pieces</a>. I&rsquo;m only a few chapters in, but so far it&rsquo;s readable, clear, and entertaining. I look forward to building up my mental model of processes and environments as I keep reading it.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>We can tell it (probably) starts on boot because the parent process ID is 1. This means that rebooting my computer would have solved the problem.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Thanks to <a href="http://akaptur.github.com//twitter.com/paultag">Paul Tag</a> for the pointer to <code>pstree</code>.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rejected PyCon Proposals]]></title>
    <link href="http://akaptur.github.com/blog/2014/09/11/rejected-pycon-proposals/"/>
    <updated>2014-09-11T15:38:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2014/09/11/rejected-pycon-proposals</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;All accepted proposals are alike, but each rejected proposal is rejected in its own way&rdquo; &ndash; Tolstoy, if he were on the PyCon talk review committee</p></blockquote>

<p>I&rsquo;m building a collection of <a href="https://github.com/akaptur/pycon-proposals">old PyCon talk proposals</a>, particularly rejected ones.  I think rejected proposals are more interesting than accepted ones, for a couple of reasons:</p>

<h4>See examples of anti-patterns</h4>

<p>Flipping through these proposals, you can see concrete examples of the talk committee&rsquo;s <a href="https://us.pycon.org/2015/speaking/proposal_advice/">suggestions for what to avoid</a>. There is an example of a &ldquo;state of our project&rdquo; talk and one of &ldquo;here&rsquo;s some code I hope to have written by the time the conference rolls around.&rdquo;</p>

<h4>&ldquo;I can do better than that&rdquo;</h4>

<p>Being a great or famous programmer doesn&rsquo;t mean you&rsquo;ll give a great talk or submit a great proposal. You&rsquo;ll notice that you can write a better proposal than some of the ones from people you&rsquo;ve heard of. (This fits with the <a href="http://juliepagano.com/blog/2013/11/02/it-s-dangerous-to-go-alone-battling-the-invisible-monsters-in-tech/">Kill your heroes</a> theme from Julie Pagano&rsquo;s great talk on impostor syndrome at PyCon 2014.)</p>

<h4>Empathize with the talk committee</h4>

<p>Any application is an exercise in empathy &ndash; you need to imagine what the people who will be reading your submission are thinking. What do they care about? Where are they coming from? You can read past proposals and decide if you&rsquo;d make the same decision the committee did. When submitters have shared the feedback they received, you can see <em>exactly</em> what the committee members thought. This helps you write a proposal that will address their concerns.</p>

<p>The deadline for submitting a proposal is Monday, September 15th. I encourage you to browse through the collection of past proposals to get inspiration or to improve your proposal. Once you&rsquo;ve submitted a proposal, please <a href="https://github.com/akaptur/pycon-proposals/pulls">add it to the collection!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Python Internals]]></title>
    <link href="http://akaptur.github.com/blog/2014/08/03/getting-started-with-python-internals/"/>
    <updated>2014-08-03T09:17:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2014/08/03/getting-started-with-python-internals</id>
    <content type="html"><![CDATA[<p>I talk to a lot of people at Hacker School and elsewhere who have been programming Python for some time and want to get a better mental model of what&rsquo;s happening under the hood.  The words &ldquo;really&rdquo; or &ldquo;why&rdquo; often features in these questions &ndash; &ldquo;What&rsquo;s <em>really</em> happening when I write a list comprehension?&rdquo; &ldquo;Why are function calls considered expensive?&rdquo; If you&rsquo;ve seen any of the rest of this blog, you know I love digging around in Python internals, and I&rsquo;m always happy to share that with others.</p>

<h2>Why do this?</h2>

<p>First off, I reject the idea that you <em>have</em> to understand the internals of Python to be a good Python developer. Many of the things you&rsquo;ll learn about Python won&rsquo;t help you write better Python. The &ldquo;under the hood&rdquo; construction is specious, too &ndash; why stop at Python internals? Do you also need to know C perfectly, and the C compiler, and the assembly, and &hellip;</p>

<p>That said, I think you should dig around in Python &ndash; it sometimes will help you write better Python, you&rsquo;ll be more prepared to contribute to Python if you want to, and most importantly, it&rsquo;s often really interesting and fun.</p>

<h2>Setup</h2>

<p>Follow the instructions in the <a href="https://docs.python.org/devguide/setup.html">Python dev guide</a> under &ldquo;Version Control Setup&rdquo; and &ldquo;Getting the Source Code&rdquo;. You now have a Python that you can play with.</p>

<h2>Strategies</h2>

<h4>1. Naturalism</h4>

<p>Peter Seibel has a <a href="http://akaptur.github.com//www.gigamonkeys.com/code-reading/">great blog post</a> about reading code. He thinks that &ldquo;reading&rdquo; isn&rsquo;t how most people interact with code &ndash; instead, they dissect it. From the post:</p>

<blockquote><p>But then it hit me. Code is not literature and we are not readers. Rather, interesting pieces of code are specimens and we are naturalists. So instead of trying to pick out a piece of code and reading it and then discussing it like a bunch of Comp Lit. grad students, I think a better model is for one of us to play the role of a 19th century naturalist returning from a trip to some exotic island to present to the local scientific society a discussion of the crazy beetles they found: “Look at the antenna on this monster! They look incredibly ungainly but the male of the species can use these to kill small frogs in whose carcass the females lay their eggs.”</p>

<p>The point of such a presentation is to take a piece of code that the presenter has understood deeply and for them to help the audience understand the core ideas by pointing them out amidst the layers of evolutionary detritus (a.k.a. kluges) that are also part of almost all code. One reasonable approach might be to show the real code and then to show a stripped down reimplementation of just the key bits, kind of like a biologist staining a specimen to make various features easier to discern.</p></blockquote>

<h4>2. Science!</h4>

<p>I&rsquo;m a big fan of hypothesis-driven debugging, and that also applies in exploring Python.  I think you <em>should not</em> just sit down and read CPython at random. Instead, enter the codebase with (1) a question and (2) a hypothesis. For each thing you&rsquo;re wondering about, make a guess for how it might be implemented, then try to confirm or refute your guess.</p>

<h4>3. Guided tours</h4>

<p>Follow a step-by-step guide to changing something in Python. I like <a href="http://akaptur.github.com//mathamy.com/import-accio-bootstrapping-python-grammar.html">Amy Hanlon&rsquo;s post</a> on changing a keyword in Python and <a href="http://akaptur.github.com//eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/">Eli Bendersky&rsquo;s</a> on adding a keyword.</p>

<h4>4. Reading recommendations.</h4>

<p>I don&rsquo;t think you should sit down and read CPython at random, but I do have some suggestions for my favorite modules that are implemented in Python. I think you should read the implementation of</p>

<h5>1. <code>timeit</code> in <code>Lib/timeit.py</code></h5>

<h5>2. <code>namedtuple</code> in <code>Lib/collections.py</code>.</h5>

<p>If you have a favorite module implemented in Python, <a href="http://akaptur.github.com//twitter.com/akaptur">tweet at me</a> and I&rsquo;ll add it to this list.</p>

<h4>5. Blog &amp; talk</h4>

<p>Did you learn something interesting? Write it up and share it, or present at your local meetup group! It&rsquo;s easy to feel like everyone else already knows everything you know, but trust me, they don&rsquo;t.</p>

<h4>6. Rewrite</h4>

<p>Try to write your own implementation of <code>timeit</code> or <code>namedtuple</code> before reading the implementation.  Or read a bit of C and rewrite the logic in Python. <a href="http://akaptur.github.com//github.com/nedbat/byterun">Byterun</a> is an example of the latter strategy.</p>

<h2>Tools</h2>

<p>I sometimes hesitate to recommend tooling because it&rsquo;s so easy to get stuck on installation problems. If you&rsquo;re having trouble installing something, get assistance (IRC, StackOverflow, a Meetup, etc.)  These problems are challenging to fix if you haven&rsquo;t seen them before, but often straightforward once you know what you&rsquo;re looking for. If you don&rsquo;t believe me, <a href="http://akaptur.github.com//mail.python.org/pipermail/python-dev/2014-February/132313.html">this thread</a> features Guido van Rossum totally misunderstanding a problem he&rsquo;s having with a module that turns out to be related to upgrading to OS X Mavericks. <em>This stuff is hard.</em></p>

<h4>1. Ack</h4>

<p>I&rsquo;d been using <code>grep</code> in the CPython codebase, which was noticeably slow. (It&rsquo;s especially slow when you forget to add the <code>.</code> at the end of the command and grep patiently waits on stdin, a mistake I manage to make <em>all the time</em>.) I started using <a href="http://akaptur.github.com//beyondgrep.com/">ack</a> a few months ago and really like it.</p>

<p>If you&rsquo;re on a Mac and use homebrew, you can <code>brew install ack</code>, which takes only a few seconds. Then do <code>ack string_youre_looking_for</code> and you get a nicely-formatted output. I imagine you could get the same result with <code>grep</code> if you knew the right options to pass it, but I find ack fast and simple.</p>

<p>Try using <code>ack</code> on <a href="http://akaptur.github.com/blog/2014/06/11/of-syntax-warnings-and-symbol-tables/">the text of an error message</a> or <a href="http://akaptur.github.com//acmonette.com/here-there-be-pydras.html">a mysterious constant</a>. You may be surprised how often this leads you directly to the relevant source code.</p>

<h4>2. timeit</h4>

<p>Timing &amp; efficiency questions are a great place to use the &ldquo;Science!&rdquo; strategy. You may have a question like &ldquo;Which is faster, X or Y?&rdquo; For example, is it faster to do two assignment statements in a row, or do both in one tuple-unpacking assignment? I&rsquo;m guessing that the tuple-unpacking will take longer because of the unpacking step. Let&rsquo;s find out!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>~ ⚲ python -m timeit &quot;x = 1; y = 2&quot;
</span><span class='line'>10000000 loops, best of 3: 0.0631 usec per loop
</span><span class='line'>~ ⚲ python -m timeit &quot;x, y = 1, 2&quot;
</span><span class='line'>10000000 loops, best of 3: 0.0456 usec per loop
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m wrong! Interesting! I wonder why that is. What if instead of unpacking a tuple, we did &hellip;</p>

<p>A lot of people I talk to like using IPython for timing. IPython is pip-installable, and it usually installs smoothly into a virtual environment. In the IPython REPL, you can use <code>%timeit</code> for timing questions. There are also other <a href="http://akaptur.github.com//ipython.org/ipython-doc/dev/interactive/tutorial.html#magic-functions">magic functions</a> available in IPython.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="o">%</span><span class="n">timeit</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="mi">10000000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">3</span><span class="p">:</span> <span class="mf">82.3</span> <span class="n">ns</span> <span class="n">per</span> <span class="n">loop</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="o">%</span><span class="n">timeit</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">10000000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">3</span><span class="p">:</span> <span class="mf">47.3</span> <span class="n">ns</span> <span class="n">per</span> <span class="n">loop</span>
</span></code></pre></td></tr></table></div></figure>


<p>One caveat on timing stuff &ndash; use <code>timeit</code> to enhance your understanding, but unless you have real speed problems, you should write code for clarity, not for miniscule speed gains like this one.</p>

<h4>3. Disassembling</h4>

<p>Python compiles down to bytecode, an intermediate representation of your Python code used by the Python virtual machine.  It&rsquo;s sometimes enlightening and often fun to look at that bytecode using the built-in <code>dis</code> module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">one</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">...</span>     <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">two</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">dis</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">one</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">2</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">3</span>           <span class="mi">6</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">9</span> <span class="n">STORE_FAST</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">12</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">15</span> <span class="n">RETURN_VALUE</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">two</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">2</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">3</span> <span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">UNPACK_SEQUENCE</span>          <span class="mi">2</span>
</span><span class='line'>              <span class="mi">6</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">9</span> <span class="n">STORE_FAST</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">12</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">15</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation of the various operations are in <code>Python/ceval.c</code>.</p>

<h4>4. Inspect/cinspect</h4>

<p>You can get into the habit of trying to call <code>inspect</code> on anything you&rsquo;re curious about to see the source code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">inspect</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">collections</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">inspect</span><span class="o">.</span><span class="n">getsource</span><span class="p">(</span><span class="n">collections</span><span class="o">.</span><span class="n">namedtuple</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">namedtuple</span><span class="p">(</span><span class="n">typename</span><span class="p">,</span> <span class="n">field_names</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">rename</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'>    <span class="s">&quot;&quot;&quot;Returns a new subclass of tuple with named fields.</span>
</span><span class='line'><span class="s">    ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, <code>inspect</code> will only show the source code of things that are implemented in Python, which can be frustrating.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">inspect</span><span class="o">.</span><span class="n">getsource</span><span class="p">(</span><span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">)</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>   <span class="p">[</span><span class="o">...</span> <span class="n">snip</span> <span class="o">...</span><span class="p">]</span>
</span><span class='line'><span class="ne">IOError</span><span class="p">:</span> <span class="n">could</span> <span class="ow">not</span> <span class="n">find</span> <span class="k">class</span> <span class="nc">definition</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">:(</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get around this, <a href="http://akaptur.github.com//github.com/punchagan">Puneeth Chaganti</a> wrote a tool called <a href="http://akaptur.github.com//github.com/punchagan/cinspect">cinspect</a> that extends <code>inspect</code> to work reasonably consistently with C-implemented code as well.</p>

<h4>5. K&amp;R</h4>

<p>I think C is about a hundred times easier to read than it is to write, so I encourage you to read C code even if you don&rsquo;t totally know what&rsquo;s going on. That said, I think an afternoon spent with the first few chapters of <a href="http://akaptur.github.com//www.amazon.com/The-Programming-Language-2nd-Edition/dp/0131103628">K&amp;R</a> would take you pretty far.  <a href="http://akaptur.github.com//www.amazon.com/Hacking-The-Art-Exploitation-Edition/dp/1593271441">Hacking: The Art of Exploitation</a> is another fun, if less direct, way to learn C.</p>

<h2>Get started!</h2>

<p>CPython is a huge codebase, and you should expect that building a mental model of it will be a long process. Download the source code now and begin poking around, spending five or ten minutes when you&rsquo;re curious about something. Over time, you&rsquo;ll get faster and more rigorous, and the process will get easier.</p>

<p>Do you have recommended strategies and tools that don&rsquo;t appear here? <a href="http://akaptur.github.com//twitter.com/akaptur">Let me know!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The CPython Peephole Optimizer and You]]></title>
    <link href="http://akaptur.github.com/blog/2014/08/02/the-cpython-peephole-optimizer-and-you/"/>
    <updated>2014-08-02T11:25:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2014/08/02/the-cpython-peephole-optimizer-and-you</id>
    <content type="html"><![CDATA[<p>Last Thursday I gave a lightning talk at <a href="http://akaptur.github.com//www.hackerschool.com">Hacker School</a> about the peephole optimizer in Python.  A &ldquo;peephole optimization&rdquo; is a compiler optimization that looks at a small chunk of code at a time and optimizes in that little spot. This post explains one surprising side-effect of an optimization in CPython.</p>

<h2>Writing a test coverage tool</h2>

<p>Suppose that we&rsquo;re setting out to write a test coverage tool. Python provides an easy way to trace execution using <code>sys.settrace</code>, so a simple version of a coverage analyzer isn&rsquo;t too hard.</p>

<p>Our code to test is one simple function:</p>

<figure class='code'><figcaption><span>example.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">iffer</span><span class="p">(</span><span class="n">condition</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">condition</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">3</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we&rsquo;ll write the world&rsquo;s simplest testing framework:</p>

<figure class='code'><figcaption><span>tests.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">example</span> <span class="kn">import</span> <span class="n">iffer</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test_iffer</span><span class="p">():</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">iffer</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">iffer</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">run_tests</span><span class="p">():</span>
</span><span class='line'>    <span class="n">test_iffer</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the simplest possible coverage tool. We can pass <code>sys.settrace</code> any tracing function, and it&rsquo;ll be called with the arguments <code>frame</code>, <code>event</code>, and <code>arg</code> every time an event happens in the execution.  Lines of code being executed, function calls, function returns, and exceptions are all events. We&rsquo;ll filter out everything but <code>line</code> and <code>call</code> events, then keep track of what line of code was executing.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Then we run the tests while the trace function is tracing, and finally report which (non-empty lines) failed to execute.</p>

<figure class='code'><figcaption><span>coverage.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">tests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">inspect</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TinyCoverage</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">file_to_watch</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">source_file</span> <span class="o">=</span> <span class="n">file_to_watch</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">source_code</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_to_watch</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">executed_code</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">trace</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">frame</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
</span><span class='line'>        <span class="n">current_file</span> <span class="o">=</span> <span class="n">inspect</span><span class="o">.</span><span class="n">getframeinfo</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span><span class="o">.</span><span class="n">filename</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">source_file</span> <span class="ow">in</span> <span class="n">current_file</span> <span class="ow">and</span> \
</span><span class='line'>            <span class="p">(</span><span class="n">event</span> <span class="o">==</span> <span class="s">&quot;line&quot;</span> <span class="ow">or</span> <span class="n">event</span> <span class="o">==</span> <span class="s">&quot;call&quot;</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">executed_code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">frame</span><span class="o">.</span><span class="n">f_lineno</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">trace</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">unexecuted_code</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">skipped</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">line_num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">source_code</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">line_num</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">executed_code</span><span class="p">:</span>
</span><span class='line'>                <span class="n">src</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">source_code</span><span class="p">[</span><span class="n">line_num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">src</span> <span class="o">!=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">skipped</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line_num</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">skipped</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">report</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">skipped</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unexecuted_code</span><span class="p">()</span>
</span><span class='line'>        <span class="n">percent_skipped</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">skipped</span><span class="p">))</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">source_code</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">skipped</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;{} line(s) did not execute ({:.0%})&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">skipped</span><span class="p">),</span> <span class="n">percent_skipped</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">line_num</span> <span class="ow">in</span> <span class="n">skipped</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="n">line_num</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">source_code</span><span class="p">[</span><span class="n">line_num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;100</span><span class="si">% c</span><span class="s">overage, go you!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">TinyCoverage</span><span class="p">(</span><span class="s">&#39;example.py&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">settrace</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">trace</span><span class="p">)</span>
</span><span class='line'>    <span class="n">tests</span><span class="o">.</span><span class="n">run_tests</span><span class="p">()</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">settrace</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">report</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try it.  We&rsquo;re pretty confident in our test coverage &ndash; there are only two branches in the code, and we&rsquo;ve tested both of them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>peephole [master *] ⚲ python coverage.py
</span><span class='line'>1 line(s) did not execute (9%)
</span><span class='line'>4     else:
</span></code></pre></td></tr></table></div></figure>


<p>Why didn&rsquo;t the <code>else</code> line execute? To answer this, we&rsquo;ll run our function through the disassembler.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&gt;&gt;&gt; from example import iffer
</span><span class='line'>&gt;&gt;&gt; import dis
</span><span class='line'>&gt;&gt;&gt; dis.dis(iffer)
</span><span class='line'>  2           0 LOAD_FAST                0 (condition)
</span><span class='line'>              3 POP_JUMP_IF_FALSE       10
</span><span class='line'>
</span><span class='line'>  3           6 LOAD_CONST               1 (3)
</span><span class='line'>              9 RETURN_VALUE
</span><span class='line'>
</span><span class='line'>  5     &gt;&gt;   10 LOAD_CONST               2 (10)
</span><span class='line'>             13 RETURN_VALUE
</span><span class='line'>             14 LOAD_CONST               0 (None)
</span><span class='line'>             17 RETURN_VALUE
</span></code></pre></td></tr></table></div></figure>


<p>You don&rsquo;t need to follow exactly what&rsquo;s going on in this bytecode, but note that the first column is the line numbers of source code and line 4, the one containing the <code>else</code>, doesn&rsquo;t appear. Why not? Well, there&rsquo;s nothing to <em>do</em> with an else statement &ndash; it&rsquo;s just a separator between two branches of an <code>if</code> statement. The second line in the disassembly, <code>POP_JUMP_IF_FALSE   10</code>, means that the interpreter will pop the top thing off of the virtual machine stack, jump to bytecode index ten if that thing is false, or continue with the next instruction if it&rsquo;s true.</p>

<p>From the bytecode&rsquo;s perspective, there&rsquo;s no difference at all between writing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">a</span><span class="p">:</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">b</span><span class="p">:</span>
</span><span class='line'>       <span class="o">...</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>and this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">a</span><span class="p">:</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="k">elif</span> <span class="n">b</span><span class="p">:</span>
</span><span class='line'>   <span class="o">...</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>(even though the second is better style).</p>

<p>We&rsquo;ve learned we need to special-case <code>else</code> statements in our code coverage tool.  Since there&rsquo;s no logic in them, let&rsquo;s just drop lines that only contain <code>else:</code>. We can revise our <code>unexecuted_code</code> method accordingly:</p>

<figure class='code'><figcaption><span>coverage.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">unexecuted_code</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">skipped</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line_num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">source_code</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">line_num</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">executed_code</span><span class="p">:</span>
</span><span class='line'>            <span class="n">src</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">source_code</span><span class="p">[</span><span class="n">line_num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">src</span> <span class="o">!=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="ow">and</span> <span class="s">&quot;else:</span><span class="se">\n</span><span class="s">&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">src</span><span class="p">:</span>  <span class="c"># Add &quot;else&quot; dropping</span>
</span><span class='line'>                <span class="n">skipped</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line_num</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">skipped</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then run it again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>peephole [master *] ⚲ python coverage.py
</span><span class='line'>100% coverage, go you!
</span></code></pre></td></tr></table></div></figure>


<p>Success!</p>

<h2>Complications arise</h2>

<p>Our previous example was really simple. Let&rsquo;s add a more complex one.</p>

<figure class='code'><figcaption><span>example.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">iffer</span><span class="p">(</span><span class="n">condition</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">condition</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">3</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">continuer</span><span class="p">():</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="o">=</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">4</span><span class="p">:</span>
</span><span class='line'>                <span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">b</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>continuer</code> will increment <code>a</code> on all odd numbers and increment <code>b</code> and <code>c</code> for all even numbers. Don&rsquo;t forget to add a test:</p>

<figure class='code'><figcaption><span>tests.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">inspect</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">example2</span> <span class="kn">import</span> <span class="n">iffer</span><span class="p">,</span> <span class="n">continuer</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test_iffer</span><span class="p">():</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">iffer</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">iffer</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test_continuer</span><span class="p">():</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">continuer</span><span class="p">()</span> <span class="o">==</span> <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">run_tests</span><span class="p">():</span>
</span><span class='line'>    <span class="n">test_iffer</span><span class="p">()</span>
</span><span class='line'>    <span class="n">test_continuer</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>peephole [master *] ⚲ python coverage2.py
</span><span class='line'>1 line(s) did not execute (4%)
</span><span class='line'>13             continue
</span></code></pre></td></tr></table></div></figure>


<p>Hmm. The test we wrote certainly did involve the <code>continue</code> statement &ndash; if the interpreter hadn&rsquo;t skipped the bottom half of the loop, the test wouldn&rsquo;t have passed. Let&rsquo;s use the strategy we used before to understand what&rsquo;s happening: examining the output of the disassembler.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">continuer</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">8</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">DUP_TOP</span>
</span><span class='line'>              <span class="mi">4</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">7</span> <span class="n">DUP_TOP</span>
</span><span class='line'>              <span class="mi">8</span> <span class="n">STORE_FAST</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">11</span> <span class="n">STORE_FAST</span>               <span class="mi">2</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">9</span>          <span class="mi">14</span> <span class="n">SETUP_LOOP</span>              <span class="mi">79</span> <span class="p">(</span><span class="n">to</span> <span class="mi">96</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">17</span> <span class="n">LOAD_GLOBAL</span>              <span class="mi">0</span> <span class="p">(</span><span class="nb">range</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">20</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">23</span> <span class="n">CALL_FUNCTION</span>            <span class="mi">1</span>
</span><span class='line'>             <span class="mi">26</span> <span class="n">GET_ITER</span>
</span><span class='line'>        <span class="o">&gt;&gt;</span>   <span class="mi">27</span> <span class="n">FOR_ITER</span>                <span class="mi">65</span> <span class="p">(</span><span class="n">to</span> <span class="mi">95</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">30</span> <span class="n">STORE_FAST</span>               <span class="mi">3</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">10</span>          <span class="mi">33</span> <span class="n">LOAD_FAST</span>                <span class="mi">3</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">36</span> <span class="n">LOAD_CONST</span>               <span class="mi">3</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">39</span> <span class="n">BINARY_MODULO</span>
</span><span class='line'>             <span class="mi">40</span> <span class="n">POP_JUMP_IF_FALSE</span>       <span class="mi">72</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">11</span>          <span class="mi">43</span> <span class="n">LOAD_FAST</span>                <span class="mi">3</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">46</span> <span class="n">LOAD_CONST</span>               <span class="mi">4</span> <span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">49</span> <span class="n">BINARY_MODULO</span>
</span><span class='line'>             <span class="mi">50</span> <span class="n">POP_JUMP_IF_FALSE</span>       <span class="mi">27</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">12</span>          <span class="mi">53</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">56</span> <span class="n">LOAD_CONST</span>               <span class="mi">5</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">59</span> <span class="n">INPLACE_ADD</span>
</span><span class='line'>             <span class="mi">60</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">63</span> <span class="n">JUMP_ABSOLUTE</span>           <span class="mi">27</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">13</span>          <span class="mi">66</span> <span class="n">JUMP_ABSOLUTE</span>           <span class="mi">27</span>
</span><span class='line'>             <span class="mi">69</span> <span class="n">JUMP_FORWARD</span>            <span class="mi">10</span> <span class="p">(</span><span class="n">to</span> <span class="mi">82</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">15</span>     <span class="o">&gt;&gt;</span>   <span class="mi">72</span> <span class="n">LOAD_FAST</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">75</span> <span class="n">LOAD_CONST</span>               <span class="mi">5</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">78</span> <span class="n">INPLACE_ADD</span>
</span><span class='line'>             <span class="mi">79</span> <span class="n">STORE_FAST</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">16</span>     <span class="o">&gt;&gt;</span>   <span class="mi">82</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">85</span> <span class="n">LOAD_CONST</span>               <span class="mi">5</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">88</span> <span class="n">INPLACE_ADD</span>
</span><span class='line'>             <span class="mi">89</span> <span class="n">STORE_FAST</span>               <span class="mi">2</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">92</span> <span class="n">JUMP_ABSOLUTE</span>           <span class="mi">27</span>
</span><span class='line'>        <span class="o">&gt;&gt;</span>   <span class="mi">95</span> <span class="n">POP_BLOCK</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">18</span>     <span class="o">&gt;&gt;</span>   <span class="mi">96</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">99</span> <span class="n">LOAD_FAST</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>            <span class="mi">102</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>            <span class="mi">105</span> <span class="n">BUILD_TUPLE</span>              <span class="mi">3</span>
</span><span class='line'>            <span class="mi">108</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a lot more going on here, but you don&rsquo;t need to understand all of it to proceed. Here are the things we need to know to make sense of this:</p>

<ul>
<li>The second column in the output is the index in the bytecode, the third is the byte name, and the fourth is the argument.  The fifth, when present, is a hint about the meaning of the argument.</li>
<li><code>POP_JUMP_IF_FALSE</code>, <code>POP_JUMP_IF_TRUE</code>, and <code>JUMP_ABSOLUTE</code> have the jump target as their argument. So, e.g. <code>POP_JUMP_IF_TRUE 27</code> means &ldquo;if the popped expression is true, jump to position 27.&rdquo;</li>
<li><code>JUMP_FORWARD</code>&rsquo;s argument specifies the distance to jump forward in the bytecode, and the fifth column shows where the jump will end.</li>
<li>When an iterator is done, <code>FOR_ITER</code> jumps forward the number of bytes specified in its argument.</li>
</ul>


<p>Unlike the <code>else</code> case, the line containing the <code>continue</code> does appear in the bytecode. But trace through the bytecode using what you know about jumps: no matter how hard you try, you can&rsquo;t end up on bytes 66 or 69, the two that belong to line 13.</p>

<p>The <code>continue</code> is unreachable because of a compiler optimization. In this particular optimization, the compiler notices that two instructions in a row are jumps, and it combines these two hops into one larger jump. So, in a very real sense, the <code>continue</code> line didn&rsquo;t execute &ndash; it was optimized out &ndash; even though the logic reflected in the <code>continue</code> is still reflected in the bytecode.</p>

<p>What would this bytecode have looked like without the optimizations? There&rsquo;s not currently an option to disable the peephole bytecode optimizations, although there will be in a future version of Python (following an <a href="http://akaptur.github.com//mail.python.org/pipermail/python-ideas/2014-May/027893.html">extensive debate</a> on the python-dev list). For now, the only way to turn off optimizations is to comment out the relevant line in <code>compile.c</code>, the call to <code>PyCode_Optimize</code>, and recompile Python. Here&rsquo;s the diff, if you&rsquo;re playing along at home.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>cpython ⚲ hg diff
</span><span class='line'><span class="gh">diff -r 77f36cdb71b0 Python/compile.c</span>
</span><span class='line'><span class="gd">--- a/Python/compile.c  Fri Aug 01 17:48:34 2014 +0200</span>
</span><span class='line'><span class="gi">+++ b/Python/compile.c  Sat Aug 02 15:43:45 2014 -0400</span>
</span><span class='line'><span class="gu">@@ -4256,10 +4256,6 @@</span>
</span><span class='line'>     if (flags &lt; 0)
</span><span class='line'>         goto error;
</span><span class='line'>
</span><span class='line'><span class="gd">-    bytecode = PyCode_Optimize(a-&gt;a_bytecode, consts, names, a-&gt;a_lnotab);</span>
</span><span class='line'><span class="gd">-    if (!bytecode)</span>
</span><span class='line'><span class="gd">-        goto error;</span>
</span><span class='line'><span class="gd">-</span>
</span><span class='line'>     tmp = PyList_AsTuple(consts); /* PyCode_New requires a tuple */
</span><span class='line'>     if (!tmp)
</span><span class='line'>         goto error;
</span><span class='line'><span class="gu">@@ -4270,7 +4266,7 @@</span>
</span><span class='line'>     kwonlyargcount = Py_SAFE_DOWNCAST(c-&gt;u-&gt;u_kwonlyargcount, Py_ssize_t, int);
</span><span class='line'>     co = PyCode_New(argcount, kwonlyargcount,
</span><span class='line'>                     nlocals_int, stackdepth(c), flags,
</span><span class='line'><span class="gd">-                    bytecode, consts, names, varnames,</span>
</span><span class='line'><span class="gi">+                    a-&gt;a_bytecode, consts, names, varnames,</span>
</span><span class='line'>                     freevars, cellvars,
</span><span class='line'>                     c-&gt;c_filename, c-&gt;u-&gt;u_name,
</span><span class='line'>                     c-&gt;u-&gt;u_firstlineno,
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">continuer</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">8</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">DUP_TOP</span>
</span><span class='line'>              <span class="mi">4</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">7</span> <span class="n">DUP_TOP</span>
</span><span class='line'>              <span class="mi">8</span> <span class="n">STORE_FAST</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">11</span> <span class="n">STORE_FAST</span>               <span class="mi">2</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">9</span>          <span class="mi">14</span> <span class="n">SETUP_LOOP</span>              <span class="mi">79</span> <span class="p">(</span><span class="n">to</span> <span class="mi">96</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">17</span> <span class="n">LOAD_GLOBAL</span>              <span class="mi">0</span> <span class="p">(</span><span class="nb">range</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">20</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">23</span> <span class="n">CALL_FUNCTION</span>            <span class="mi">1</span> <span class="p">(</span><span class="mi">1</span> <span class="n">positional</span><span class="p">,</span> <span class="mi">0</span> <span class="n">keyword</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">26</span> <span class="n">GET_ITER</span>
</span><span class='line'>        <span class="o">&gt;&gt;</span>   <span class="mi">27</span> <span class="n">FOR_ITER</span>                <span class="mi">65</span> <span class="p">(</span><span class="n">to</span> <span class="mi">95</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">30</span> <span class="n">STORE_FAST</span>               <span class="mi">3</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">10</span>         <span class="mi">33</span> <span class="n">LOAD_FAST</span>                <span class="mi">3</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">36</span> <span class="n">LOAD_CONST</span>               <span class="mi">3</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">39</span> <span class="n">BINARY_MODULO</span>
</span><span class='line'>             <span class="mi">40</span> <span class="n">POP_JUMP_IF_FALSE</span>       <span class="mi">72</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">11</span>         <span class="mi">43</span> <span class="n">LOAD_FAST</span>                <span class="mi">3</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">46</span> <span class="n">LOAD_CONST</span>               <span class="mi">4</span> <span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">49</span> <span class="n">BINARY_MODULO</span>
</span><span class='line'>             <span class="mi">50</span> <span class="n">POP_JUMP_IF_FALSE</span>       <span class="mi">66</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">12</span>         <span class="mi">53</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">56</span> <span class="n">LOAD_CONST</span>               <span class="mi">5</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">59</span> <span class="n">INPLACE_ADD</span>
</span><span class='line'>             <span class="mi">60</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">63</span> <span class="n">JUMP_FORWARD</span>             <span class="mi">0</span> <span class="p">(</span><span class="n">to</span> <span class="mi">66</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">13</span>    <span class="o">&gt;&gt;</span>   <span class="mi">66</span> <span class="n">JUMP_ABSOLUTE</span>           <span class="mi">27</span>
</span><span class='line'>             <span class="mi">69</span> <span class="n">JUMP_FORWARD</span>            <span class="mi">10</span> <span class="p">(</span><span class="n">to</span> <span class="mi">82</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">14</span>    <span class="o">&gt;&gt;</span>   <span class="mi">72</span> <span class="n">LOAD_FAST</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">75</span> <span class="n">LOAD_CONST</span>               <span class="mi">5</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">78</span> <span class="n">INPLACE_ADD</span>
</span><span class='line'>             <span class="mi">79</span> <span class="n">STORE_FAST</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">15</span>    <span class="o">&gt;&gt;</span>   <span class="mi">82</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">85</span> <span class="n">LOAD_CONST</span>               <span class="mi">5</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">88</span> <span class="n">INPLACE_ADD</span>
</span><span class='line'>             <span class="mi">89</span> <span class="n">STORE_FAST</span>               <span class="mi">2</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">92</span> <span class="n">JUMP_ABSOLUTE</span>           <span class="mi">27</span>
</span><span class='line'>        <span class="o">&gt;&gt;</span>   <span class="mi">95</span> <span class="n">POP_BLOCK</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">16</span>    <span class="o">&gt;&gt;</span>   <span class="mi">96</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">99</span> <span class="n">LOAD_FAST</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>            <span class="mi">102</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>            <span class="mi">105</span> <span class="n">BUILD_TUPLE</span>              <span class="mi">3</span>
</span><span class='line'>            <span class="mi">108</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just as we expected, the jump targets have changed. The instruction at position 50, <code>POP_JUMP_IF_FALSE</code>, now has 66 as its jump target &ndash; a previously unreachable instruction associated with the <code>continue</code>. Instruction 63, <code>JUMP_FORWARD</code>, is also targeting 66. In both cases, the only way to reach this instruction is to jump to it, and the instruction itself jumps away.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>Now we can run our coverage tool with the unoptimized Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>peephole [master *+] ⚲ ../cpython/python.exe coverage2.py
</span><span class='line'>100% coverage, go you!
</span></code></pre></td></tr></table></div></figure>


<p>Complete success!</p>

<h2>So is this a good idea or not?</h2>

<p>Compiler optimizations are often a straightforward win.  If the compiler can apply simple rules that make my code faster without requiring work from me, that&rsquo;s great. Almost nobody requires a strict mapping of code that they write to code that ends up executing. So, peephole optimization in general: yes! Great!</p>

<p>But &ldquo;almost nobody&rdquo; is not nobody, and one kind of people who <em>do</em> require strict reasoning about executed code are the authors of test coverage software. In the <a href="http://akaptur.github.com//mail.python.org/pipermail/python-ideas/2014-May/027893.html">python-dev thread</a> I linked to earlier, there was an extensive discussion over whether or not serving this demographic by providing an option to disable to optimizations was worth increasing the complexity of the codebase. Ultimately it was decided that it was worthwhile, but this is a fair question to ask.</p>

<h2>Further reading</h2>

<p>Beyond the interesting Python-dev thread linked above, my other suggestions are mostly code. <a href="http://akaptur.github.com//hg.python.org/cpython/file/118d6f49d6d6/Python/peephole.c">CPython&rsquo;s <code>peephole.c</code></a> is pretty readable C code, and I encourage you to take a look at it. (&ldquo;Constant folding&rdquo; is a great place to start.) There&rsquo;s also a website <a href="http://akaptur.github.com//www.compileroptimizations.com/">compileroptimizations.com</a> which has short examples and discussion of 45 different optimizations. If you&rsquo;d like to play with these code examples, they&rsquo;re all available on my <a href="http://akaptur.github.com//github.com/akaptur/peephole-optimization">github</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>We need to include <code>call</code> events to capture the first line of a function declaration, <code>def fn(...):</code><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I&rsquo;ve previously written an introduction to the disassembler <a href="http://akaptur.github.com/blog/2013/11/17/introduction-to-the-python-interpreter-3/">here</a>.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>You may be wondering what the <code>JUMP_ABSOLUTE</code> instruction at position 66 is doing.  This instruction does nothing unless a particular compiler optimization is turned on. The optimization support faster loops, but creates restrictions on what those loops can do. See <code>ceval.c</code> for more. <em>Edit: This footnote previously incorrectly referenced <code>JUMP_FORWARD</code>.</em><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Of Syntax Warnings and Symbol Tables]]></title>
    <link href="http://akaptur.github.com/blog/2014/06/11/of-syntax-warnings-and-symbol-tables/"/>
    <updated>2014-06-11T18:30:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2014/06/11/of-syntax-warnings-and-symbol-tables</id>
    <content type="html"><![CDATA[<p>A Hacker Schooler hit an interesting bug today: her program would sometimes emit the message <code>SyntaxWarning: import * only allowed at module level</code>.  I had never seen a <code>SyntaxWarning</code> before, so I decided to dig in.</p>

<p>The wording of the warning is strange: it says that star-import is only <em>allowed</em> at the module level, but it&rsquo;s not a syntax error, just a warning.  In fact, you can use a star-import in a scope that isn&rsquo;t a module (in Python 2):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">nope</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span> <span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">stdin</span><span class="o">&gt;</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="ne">SyntaxWarning</span><span class="p">:</span> <span class="kn">import</span> <span class="o">*</span> <span class="n">only</span> <span class="n">allowed</span> <span class="n">at</span> <span class="n">module</span> <span class="n">level</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">nope</span><span class="p">()</span>
</span><span class='line'><span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Python <a href="https://docs.python.org/2/reference/simple_stmts.html?highlight=import#the-import-statement">spec</a> gives some more details:</p>

<blockquote><p>The from form with * may only occur in a module scope. If the wild card form of import — import * — is used in a function and the function contains or is a nested block with free variables, the compiler will raise a SyntaxError.</p></blockquote>

<p>Just having <code>import *</code> in a function isn&rsquo;t enough to raise a syntax error &ndash; we also need free variables. The <a href="https://docs.python.org/2.7/reference/executionmodel.html">Python execution model</a> refers to three kinds of variables, &lsquo;local,&rsquo; &lsquo;global,&rsquo; and &lsquo;free&rsquo;, defined as follows:</p>

<blockquote><p>If a name is bound in a block, it is a local variable of that block. If a name is bound at the module level, it is a global variable. (The variables of the module code block are local and global.) If a variable is used in a code block but not defined there, it is a free variable.</p></blockquote>

<p>Now we can see how to trigger a syntax error from our syntax warning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">one</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">two</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>         <span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="n">two</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">stdin</span><span class="o">&gt;</span><span class="p">:</span><span class="mi">2</span><span class="p">:</span> <span class="ne">SyntaxWarning</span><span class="p">:</span> <span class="kn">import</span> <span class="o">*</span> <span class="n">only</span> <span class="n">allowed</span> <span class="n">at</span> <span class="n">module</span> <span class="n">level</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">3</span>
</span><span class='line'><span class="ne">SyntaxError</span><span class="p">:</span> <span class="kn">import</span> <span class="o">*</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">allowed</span> <span class="ow">in</span> <span class="n">function</span> <span class="s">&#39;two&#39;</span> <span class="n">because</span> <span class="n">it</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">nested</span> <span class="n">function</span>
</span></code></pre></td></tr></table></div></figure>


<p>and similarly,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">one</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">two</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="n">two</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">stdin</span><span class="o">&gt;</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="ne">SyntaxWarning</span><span class="p">:</span> <span class="kn">import</span> <span class="o">*</span> <span class="n">only</span> <span class="n">allowed</span> <span class="n">at</span> <span class="n">module</span> <span class="n">level</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span>
</span><span class='line'><span class="ne">SyntaxError</span><span class="p">:</span> <span class="kn">import</span> <span class="o">*</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">allowed</span> <span class="ow">in</span> <span class="n">function</span> <span class="s">&#39;one&#39;</span> <span class="n">because</span> <span class="n">it</span> <span class="n">contains</span> <span class="n">a</span> <span class="n">nested</span> <span class="n">function</span> <span class="k">with</span> <span class="n">free</span> <span class="n">variables</span>
</span></code></pre></td></tr></table></div></figure>


<p>As Python programmers, we&rsquo;re used to our lovely dynamic language, and it&rsquo;s unusual to hit compile-time constraints.  As <a href="https://twitter.com/amygdalama">Amy Hanlon</a> points out, it&rsquo;s particularly weird to hit a compile-time error for code that wouldn&rsquo;t raise a NameError when it ran &ndash; <code>randint</code> would indeed be in <code>one</code>&rsquo;s namespace if the import-star had executed.</p>

<p>But we can&rsquo;t run code that doesn&rsquo;t compile, and in this case the compiler doesn&rsquo;t have enough information to determine what bytecode to emit. There are different opcodes for loading and storing each of global, free, and local variables. A variable&rsquo;s status as global, free, or local must be determined at compile time and then stored in the symbol table.</p>

<p>To investigate this, let&rsquo;s look at minor variations on this code snippet and disassemble them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_type</span> <span class="o">=</span> <span class="nb">type</span><span class="p">((</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">__code__</span><span class="p">)</span> <span class="c"># just a handle on the code type, which isn&#39;t exposed as a builtin</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># A helper function to disassemble nested functions</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">recur_dis</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">__code__</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="k">for</span> <span class="n">const</span> <span class="ow">in</span> <span class="n">fn</span><span class="o">.</span><span class="n">__code__</span><span class="o">.</span><span class="n">co_consts</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">const</span><span class="p">,</span> <span class="n">code_type</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>             <span class="k">print</span>
</span><span class='line'><span class="o">...</span>             <span class="k">print</span>
</span><span class='line'><span class="o">...</span>             <span class="k">print</span><span class="p">(</span><span class="n">const</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>             <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">const</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, when <code>x</code> is local, the compiler emits <code>STORE_FAST</code> in the assignment statement and <code>LOAD_FAST</code> to load it, marked with arrows below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">one</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">two</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>         <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="n">x</span>
</span><span class='line'><span class="o">...</span>     <span class="n">two</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">recur_dis</span><span class="p">(</span><span class="n">one</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">one</span> <span class="n">at</span> <span class="mh">0x10e246730</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">2</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">two</span> <span class="n">at</span> <span class="mh">0x10e246030</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">MAKE_FUNCTION</span>            <span class="mi">0</span>
</span><span class='line'>              <span class="mi">6</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">two</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">5</span>           <span class="mi">9</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">two</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">12</span> <span class="n">CALL_FUNCTION</span>            <span class="mi">0</span>
</span><span class='line'>             <span class="mi">15</span> <span class="n">POP_TOP</span>
</span><span class='line'>             <span class="mi">16</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">19</span> <span class="n">RETURN_VALUE</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">two</span> <span class="n">at</span> <span class="mh">0x10e246030</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">3</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>          <span class="o">&lt;----</span> <span class="n">STORE_FAST</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">4</span>           <span class="mi">6</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>          <span class="o">&lt;-----</span> <span class="n">LOAD_FAST</span>
</span><span class='line'>              <span class="mi">9</span> <span class="n">PRINT_ITEM</span>
</span><span class='line'>             <span class="mi">10</span> <span class="n">PRINT_NEWLINE</span>
</span><span class='line'>             <span class="mi">11</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">14</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>When <code>x</code> is global, the compiler emits <code>LOAD_GLOBAL</code> to load it.  I think the assignment is <code>STORE_FAST</code> again, but it&rsquo;s not pictured here because the assignment is outside the function and thus not disassembled.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">one</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">two</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="n">x</span>
</span><span class='line'><span class="o">...</span>     <span class="n">two</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">recur_dis</span><span class="p">(</span><span class="n">one</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">one</span> <span class="n">at</span> <span class="mh">0x10e246730</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">2</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">two</span> <span class="n">at</span> <span class="mh">0x10e2464b0</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">MAKE_FUNCTION</span>            <span class="mi">0</span>
</span><span class='line'>              <span class="mi">6</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">two</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">4</span>           <span class="mi">9</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">two</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">12</span> <span class="n">CALL_FUNCTION</span>            <span class="mi">0</span>
</span><span class='line'>             <span class="mi">15</span> <span class="n">POP_TOP</span>
</span><span class='line'>             <span class="mi">16</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">19</span> <span class="n">RETURN_VALUE</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">two</span> <span class="n">at</span> <span class="mh">0x10e2464b0</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">3</span>           <span class="mi">0</span> <span class="n">LOAD_GLOBAL</span>              <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>          <span class="o">&lt;-----</span> <span class="n">LOAD_GLOBAL</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">PRINT_ITEM</span>
</span><span class='line'>              <span class="mi">4</span> <span class="n">PRINT_NEWLINE</span>
</span><span class='line'>              <span class="mi">5</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">8</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, when <code>x</code> is nonlocal, the compiler notices that we&rsquo;ll need a closure, and emits the opcodes <code>LOAD_CLOSURE</code>, <code>MAKE_CLOSURE</code>, and later <code>LOAD_DEREF</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">one</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">two</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>        <span class="k">print</span> <span class="n">x</span>
</span><span class='line'><span class="o">...</span>     <span class="n">two</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">recur_dis</span><span class="p">(</span><span class="n">one</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">one</span> <span class="n">at</span> <span class="mh">0x10e246e30</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">2</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">STORE_DEREF</span>              <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>          <span class="o">&lt;-----</span> <span class="n">STORE_DEREF</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">3</span>           <span class="mi">6</span> <span class="n">LOAD_CLOSURE</span>             <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>          <span class="o">&lt;-----</span> <span class="n">LOAD_CLOSURE</span>
</span><span class='line'>              <span class="mi">9</span> <span class="n">BUILD_TUPLE</span>              <span class="mi">1</span>
</span><span class='line'>             <span class="mi">12</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">two</span> <span class="n">at</span> <span class="mh">0x10e246d30</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">3</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">15</span> <span class="n">MAKE_CLOSURE</span>             <span class="mi">0</span>
</span><span class='line'>             <span class="mi">18</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">two</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">5</span>          <span class="mi">21</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">two</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">24</span> <span class="n">CALL_FUNCTION</span>            <span class="mi">0</span>
</span><span class='line'>             <span class="mi">27</span> <span class="n">POP_TOP</span>
</span><span class='line'>             <span class="mi">28</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">31</span> <span class="n">RETURN_VALUE</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">two</span> <span class="n">at</span> <span class="mh">0x10e246d30</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">3</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">4</span>           <span class="mi">0</span> <span class="n">LOAD_DEREF</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>          <span class="o">&lt;-----</span> <span class="n">LOAD_DEREF</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">PRINT_ITEM</span>
</span><span class='line'>              <span class="mi">4</span> <span class="n">PRINT_NEWLINE</span>
</span><span class='line'>              <span class="mi">5</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">8</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s now return to a case that throws a syntax error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">one</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>      <span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="o">...</span>      <span class="k">def</span> <span class="nf">two</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>          <span class="k">print</span> <span class="n">x</span>
</span><span class='line'><span class="o">...</span>      <span class="n">two</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">stdin</span><span class="o">&gt;</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="ne">SyntaxWarning</span><span class="p">:</span> <span class="kn">import</span> <span class="o">*</span> <span class="n">only</span> <span class="n">allowed</span> <span class="n">at</span> <span class="n">module</span> <span class="n">level</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span>
</span><span class='line'><span class="ne">SyntaxError</span><span class="p">:</span> <span class="kn">import</span> <span class="o">*</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">allowed</span> <span class="ow">in</span> <span class="n">function</span> <span class="s">&#39;one&#39;</span> <span class="n">because</span> <span class="n">it</span> <span class="n">contains</span> <span class="n">a</span> <span class="n">nested</span> <span class="n">function</span> <span class="k">with</span> <span class="n">free</span> <span class="n">variables</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;d love to show what the disassembled bytecode for this one looks like, but we can&rsquo;t do that because there is no bytecode! We got a compile-time error, so there&rsquo;s nothing here.</p>

<h3>Further reading</h3>

<p>Everything I know about symbol tables I learned from <a href="http://eli.thegreenplace.net/2010/09/18/python-internals-symbol-tables-part-1/">Eli Bendersky&rsquo;s blog</a>. I&rsquo;ve skipped some complexity in the implementation that Eli covers.</p>

<p><code>ack</code>ing through the source code of CPython for the text of the error message leads us right to <code>symtable.c</code>, which is exactly where we&rsquo;d expect this message to be emitted. The function <code>check_unoptimized</code> shows where the syntax error gets thrown (and shows another illegal construct, too &ndash; but we&rsquo;ll leave that one as an exercise for the reader).</p>

<p>p.s. In Python 3, <code>import *</code> anywhere other than a module is just an unqualified syntax error &ndash; none of this messing around with the symbol table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyCon prep: import is a keyword]]></title>
    <link href="http://akaptur.github.com/blog/2014/03/16/pycon-prep-import-is-a-keyword/"/>
    <updated>2014-03-16T16:08:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2014/03/16/pycon-prep-import-is-a-keyword</id>
    <content type="html"><![CDATA[<p>Last week I had a ton of fun working with <a href="https://twitter.com/amygdalama">Amy Hanlon</a> on her Harry Potter themed fork of Python, called Nagini.  Nagini is full of magic and surprises. It implements the things you&rsquo;d hope for out of a Harry Potter Python, like making <code>quit</code> into <code>avada_kedavra</code>, and many analogous jokes.</p>

<p>Amy also had the idea to replace <code>import</code> with <code>accio</code>! Replacing <code>import</code> is a much harder problem than renaming a builtin.  Python doesn&rsquo;t prevent you from overwriting builtins, whereas to change keywords you have to edit the grammar and recompile Python. You should <a href="http://mathamy.com/import-accio-bootstrapping-python-grammar.html">go read Amy&rsquo;s post</a> on making this work.</p>

<p>This brings us to an interesting question: why <em>is</em> <code>import</code> a keyword, anyway? There&rsquo;s a function, <code>__import__</code>, that does (mostly) the same thing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">__import__</span><span class="p">(</span><span class="s">&#39;random&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">module</span> <span class="s">&#39;random&#39;</span> <span class="kn">from</span> <span class="s">&#39;/path/to/random.pyc&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function form requires the programmer to assign the return value &ndash; the module &ndash; to a name, but once we&rsquo;ve done that it works just like a normal module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">random</span> <span class="o">=</span> <span class="nb">__import__</span><span class="p">(</span><span class="s">&#39;random&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
</span><span class='line'><span class="mf">0.32574174955668145</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>__import__</code> function can handle all the forms of import, including <code>from foo import bar</code> and <code>from baz import *</code> (although it never modifies the calling namespace).  There&rsquo;s no technical reason why <code>__import__</code> couldn&rsquo;t be the regular way to do imports.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>As far as I can tell, the main argument against an <code>import</code> function is aesthetic. Compare:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">foo</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">foo</span> <span class="kn">import</span> <span class="n">bar</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">longmodulename</span> <span class="kn">as</span> <span class="nn">short</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="nb">__import__</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">bar</span> <span class="o">=</span> <span class="nb">__import__</span><span class="p">(</span><span class="s">&#39;random&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">bar</span>
</span><span class='line'><span class="n">short</span> <span class="o">=</span> <span class="nb">__import__</span><span class="p">(</span><span class="s">&#39;longmodulename&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first way certainly feels much cleaner and more readable.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Part of my goal in my <a href="https://us.pycon.org/2014/schedule/presentation/229/">upcoming PyCon talk</a> is to invite Pythonistas to consider decisions they might not have thought about before. <code>import</code> is a great vehicle for this, because everyone learns it very early on in their programming development, but most people don&rsquo;t ever think about it again. Here&rsquo;s another variation on that theme: <code>import</code> doesn&rsquo;t have to be a keyword!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I think all keywords <em>could</em> be expressed as functions, except those used for flow control (which I loosely define as keywords that generate any <code>JUMP</code> instructions when compiled). For example, between Python 2 and 3, two keywords did become functions &ndash; <code>print</code> and <code>exec</code>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I realize this is a slightly circular argument &ndash; if the function strategy were the regular way to import, it probably wouldn&rsquo;t be so ugly.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading EBNF]]></title>
    <link href="http://akaptur.github.com/blog/2014/03/16/reading-ebnf/"/>
    <updated>2014-03-16T15:39:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2014/03/16/reading-ebnf</id>
    <content type="html"><![CDATA[<p>One of the fun parts of <a href="http://mathamy.com/import-accio-bootstrapping-python-grammar.html">pairing with Amy on Nagini</a> was modifying the grammar of Python. You should try this &ndash; it&rsquo;s easier than you think! Eli Bendersky has a <a href="eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/">great post</a> with step-by-step instructions.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>Modifying Python&rsquo;s grammar starts in the Grammar/Grammar file. I&rsquo;ve recently learned how to read this (which, for me, mostly means learning how to pronounce the punctuation), so I want to walk through the <code>import</code> example in some detail. The syntax here is <a href="http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form">Extended Backus-Naur Form</a>, or EBNF. You read it like a tree, and your primary verb is &ldquo;consists of&rdquo;:</p>

<ul>
<li><code>import_stmt</code> consists of one of two forms, <code>import_name</code> or <code>import_from</code>.</li>
<li><code>import_name</code> consists of the literal word <code>import</code> followed by <code>dotted_as_names</code>.</li>
<li><code>dotted_as_names</code> consists of a <code>dotted_as_name</code> (note the singular), optionally followed by one or more pairs of a comma and another <code>dotted_as_name</code>.</li>
<li><code>dotted_as_name</code> consists of a <code>dotted_name</code>, optionally followed by the literal word &lsquo;as&rsquo; and a NAME.</li>
<li>Finally, <code>dotted_name</code> consists of a <code>NAME</code>, maybe followed by pairs of a dot and another <code>NAME</code>.</li>
</ul>


<p>You can walk the other branches in a similar way.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import_stmt: import_name | import_from
</span><span class='line'>import_name: 'import' dotted_as_names
</span><span class='line'># note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
</span><span class='line'>import_from: ('from' (('.' | '...')* dotted_name | ('.' | '...')+)
</span><span class='line'>              'import' ('*' | '(' import_as_names ')' | import_as_names))
</span><span class='line'>import_as_name: NAME ['as' NAME]
</span><span class='line'>dotted_as_name: dotted_name ['as' NAME]
</span><span class='line'>import_as_names: import_as_name (',' import_as_name)* [',']
</span><span class='line'>dotted_as_names: dotted_as_name (',' dotted_as_name)*
</span><span class='line'>dotted_name: NAME ('.' NAME)*</span></code></pre></td></tr></table></div></figure>


<p>To <code>accio</code>-ify Python, we had to replace the occurences of <code>'import'</code> with <code>'accio'</code>. There are only two &ndash; we were only interested in the literal string <code>import</code>, not all the other names. <code>import_as_name</code> and so on are just nodes in the tree, and only matter to the parser and compiler.</p>

<p>Every other keyword and symbol that has special meaning to the Python parser also appears in Grammar as a string.</p>

<p>Perusing the grammar is (goofy) way to learn about corner cases of Python syntax, too!  For example, did you know that <code>with</code> can take more than one context manager? It&rsquo;s right there in the grammar:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>with_stmt: 'with' with_item (',' with_item)*  ':' suite
</span><span class='line'>with_item: test ['as' expr]</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;foo.txt&#39;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;bar.txt&#39;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">g</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>     <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="n">g</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;bar&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">closed</span> <span class="nb">file</span> <span class="s">&#39;foo.txt&#39;</span><span class="p">,</span> <span class="n">mode</span> <span class="s">&#39;w&#39;</span> <span class="n">at</span> <span class="mh">0x10bf71270</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">closed</span> <span class="nb">file</span> <span class="s">&#39;bar.txt&#39;</span><span class="p">,</span> <span class="n">mode</span> <span class="s">&#39;w&#39;</span> <span class="n">at</span> <span class="mh">0x10bf71810</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now go ahead and add your favorite keyword into Python!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Like Eli, I&rsquo;m not advocating for Python&rsquo;s actual grammar to change &ndash; it&rsquo;s just a fun exercise.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyCon prep: `require` in Ruby]]></title>
    <link href="http://akaptur.github.com/blog/2014/02/16/pycon-prep-require-in-ruby/"/>
    <updated>2014-02-16T14:18:00-08:00</updated>
    <id>http://akaptur.github.com/blog/2014/02/16/pycon-prep-require-in-ruby</id>
    <content type="html"><![CDATA[<p>I&rsquo;m talking about <code>import</code> at PyCon in April. In the talk, we&rsquo;ll imagine that there is no <code>import</code> and will reinvent it from scratch. I hope this will give everyone (including me!) a deeper understanding of the choices <code>import</code> makes and the ways it could have been different. Ideally, the structure will be a couple of sections of the form &ldquo;We could have made [decisions].  That would mean [effects].  Surprise &ndash; that&rsquo;s how it works in [language]!&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>This is the first of (probably) several posts with notes of things I&rsquo;m learning as I prepare my talk.  Feedback is welcome.</p>

<p>Today I&rsquo;m looking into Ruby&rsquo;s <code>require</code> and <code>require_relative</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> to see if aspects of them would be interesting to Python programmers. So far, here&rsquo;s what I think is most relevant:</p>

<ul>
<li><p>Unlike Python, <code>require</code> won&rsquo;t load all objects in the required file. There&rsquo;s a concept of local versus global variables in the file scope that doesn&rsquo;t exist in Python.</p></li>
<li><p>Unlike Python, one file does not map to one module. Modules are created by using the keyword <code>module</code>.</p></li>
<li><p>Unlike Python, namespace collisions are completely possible. Consider the following simple files:</p></li>
</ul>


<figure class='code'><figcaption><span>one.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;one!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>  <span class="ss">:hello</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>two.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;two!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>  <span class="ss">:world</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;one&#39;</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;two&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the output from running <code>main.rb</code>:</p>

<figure class='code'><figcaption><span>output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">one!</span>
</span><span class='line'><span class="n">two!</span>
</span><span class='line'><span class="n">world</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Like Python&rsquo;s <code>import</code>, <code>require</code> will only load a file once. This can interact interestingly with namespace collisions &ndash; to take a contrived example:</li>
</ul>


<figure class='code'><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;one&#39;</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;two&#39;</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;one&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because <code>one.rb</code> isn&rsquo;t reloaded, <code>foo</code> is still <code>'world'</code>:</p>

<figure class='code'><figcaption><span>output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">one!</span>
</span><span class='line'><span class="n">two!</span>
</span><span class='line'><span class="n">world</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Questions for further investigation / thought</h3>

<p>My talk should <em>not</em> convince people that Python is Right and other languages are Wrong.  I&rsquo;m trying to overcome my bias towards the system I&rsquo;m most used to. (I think I&rsquo;ve written roughly equal amounts of Python and Ruby, but the vast majority of the Ruby I&rsquo;ve written is Rails, where all the <code>require</code>ing and namespacing happens by magic.) Here are some questions I&rsquo;d like to research more.</p>

<ol>
<li><p>Python&rsquo;s namespacing feels much better to me, although I&rsquo;m sure that&rsquo;s partly because I&rsquo;m used to it. What&rsquo;s the advantage to doing namespacing this way?</p></li>
<li><p>Why have both <code>require</code> and <code>require_relative</code>? Why not have <code>require</code> check the relative path as well before raising a <code>LoadError</code>?</p></li>
<li><p>What&rsquo;s the advantage of uncoupling a module from a file?</p></li>
</ol>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I <a href="https://twitter.com/akaptur/status/433281929199095809">asked on twitter</a> for suggestions of languages that make interesting decisions about <code>import</code> equivalents. So far the suggestions are R, Go, Rust, Ruby, JavaScript, and Clojure. If you have others, let me know.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>As far as I can tell, the only difference between <code>require</code> and <code>require_relative</code> is the load path searched.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Python Interpreter, Part 4: It's Dynamic!]]></title>
    <link href="http://akaptur.github.com/blog/2013/12/03/introduction-to-the-python-interpreter-4/"/>
    <updated>2013-12-03T11:25:00-08:00</updated>
    <id>http://akaptur.github.com/blog/2013/12/03/introduction-to-the-python-interpreter-4</id>
    <content type="html"><![CDATA[<p><em>This is Part 4 in a <a href="http://akaptur.github.com/blog/categories/python-internals">series</a> on the Python interpreter. Read <a href="http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter/">Part 1</a>, <a href="http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter-2/">Part 2</a>, and <a href="http://akaptur.github.com/blog/2013/11/17/introduction-to-the-python-interpreter-3/">Part 3</a>. If you&rsquo;re enjoying this series, consider applying to <a href="https://www.hackerschool.com/">Hacker School</a>, where I work as a facilitator.</em></p>

<p>One of the things I was confused about when I started digging into python internals was how python could be &ldquo;dynamic&rdquo; if it was also &ldquo;compiled.&rdquo; Often, in casual coversation, those two words are used as antonyms &ndash; there are &ldquo;dynamic languages,&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> like Python, Ruby, and Javascript, and &ldquo;compiled languages,&rdquo; like C, Java, and Haskell.</p>

<p>Most of the time, when people talk about a &ldquo;compiled&rdquo; language, they mean one that compiles down to native x86/ARM/etc instructions<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> &ndash; instructions for an actual machine made of metal. An &ldquo;interpreted&rdquo; language either doesn&rsquo;t have any compilation at all<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, or compiles to an intermediate representation, like bytecode.  Bytecode is instructions for a virtual machine, not a piece of hardware. Python falls into this latter category: the Python compiler&rsquo;s job is to generate bytecode for the Python interpreter.<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<p>The Python interpreter&rsquo;s job is to make sense of the bytecode via the virtual machine, which turns out to be a lot of work. We&rsquo;ll dig in to the virtual machine in Part 5.</p>

<p>So far our discussion of compiling versus interpretation has been abstract. These ideas become more clear with an example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">modulus</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">x</span> <span class="o">%</span> <span class="n">y</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">modulus</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_code</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">124</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">83</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">modulus</span><span class="o">.</span><span class="n">func_code</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">2</span>           <span class="mi">0</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">LOAD_FAST</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">6</span> <span class="n">BINARY_MODULO</span>
</span><span class='line'>              <span class="mi">7</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a function, its bytecode, and its bytecode run through the disassembler. By the time we get the prompt back after the function definition, the <code>modulus</code> function has been compiled and a code object generated. That code object will never be modified.</p>

<p>This seems pretty easy to reason about. Unsurprisingly, typing a modulus (<code>%</code>) causes the compiler to emit the instruction <code>BINARY_MODULO</code>. It looks like this function will be useful if we need to calculate a remainder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">modulus</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far, so good. But what if we don&rsquo;t pass it numbers?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">modulus</span><span class="p">(</span><span class="s">&quot;hello </span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;hello world&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Uh-oh, what happened there? You&rsquo;ve probably seen this before, but it usually looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&quot;hello </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="s">&quot;world&quot;</span>
</span><span class='line'><span class="n">hello</span> <span class="n">world</span>
</span></code></pre></td></tr></table></div></figure>


<p>Somehow, when <code>BINARY_MODULO</code> is faced with two strings, it does string interpolation instead of taking a remainder. This situation is a great example of dynamic typing. When the compiler built our code object for <code>modulus</code>, it had no idea whether <code>x</code> and <code>y</code> would be strings, numbers, or something else entirely. It just emitted some instructions: load one name, load another, <code>BINARY_MODULO</code> the two objects, and return the result. It&rsquo;s the interpreter&rsquo;s job to figure out what <code>BINARY_MODULO</code> actually means.</p>

<p>I&rsquo;d like to reflect on the depth of our ignorance for a moment. Our function <code>modulus</code> can calculate remainders, or it can do string formatting &hellip; what else?  If we define a custom object that responds to <code>__mod__</code>, then we can do <em>anything</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Surprise</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>         <span class="bp">self</span><span class="o">.</span><span class="n">num</span> <span class="o">=</span> <span class="n">num</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">__mod__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>         <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">num</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">num</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">seven</span> <span class="o">=</span> <span class="n">Surprise</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">four</span> <span class="o">=</span> <span class="n">Surprise</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">modulus</span><span class="p">(</span><span class="n">seven</span><span class="p">,</span> <span class="n">four</span><span class="p">)</span>
</span><span class='line'><span class="mi">11</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">modulus</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">modulus</span><span class="p">(</span><span class="s">&quot;hello </span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;hello world&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The same function <code>modulus</code>, with the same bytecode, has wildly different effects when passed different kinds of objects.  It&rsquo;s also possible for <code>modulus</code> to raise an error &ndash; for example, a <code>TypeError</code> if we called it on objects that didn&rsquo;t implement <code>__mod__</code>. Heck, we could even write a custom object that raises a <code>SystemExit</code> when <code>__mod__</code> is invoked.  Our <code>__mod__</code> function could have written to a file, or changed a global variable, or deleted another attribute of the object. We have near-total freedom.</p>

<p>This ignorance is one of the reasons that it&rsquo;s hard to optimize Python: you don&rsquo;t know when you&rsquo;re compiling the code object and generating the bytecode what it&rsquo;s going to end up doing. The compiler has no idea what&rsquo;s going to happen. As Russell Power and Alex Rubinsteyn wrote in <a href="http://arxiv.org/pdf/1306.6047v2.pdf">&ldquo;How fast can we make interpreted Python?&rdquo;</a>, &ldquo;In the general absence of type information, almost every instruction must be treated as INVOKE_ARBITRARY_METHOD.&rdquo;</p>

<p>While a general definition of &ldquo;compiling&rdquo; and &ldquo;interpreting&rdquo; can be difficult to nail down, in the context of Python it&rsquo;s fairly straightforward. Compiling is generating the code objects, including the bytecode. Interpreting is making sense of the bytecode in order to actually make things happen. One of the ways in which Python is &ldquo;dynamic&rdquo; is that the same bytecode doesn&rsquo;t always have the same effect. More generally, in Python the compiler does relatively little work, and the intrepreter relatively more.</p>

<p>In Part 5, we&rsquo;ll look at the actual virtual machine and interpreter.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>You sometimes hear &ldquo;interpreted language&rdquo; instead of &ldquo;dynamic language,&rdquo; which is usually, mostly, synonymous.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Thanks to David Nolen for this definition. The lines between &ldquo;parsing,&rdquo; &ldquo;compiling,&rdquo; and &ldquo;interpreting&rdquo; are not always clear. <a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Some languages that are usually not compiled at all include R, Scheme, and binary, depending on the implementation and your definition of &ldquo;compile.&rdquo;<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>As always in this series, I&rsquo;m talking about CPython and Python 2.7, although most of this content is true across implementations.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Python Interpreter, Part 3: Understanding Bytecode]]></title>
    <link href="http://akaptur.github.com/blog/2013/11/17/introduction-to-the-python-interpreter-3/"/>
    <updated>2013-11-17T09:56:00-08:00</updated>
    <id>http://akaptur.github.com/blog/2013/11/17/introduction-to-the-python-interpreter-3</id>
    <content type="html"><![CDATA[<p><em>This is Part 3 in a series on the Python interpreter.  Part 1 <a href="http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter/">here</a>, Part 2 <a href="http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter-2/">here</a>.  If you&rsquo;re enjoying this series, consider applying to <a href="https://www.hackerschool.com/">Hacker School</a>, where I work as a facilitator.</em></p>

<h3>Bytecode</h3>

<p>When we left our heroes, they had come across some odd-looking output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_code</span>
</span><span class='line'><span class="s">&#39;d</span><span class="se">\x01\x00</span><span class="s">}</span><span class="se">\x01\x00</span><span class="s">|</span><span class="se">\x01\x00</span><span class="s">|</span><span class="se">\x00\x00\x17</span><span class="s">S&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is python <em>bytecode</em>.</p>

<p>You recall from Part 2 that &ldquo;python bytecode&rdquo; and &ldquo;a python code object&rdquo; are not the same thing: the bytecode is an attribute of the code object, among many other attributes.  Bytecode is found in the <code>co_code</code> attribute of the code object, and contains instructions for the interpreter.</p>

<p>So what is bytecode?  Well, it&rsquo;s just a series of bytes.  They look wacky when we print them because some bytes are printable and others aren&rsquo;t, so let&rsquo;s take the <code>ord</code> of each byte to see that they&rsquo;re just numbers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_code</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">83</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are the bytes that make up python bytecode.  The interpreter will loop through each byte, look up what it should do for each one, and then do that thing.  Notice that the bytecode itself doesn&rsquo;t include any python objects, or references to objects, or anything like that.</p>

<p>One way to understand python bytecode would be to find the CPython interpreter file (it&rsquo;s <code>ceval.c</code>), and flip through it looking up what <code>100</code> means, then <code>1</code>, then <code>0</code>, and so on.  We&rsquo;ll do this later in the series!  For now, there&rsquo;s a simpler way: the <code>dis</code> module.</p>

<h3>Disassembling bytecode</h3>

<p>Disassembling bytecode means taking this series of bytes and printing out something we humans can understand.  It&rsquo;s not a step in python execution; the <code>dis</code> module just helps us understand an intermediate state of python internals. I can&rsquo;t think of a reason why you&rsquo;d ever want to use <code>dis</code> in production code &ndash; it&rsquo;s for humans, not for machines.</p>

<p>Today, however, taking some bytecode and making it human-readable is exactly what we&rsquo;re trying to do, so <code>dis</code> is a great tool.  We&rsquo;ll use the function <code>dis.dis</code> to analyze the code object of our function <code>foo</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">a</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">dis</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">2</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">STORE_FAST</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">3</span>           <span class="mi">6</span> <span class="n">LOAD_FAST</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">9</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">12</span> <span class="n">BINARY_ADD</span>
</span><span class='line'>             <span class="mi">13</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>(You usually see this called as <code>dis.dis(foo)</code>, directly on the function object.  That&rsquo;s just a convenience: <code>dis</code> is really analyzing the code object.  If it&rsquo;s passed a function, it just gets its code object.)</p>

<p>The numbers in the left-hand column are line numbers in the original source code.  The second column is the offset into the bytecode: <code>LOAD_CONST</code> appears at position 0, <code>STORE_FAST</code> at position 3, and so on.  The middle column shows the names of bytes. These names are just for our (human) benefit &ndash; the interpreter doesn&rsquo;t need the names.</p>

<p>The last two columns give details about the instructions&rsquo;s argument, if there is an argument.  The fourth column shows the argument itself, which represents an index into other attributes of the code object. In the example, <code>LOAD_CONST</code>&rsquo;s argument is an index into the list <code>co_consts</code>, and <code>STORE_FAST</code>&rsquo;s argument is an index into <code>co_varnames</code>.  Finally, in the fifth column, <code>dis</code> has looked up the constants or names in the place the fourth column specified and told us what it found there. We can easily verify this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_consts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_varnames</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;x&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also explains why the second instruction, <code>STORE_FAST</code>, is found at bytecode position 3.  If a bytecode has an argument, the next two bytes are that argument. It&rsquo;s the interpreter&rsquo;s job to handle this correctly.</p>

<p>(You may be surprised that <code>BINARY_ADD</code> doesn&rsquo;t have arguments. We&rsquo;ll come back to this in a future installment, when we get to the interpreter itself.)</p>

<p>People often say that <code>dis</code> is a disassembler of python bytecode.  This is true enough &ndash; the <code>dis</code> module&rsquo;s docs say it &ndash; but <code>dis</code> knows about more than just the bytecode, too: it uses the whole code object to give us an understandable printout.  The middle three columns show information actually encoded in the bytecode, while the first and the last columns show other information.  Again, the bytecode itself is really limited: it&rsquo;s just a series of numbers, and things like names and constants are not a part of it.</p>

<p>How does the <code>dis</code> module get from bytes like <code>100</code> to names like <code>LOAD_CONST</code> and back?  Try to think of a way you&rsquo;d do it.  If you thought &ldquo;Well, you could have a list that has the byte names in the right order,&rdquo; or you thought, &ldquo;I guess you could have a dictionary where the names are the keys and the byte values are the values,&rdquo; then congratulations!  That&rsquo;s exactly what&rsquo;s going on.  The file <code>opcode.py</code> defines the list and the dictionary.  It&rsquo;s full of lines like these (<code>def_op</code> inserts the mapping in both the list and the dictionary):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">def_op</span><span class="p">(</span><span class="s">&#39;LOAD_CONST&#39;</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>       <span class="c"># Index in const list</span>
</span><span class='line'><span class="n">def_op</span><span class="p">(</span><span class="s">&#39;BUILD_TUPLE&#39;</span><span class="p">,</span> <span class="mi">102</span><span class="p">)</span>      <span class="c"># Number of tuple items</span>
</span><span class='line'><span class="n">def_op</span><span class="p">(</span><span class="s">&#39;BUILD_LIST&#39;</span><span class="p">,</span> <span class="mi">103</span><span class="p">)</span>       <span class="c"># Number of list items</span>
</span><span class='line'><span class="n">def_op</span><span class="p">(</span><span class="s">&#39;BUILD_SET&#39;</span><span class="p">,</span> <span class="mi">104</span><span class="p">)</span>        <span class="c"># Number of set items</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s even a friendly comment telling us what each byte&rsquo;s argument means.</p>

<p>Ok, now we understand what python bytecode is (and isn&rsquo;t), and how to use <code>dis</code> to make sense of it. In Part 4, we&rsquo;ll look at another example to see how Python can compile down to bytecode but still be a dynamic language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Python Interpreter, Part 2: Code Objects]]></title>
    <link href="http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter-2/"/>
    <updated>2013-11-15T19:22:00-08:00</updated>
    <id>http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter-2</id>
    <content type="html"><![CDATA[<p>This is part of a <a href="http://akaptur.github.com/blog/categories/python-internals">series</a> on the python interpreter.
Part 1 <a href="http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter/">here</a>.</p>

<p>When we left our heroes, they were examining a simple function object.  Let&rsquo;s now dive a level deeper, and look at this function&rsquo;s code object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">a</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">function</span> <span class="n">foo</span> <span class="n">at</span> <span class="mh">0x107ef7aa0</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">foo</span> <span class="n">at</span> <span class="mh">0x107eeccb0</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see in the code above, the code object is an attribute of the function object.  (There are lots of other attributes on the function object, too. They&rsquo;re mostly not interesting because <code>foo</code> is so simple.)</p>

<p>A code object is generated by the Python compiler and intepreted by the interpreter.  It contains information that this interpreter needs to do its job. Let&rsquo;s look at the attributes of the code object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__class__&#39;</span><span class="p">,</span> <span class="s">&#39;__cmp__&#39;</span><span class="p">,</span> <span class="s">&#39;__delattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;__eq__&#39;</span><span class="p">,</span> <span class="s">&#39;__format__&#39;</span><span class="p">,</span> <span class="s">&#39;__ge__&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;__getattribute__&#39;</span><span class="p">,</span> <span class="s">&#39;__gt__&#39;</span><span class="p">,</span> <span class="s">&#39;__hash__&#39;</span><span class="p">,</span> <span class="s">&#39;__init__&#39;</span><span class="p">,</span> <span class="s">&#39;__le__&#39;</span><span class="p">,</span> <span class="s">&#39;__lt__&#39;</span><span class="p">,</span> <span class="s">&#39;__ne__&#39;</span><span class="p">,</span> <span class="s">&#39;__new__&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;__reduce__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce_ex__&#39;</span><span class="p">,</span> <span class="s">&#39;__repr__&#39;</span><span class="p">,</span> <span class="s">&#39;__setattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__sizeof__&#39;</span><span class="p">,</span> <span class="s">&#39;__str__&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;__subclasshook__&#39;</span><span class="p">,</span> <span class="s">&#39;co_argcount&#39;</span><span class="p">,</span> <span class="s">&#39;co_cellvars&#39;</span><span class="p">,</span> <span class="s">&#39;co_code&#39;</span><span class="p">,</span> <span class="s">&#39;co_consts&#39;</span><span class="p">,</span> <span class="s">&#39;co_filename&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;co_firstlineno&#39;</span><span class="p">,</span> <span class="s">&#39;co_flags&#39;</span><span class="p">,</span> <span class="s">&#39;co_freevars&#39;</span><span class="p">,</span> <span class="s">&#39;co_lnotab&#39;</span><span class="p">,</span> <span class="s">&#39;co_name&#39;</span><span class="p">,</span> <span class="s">&#39;co_names&#39;</span><span class="p">,</span> <span class="s">&#39;co_nlocals&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;co_stacksize&#39;</span><span class="p">,</span> <span class="s">&#39;co_varnames&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a bunch of stuff going on here, much of which we&rsquo;re not going to worry about today.  Let&rsquo;s take a look at three attributes that are interesting to us for our code object on <code>foo</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_varnames</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;x&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_consts</span>
</span><span class='line'><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_argcount</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are some intelligible-looking things: the names of the variables and the constants that our function knows about and the number of arguments the function takes.  But so far, we haven&rsquo;t seen anything that looks like instructions for how to execute the code object.  These instructions are called <em>bytecode</em>.  Bytecode is an attribute of the code object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_code</span>
</span><span class='line'><span class="s">&#39;d</span><span class="se">\x01\x00</span><span class="s">}</span><span class="se">\x01\x00</span><span class="s">|</span><span class="se">\x01\x00</span><span class="s">|</span><span class="se">\x00\x00\x17</span><span class="s">S&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So much for our intelligible-looking things.  What&rsquo;s going on here?  We&rsquo;ll dive in to bytecode in Part 3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Python Interpreter, Part 1: Function Objects]]></title>
    <link href="http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter/"/>
    <updated>2013-11-15T18:50:00-08:00</updated>
    <id>http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter</id>
    <content type="html"><![CDATA[<p>Over the last three months, I&rsquo;ve spent a lot of time working with Ned Batchelder on <a href="https://github.com/nedbat/byterun">byterun</a>, a python bytecode interpreter written in python.  Working on byterun has been tremendously educational and a lot of fun for me.  At the end of this series, I&rsquo;m going to attempt to convince you that it would be interesting and fun for you to play with byterun, too.  But before we do that, we need a bit of a warm-up: an overview of how python&rsquo;s internals work, so that we can understand what an interpreter is, what it does, and what it doesn&rsquo;t do.</p>

<p>This series assumes that you&rsquo;re in a similar position to where I was three months ago: you know python, but you don&rsquo;t know anything about the internals.</p>

<p>One quick note: I&rsquo;m going to work in and talk about Python 2.7 in this post.  The interpreter in Python 3 is mostly pretty similar.  There are also some syntax and naming differences, which I&rsquo;m going to ignore, but everything we do here is possible in Python 3 as well.</p>

<h3>How does it python?</h3>

<p>We&rsquo;ll start out with a really (really) high-level view of python&rsquo;s internals.  What happens when you execute a line of code in your python REPL?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">~</span> <span class="err">$</span> <span class="n">python</span>
</span><span class='line'><span class="n">Python</span> <span class="mf">2.7</span><span class="o">.</span><span class="mi">2</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">Jun</span> <span class="mi">20</span> <span class="mi">2012</span><span class="p">,</span> <span class="mi">16</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">33</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">GCC</span> <span class="mf">4.2</span><span class="o">.</span><span class="mi">1</span> <span class="n">Compatible</span> <span class="n">Apple</span> <span class="n">Clang</span> <span class="mf">4.0</span> <span class="p">(</span><span class="n">tags</span><span class="o">/</span><span class="n">Apple</span><span class="o">/</span><span class="n">clang</span><span class="o">-</span><span class="mf">418.0</span><span class="o">.</span><span class="mi">60</span><span class="p">)]</span> <span class="n">on</span> <span class="n">darwin</span>
</span><span class='line'><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are four steps that python takes when you hit return: lexing, parsing, compiling, and interpreting. Lexing is breaking the line of code you just typed into tokens.  The parser takes those tokens and generates a structure that shows their relationship to each other (in this case, an Abstract Syntax Tree).  The compiler then takes the AST and turns it into one (or more) code objects.  Finally, the interpreter takes each code object executes the code it represents.</p>

<p>I&rsquo;m not going to talk about lexing, parsing, or compiling at all today, mainly because I don&rsquo;t know anything about these steps yet.  Instead, we&rsquo;ll suppose that all that went just fine, and we&rsquo;ll have a proper python code object for the interpreter to interpret.</p>

<p>Before we get to code objects, let me clear up some common confusion.  In this series, we&rsquo;re going to talk about function objects, code objects, and bytecode. They&rsquo;re all different things.  Let&rsquo;s start with function objects.  We don&rsquo;t really have to understand function objects to get to the interpreter, but I want to stress that function objects and code objects are not the same &ndash; and besides, function objects are cool.</p>

<h3>Function objects</h3>

<p>You might have heard of &ldquo;function objects.&rdquo;  These are the things people are talking about when they say things like &ldquo;Functions are first-class objects,&rdquo; or &ldquo;Python has first-class functions.&rdquo;  Let&rsquo;s take a look at one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">a</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">function</span> <span class="n">foo</span> <span class="n">at</span> <span class="mh">0x107ef7aa0</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Functions are first-class objects,&rdquo; means that function are objects, like a list is an object or an instance of <code>MyObject</code> is an object.  Since <code>foo</code> is an object, we can talk about it without invoking it (that is, there&rsquo;s a difference between <code>foo</code> and <code>foo()</code>).  We can pass <code>foo</code> into another function as an argument, or we could bind it to a new name (<code>other_function = foo</code>). With first-class functions, all sorts of possibilities are open to us!</p>

<p>In Part 2, we&rsquo;ll dive down a level and look at the code object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Puzzle Solutions]]></title>
    <link href="http://akaptur.github.com/blog/2013/10/31/python-puzzle-solutions/"/>
    <updated>2013-10-31T10:47:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2013/10/31/python-puzzle-solutions</id>
    <content type="html"><![CDATA[<p>I really enjoyed seeing all the clever solutions to the <a href="http://akaptur.github.io/blog/2013/10/29/a-python-puzzle/">python puzzle I posted</a>.  You&rsquo;re all very creative!  Here&rsquo;s a discussion of the solutions I&rsquo;ve seen, plus some clarifications.  All spoilers are below the fold.</p>

<p>First, clarifications.  (These weren&rsquo;t always clear in the problem statement, particularly if you got the problem off of twitter, so award yourself full marks as desired.)</p>

<h4>Order doesn&rsquo;t matter</h4>

<p>&ldquo;Order doesn&rsquo;t matter&rdquo; means that the three-line version <em>always</em> returns <code>False</code>, and the semicolon version <em>always</em> returns <code>True</code>.</p>

<h4>You control only the contents of the lines</h4>

<p>Several people, including <a href="https://twitter.com/pepijndevos">Pepijn De Vos</a>, <a href="https://twitter.com/wolever">David Wolever</a>, and <a href="https://twitter.com/diarmuidbourke">diarmuidbourke</a> suggested something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;&quot;&quot;a; b; c&quot;&quot;&quot;</span> <span class="o">==</span> <span class="s">&#39;a; b; c&#39;</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;&quot;&quot;a</span>
</span><span class='line'><span class="s">... b</span>
</span><span class='line'><span class="s">... c&quot;&quot;&quot;</span> <span class="o">==</span> <span class="s">&#39;a; b; c&#39;</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m being pedantic here, but I rule this cheating, since (a) each line has to be a valid python expression or statement, and a multi-line string literal is only one expression, and (b) the string <code>"""a; b; c"""</code> is not the same as the string <code>"""a\nb\nc"""</code>.</p>

<p>Solutions appear below the fold.</p>

<!-- more -->


<h3>Solutions!</h3>

<h4>Jessica McKellar</h4>

<p><a href="https://twitter.com/jessicamckellar">Jessica</a> suggests the following solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">global</span> <span class="n">a</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot;a&quot;</span> <span class="k">if</span> <span class="s">&quot;a&quot;</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">global</span> <span class="n">a</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot;a&quot;</span> <span class="k">if</span> <span class="s">&quot;a&quot;</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span><span class="p">;</span> <span class="k">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">my_function</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">global</span> <span class="n">a</span>
</span><span class='line'><span class="o">...</span>     <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot;a&quot;</span> <span class="k">if</span> <span class="s">&quot;a&quot;</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">my_function</span><span class="p">()</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>
However, Jessica&rsquo;s solution <del>fails the &ldquo;order doesn&rsquo;t matter&rdquo; test, and it</del> is stateful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">global</span> <span class="n">a</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot;a&quot;</span> <span class="k">if</span> <span class="s">&quot;a&quot;</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span><span class="p">;</span> <span class="k">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">global</span> <span class="n">a</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot;a&quot;</span> <span class="k">if</span> <span class="s">&quot;a&quot;</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span><span class="p">;</span> <span class="k">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Edit: As Jessica points out, I&rsquo;m wrong here: her solution does pass the order test.  She also notes that the restriction against state wasn&rsquo;t present in the blog post (and she didn&rsquo;t see the <a href="https://twitter.com/akaptur/status/395252265117687808">original tweet</a>).  Full credit to Jessica, then!</em></p>

<h4>Javier Novoa Cataño</h4>

<p><a href="https://twitter.com/JaviStitch">Javier</a> suggests a solution for Python 2 that fails the order test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="bp">True</span> <span class="o">=</span> <span class="ow">not</span> <span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="bp">True</span> <span class="o">=</span> <span class="ow">not</span> <span class="bp">True</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="bp">True</span><span class="p">;</span> <span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, this depends on order and is stateful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="bp">True</span> <span class="o">=</span> <span class="ow">not</span> <span class="bp">True</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="bp">True</span><span class="p">;</span> <span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="bp">True</span> <span class="o">=</span> <span class="ow">not</span> <span class="bp">True</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="bp">True</span><span class="p">;</span> <span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Alex Gaynor</h4>

<p><a href="https://twitter.com/alex_gaynor">Alex</a> suggests using <code>sys._getframe(0)</code>.  I might quibble that <code>sys._getframe</code> constitutes introspection, but Alex is on to something.  He notices that each line of code executed in the interpreter gets its own frame.  (<em>foreshadowing</em>)</p>

<p>Alex gets full credit because I just discovered that the behavior underlying the original puzzle works in CPython, but is different in PyPy.  Sorry, Alex!</p>

<p><em>Edit: Never mind &ndash; there is a simpler solution in PyPy. See below.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">b</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">my_function</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>  <span class="n">a</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>  <span class="n">b</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>  <span class="k">return</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">my_function</span><span class="p">()</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Anton Dubrau</h4>

<p>For sheer inventiveness and creativity I have to hand it to <a href="https://twitter.com/ant6n">Anton</a>, working in the iPython REPL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">145</span><span class="p">]:</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span><span class="n">x</span><span class="o">=</span><span class="n">n</span> <span class="ow">or</span> <span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">x</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;&quot;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="p">(</span><span class="s">&quot;False&quot;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="s">&quot;True&quot;</span><span class="p">))</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">142</span><span class="p">]:</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span><span class="n">x</span><span class="o">=</span><span class="n">n</span> <span class="ow">or</span> <span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">143</span><span class="p">]:</span> <span class="n">x</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">144</span><span class="p">]:</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;&quot;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="p">(</span><span class="s">&quot;False&quot;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="s">&quot;True&quot;</span><span class="p">))</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>He&rsquo;s exploiting the fact that when executed on a single line, all three lines are considered part of the <code>for</code> loop. When the lines are broken up, only the <code>x=n or x-1</code> part belongs to the loop.  (This pretty much works in the standard CPython REPL too, but you have to throw in an extra line break.)</p>

<h4>Alexey Bezhan</h4>

<p><a href="https://twitter.com/allait">Alexey</a> was the only person outside of Hacker School to hit on my solution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">257</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">257</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">257</span><span class="p">;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">257</span><span class="p">;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nicely done, Alexey!</p>

<p>(For the pedantic among us, like me: this was the version I had in mind when I described my solution as 14 non-whitespace characters. Of course, to make the function version work too, we have to add <code>print</code> to the last line, taking us up to 19.  I&rsquo;ve edited the original post.)</p>

<p>So what&rsquo;s going on here, and why is this interesting?</p>

<h2>Analyzing this solution</h2>

<p>I described Alex Gaynor&rsquo;s solution as foreshadowing earlier.  Alex appears to have started from a good question: what&rsquo;s different about executing three lines of code versus executing three statements as one line of code?</p>

<p>One thing to note is that each time you get an interpreter prompt back (<code>&gt;&gt;&gt;</code>), your python has compiled and executed some code.  Every prompt corresponds to at least one code object.</p>

<p>How can we use the difference in code objects to generate this behavior? One way is to use constants: in CPython, two instances of the same number (larger than 256) are different objects. This explains why <code>a is b</code> returns <code>False</code> in the REPL (in the extended version, without semicolons).  In the semicolon version, all three statements are part of one code object.  We&rsquo;re giving the CPython compiler a chance to optimize.  It notices that we have two constants with the same value, and only hangs on to one copy.</p>

<p>Let&rsquo;s take a look.  It&rsquo;s easy to get a handle on the code object corresponding to a function &ndash; use <code>f.func_code</code> in Python 2, and <code>f.__code__</code> in Python 3.  Getting a handle on a code object corresponding to a line in the REPL is a little bit trickier, but we can do it if we compile them by hand.  In Python 2.x:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_a</span> <span class="o">=</span> <span class="nb">compile</span><span class="p">(</span><span class="s">&quot;a = 257&quot;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&quot;exec&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_a</span><span class="o">.</span><span class="n">co_consts</span>
</span><span class='line'><span class="p">(</span><span class="mi">257</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_b</span> <span class="o">=</span> <span class="nb">compile</span><span class="p">(</span><span class="s">&quot;b = 257&quot;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&quot;exec&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_b</span><span class="o">.</span><span class="n">co_consts</span>
</span><span class='line'><span class="p">(</span><span class="mi">257</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_both</span> <span class="o">=</span> <span class="nb">compile</span><span class="p">(</span><span class="s">&quot;a = 257; b = 257&quot;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&quot;exec&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_both</span><span class="o">.</span><span class="n">co_consts</span>
</span><span class='line'><span class="p">(</span><span class="mi">257</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="n">a</span> <span class="o">=</span> <span class="mi">257</span>
</span><span class='line'><span class="o">...</span>     <span class="n">b</span> <span class="o">=</span> <span class="mi">257</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">func_code</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">f</span> <span class="n">at</span> <span class="mh">0x107133cb0</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_consts</span>
</span><span class='line'><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="mi">257</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler&rsquo;s being a little smart here, and we only get one occurence of the constant <code>257</code> per code object.  When we execute the assignment statements on two different lines, we get two different code objects with two different instances of the integer <code>257</code>. This explains why <code>is</code>, which is comparing object identity, sees one as the same and the others as different.</p>

<p>This came up originally at Hacker School when <a href="https://github.com/phsteve">Steve Katz</a> stumbled across that thing with small integers and <code>is</code> versus <code>==</code> in python.  (If you&rsquo;re not familiar with it, you can read <a href="http://stackoverflow.com/questions/306313/python-is-operator-behaves-unexpectedly-with-integers">many questions on Stack Overflow about it</a>.  As a general rule, don&rsquo;t use <code>is</code> for integer comparisons.)  Steve went on to notice that the behavior changes when run from a script rather than in the REPL.</p>

<p>I didn&rsquo;t realize when posing this problem that it was an implementation detail of CPython, and <a href="http://pypy.readthedocs.org/en/latest/cpython_differences.html#object-identity-of-primitive-values-is-and-id">PyPy behaves differently</a> (and arguably correctly). That&rsquo;s why Alex Gaynor had to hook into the frame object.</p>

<h3><em>Edit: Late submissions</em></h3>

<p>More cleverness in my twitter feed!</p>

<p><a href="https://twitter.com/nedbat">Ned Batchelder</a> suggests using <code>-9</code> instead of <code>257</code> to shave off a few characters.</p>

<h4>Zev Benjamin</h4>

<p><a href="https://github.com/zbenjamin">Zev</a> came up with my favorite so far, in 14 characters <em>including</em> the print.  <del>He exploits the intricacies of floating-point arithmetic</del></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">x</span> <span class="ow">is</span> <span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="o">.</span><span class="mi">1</span><span class="p">;</span> <span class="k">print</span> <span class="n">x</span> <span class="ow">is</span> <span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;ve never dug around with floating-point math, do yourself a favor: it&rsquo;s really interesting stuff.  The Julia language suggests some good <a href="http://docs.julialang.org/en/latest/manual/integers-and-floating-point-numbers/#background-and-references">background reading</a>.</p>

<p><em>Edit 2: Zev emails that floating-point precision isn&rsquo;t involved here. Instead, he&rsquo;s exploiting the fact that floating-point numbers &ndash; even those that can be precisely represented &ndash; are not interned.  We&rsquo;d get the same results using <code>1.</code> instead of <code>.1</code>. This suggests a broader point: many solutions here could have used <code>a = thing; a is thing</code>, omitting LINE_B.</em></p>

<h4>Nick Olson-Harris</h4>

<p><a href="https://twitter.com/TheNyktos">Nick</a> has a fix to the PyPy integer handling: use a string instead of an int.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;f&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="s">&quot;f&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;f&quot;</span><span class="p">;</span> <span class="n">b</span> <span class="o">=</span> <span class="s">&quot;f&quot;</span><span class="p">;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Thanks, everyone!</h3>

<p>This was fun!  If I missed your solution and you want it to be included, <a href="https://twitter.com/akaptur">ping me on twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Python puzzle]]></title>
    <link href="http://akaptur.github.com/blog/2013/10/29/a-python-puzzle/"/>
    <updated>2013-10-29T19:40:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2013/10/29/a-python-puzzle</id>
    <content type="html"><![CDATA[<p>A couple of Hacker Schoolers were discussing an interesting corner of python today.  We discovered a nice bit of trivia: there exist three lines of python code that display the following behavior:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">LINE_A</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">LINE_B</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">LINE_C</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">LINE_A</span><span class="p">;</span> <span class="n">LINE_B</span><span class="p">;</span> <span class="n">LINE_C</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">my_function</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="n">LINE_A</span>
</span><span class='line'><span class="o">...</span>     <span class="n">LINE_B</span>
</span><span class='line'><span class="o">...</span>     <span class="n">LINE_C</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">my_function</span><span class="p">()</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>What are the lines?</p>

<p>Some ground rules:</p>

<ul>
<li>Introspection of any kind is cheating (e.g. noting the line number).</li>
<li>No dunder (<code>__foo__</code>) methods allowed.</li>
<li>Each line is a valid python expression.</li>
<li>You can&rsquo;t rely on order: while the lines will always execute A &ndash;> B &ndash;> C, a complete solution behaves identically if e.g. the semicolon version happens before the separate-line version.</li>
<li>No cheating with the function: e.g. you can&rsquo;t add a <code>return</code> unless you add it everywhere.</li>
<li><em>Edit: And nothing stateful.</em></li>
</ul>


<p>For bonus points, code golf!  My solution to this is <del>14</del> 19 characters long, not counting whitespace.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bug hunting]]></title>
    <link href="http://akaptur.github.com/blog/2013/10/15/bug-hunting/"/>
    <updated>2013-10-15T08:01:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2013/10/15/bug-hunting</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve managed to encounter three different bugs with the same obscure source in the last week.  I think Hacker School might be cursed.  Here&rsquo;s a blog post attempting to rid us of the curse.</p>

<h3>Bug 1: Flask app on Heroku can&rsquo;t find images and stylesheets</h3>

<p>The first bug was a Flask app deployed to Heroku.  It worked fine locally, but when deployed, none of the images or stylesheets rendered.</p>

<h3>Bug 2: A project fails to build</h3>

<p>A Hacker Schooler cloned into a project and tried to build it with <code>python setup.py install</code>.  The build failed with the error <code>Supposed package directory '[project]' exists but is not a directory.</code></p>

<h3>Bug 3: Heroku-deployed app crashes</h3>

<p>I deployed a new feature to the Hacker School site (which is a Rails app), and crashed the application.  Again, everything worked fine locally on my machine and my colleague&rsquo;s machines.</p>

<p>The solution and explanations are below the fold.  If you&rsquo;d like to try to guess, you can ask me debugging questions on twitter <a href="https://twitter.com/akaptur">(@akaptur)</a>, and I&rsquo;ll respond within 24 hours until Friday, October 18th, 2013. If you don&rsquo;t like guessing, or your own bugs are plenty for you, you can click through now.</p>

<!-- more -->


<h2>PSA: Mac OS X is a case-insensitive file system, y&#8217;all</h2>

<p>Remarkably enough, all these bugs were caused by converting from a case-insensitve file system, like Mac OS X, to a case-sensitive one, like Ubuntu.</p>

<h3>The flask app</h3>

<p>In the flask app, the author had named his static folder <code>Static</code>.  Flask looks for static assets in <code>static</code> by default. No problem on his MacBook &ndash; but a big problem on Heroku.</p>

<h3>The build</h3>

<p>This was my personal favorite, and a new bit of trivia: when can <code>git clone</code> result in a local repo state that&rsquo;s different from the remote repo?  If the project was developed on a case-sensitive file system, and there exists both a <code>project</code> script and a <code>Project</code> folder, git will first clone the script and then <strong>silently</strong> fail to write the identically-named folder or the files that belong in it.  Interestingly, all the blobs are still there in your local repo: <code>git status</code> will show all the files in <code>Project/</code> and the <code>Project/</code> folder itself as deleted.  Simple demo <a href="https://github.com/paulvstheworld/case-sensitive-test">here</a>. (Thanks, Paul!)</p>

<h3>The Hacker School deploy</h3>

<p>Same story as #1 with different details: my colleague and I had done <code>require 'JSON'</code> instead of <code>require 'json'</code>, which worked fine locally and brought the entire app down on heroku.</p>

<p>I&rsquo;ve finally learned to look for this bug when something mysterious happens between my machine and some other machine &ndash; which I&rsquo;m sure means I&rsquo;ll never encounter it again!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Bytecode: Fun with dis]]></title>
    <link href="http://akaptur.github.com/blog/2013/08/14/python-bytecode-fun-with-dis/"/>
    <updated>2013-08-14T16:04:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2013/08/14/python-bytecode-fun-with-dis</id>
    <content type="html"><![CDATA[<p>Last week at <a href="https://www.hackerschool.com/">Hacker School</a> I did a quick presentation on python bytecode and the <code>dis</code> module.  The disassembler is a very powerful tool with a gentle learning curve &ndash; that is, you can get a fair amount out of it without really knowing much about what&rsquo;s going on.  This post is a quick introduction to how and why you should use it.</p>

<h3>What&rsquo;s bytecode?</h3>

<p>Bytecode is the internal representation of a python program in the compiler.  Here, we&rsquo;ll be looking at bytecode from cpython, the default compiler.  If you don&rsquo;t know what compiler you&rsquo;re using, it&rsquo;s probably cpython.</p>

<h3>How do I get bytecode?</h3>

<p>You already have it!  Bytecode is what&rsquo;s contained in those .pyc files you see when you import a module.  It&rsquo;s also created on the fly by running any python code.</p>

<h3>Disassembling</h3>

<p>Ok, so you have some bytecode, and you want to understand it.  Let&rsquo;s look at it without using the <code>dis</code> module first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="o">...</span>     <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">foo</span> <span class="n">at</span> <span class="mh">0x106353530</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_code</span>
</span><span class='line'><span class="s">&#39;d</span><span class="se">\x01\x00</span><span class="s">}</span><span class="se">\x00\x00</span><span class="s">d</span><span class="se">\x02\x00</span><span class="s">}</span><span class="se">\x01\x00</span><span class="s">|</span><span class="se">\x00\x00</span><span class="s">|</span><span class="se">\x01\x00\x17</span><span class="s">S&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_code</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">83</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm, that was &hellip; not very enlightening.  We can see that we have a bunch of bytes (some printable, others not), but we have no idea what they mean.</p>

<p>Let&rsquo;s run it through <code>dis.dis</code> instead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">dis</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">2</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">3</span>           <span class="mi">6</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">9</span> <span class="n">STORE_FAST</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">4</span>          <span class="mi">12</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">15</span> <span class="n">LOAD_FAST</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">18</span> <span class="n">BINARY_ADD</span>
</span><span class='line'>             <span class="mi">19</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this starts to make some sense.  <code>dis</code> takes each byte, finds the opcode that corresponds to it in <code>opcodes.py</code>, and prints it as a nice, readable constant.  If we look at <code>opcodes.py</code> we see that <code>LOAD_CONST</code> is 100, <code>STORE_FAST</code> is 125, etc. <code>dis</code> also shows the line numbers on the left and the values or names on the right.  So without ever seeing something like before, we have an idea what&rsquo;s going on: we first load a constant, 2, then somehow store it as <code>a</code>.  Then we repeat this with 3 and <code>b</code>.  We load <code>a</code> and <code>b</code> back up, do <code>BINARY_ADD</code>, which presumably adds the numbers, and then do <code>RETURN_VALUE</code>.</p>

<p>Examining the bytecode can sometimes increase your understanding of python code.  Here is one example.</p>

<h3>elif</h3>

<p><code>elif</code> is identical in bytecode to <code>else ... if</code>.  Take a look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">flat</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="s">&quot;Fizz&quot;</span>
</span><span class='line'><span class="o">...</span>     <span class="k">elif</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="s">&quot;Buzz&quot;</span>
</span><span class='line'><span class="o">...</span>     <span class="k">else</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="n">num</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">nested</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="s">&quot;Fizz&quot;</span>
</span><span class='line'><span class="o">...</span>     <span class="k">else</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>             <span class="k">print</span> <span class="s">&quot;Buzz&quot;</span>
</span><span class='line'><span class="o">...</span>         <span class="k">else</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>             <span class="k">print</span> <span class="n">num</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve read <a href="http://www.python.org/dev/peps/pep-0008/">PEP 8</a> so we know that <em>flat is better than nested</em> for style and readability.  But is there a performance difference?  Not at all &ndash; in fact, these two functions have identical bytecode.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="mi">2</span>           <span class="mi">0</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">6</span> <span class="n">BINARY_MODULO</span>
</span><span class='line'>              <span class="mi">7</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">10</span> <span class="n">COMPARE_OP</span>               <span class="mi">2</span> <span class="p">(</span><span class="o">==</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">13</span> <span class="n">POP_JUMP_IF_FALSE</span>       <span class="mi">24</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">3</span>          <span class="mi">16</span> <span class="n">LOAD_CONST</span>               <span class="mi">3</span> <span class="p">(</span><span class="s">&#39;Fizz&#39;</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">19</span> <span class="n">PRINT_ITEM</span>
</span><span class='line'>             <span class="mi">20</span> <span class="n">PRINT_NEWLINE</span>
</span><span class='line'>             <span class="mi">21</span> <span class="n">JUMP_FORWARD</span>            <span class="mi">29</span> <span class="p">(</span><span class="n">to</span> <span class="mi">53</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">4</span>     <span class="o">&gt;&gt;</span>   <span class="mi">24</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">27</span> <span class="n">LOAD_CONST</span>               <span class="mi">4</span> <span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">30</span> <span class="n">BINARY_MODULO</span>
</span><span class='line'>             <span class="mi">31</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">34</span> <span class="n">COMPARE_OP</span>               <span class="mi">2</span> <span class="p">(</span><span class="o">==</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">37</span> <span class="n">POP_JUMP_IF_FALSE</span>       <span class="mi">48</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">5</span>          <span class="mi">40</span> <span class="n">LOAD_CONST</span>               <span class="mi">5</span> <span class="p">(</span><span class="s">&#39;Buzz&#39;</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">43</span> <span class="n">PRINT_ITEM</span>
</span><span class='line'>             <span class="mi">44</span> <span class="n">PRINT_NEWLINE</span>
</span><span class='line'>             <span class="mi">45</span> <span class="n">JUMP_FORWARD</span>             <span class="mi">5</span> <span class="p">(</span><span class="n">to</span> <span class="mi">53</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">7</span>     <span class="o">&gt;&gt;</span>   <span class="mi">48</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">51</span> <span class="n">PRINT_ITEM</span>
</span><span class='line'>             <span class="mi">52</span> <span class="n">PRINT_NEWLINE</span>
</span><span class='line'>        <span class="o">&gt;&gt;</span>   <span class="mi">53</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">56</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>That makes sense &ndash; <code>else</code> just means &ldquo;start executing here if the <code>if</code> was false&rdquo; &ndash; there&rsquo;s no more computation to do.  <code>elif</code> is just <a href="https://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a>.</p>

<h3>Further reading:</h3>

<p>This just scratches the surface of what&rsquo;s interesting about python bytecode.</p>

<p>If you enjoyed this, you might enjoy diving into Yaniv Aknin&rsquo;s <a href="http://tech.blog.aknin.name/category/my-projects/pythons-innards/">series</a> on python internals.  If you&rsquo;re excited about bytecode, you should contribute to Ned Batchelder&rsquo;s <a href="https://github.com/nedbat/byterun">byterun</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Systematic Debugging]]></title>
    <link href="http://akaptur.github.com/blog/2013/07/24/systematic-debugging/"/>
    <updated>2013-07-24T13:54:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2013/07/24/systematic-debugging</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve asked many of our residents at Hacker School what qualities all great programmers share.  There&rsquo;s very little agreement &ndash; clearly, there are a multitude of ways to be a great programmer, and you can think of a counter-example for almost every quality you can name.  One of the rare non-controversial statements came first from Jessica McKellar, who identified systematic debugging as a key skill.</p>

<p>What does systematic debugging look like?  At this point, I&rsquo;m focused on two aspects: asking a clear question, and keeping track of my mental &ldquo;stack&rdquo;.  I had a particularly fun and interesting bug yesterday that I think illustrates this nicely.</p>

<p>The problem at hand was a brainteaser from Jessica:</p>

<blockquote><p>Using the official SOWPODS Scrabble dictionary, what letters, if any, never appear doubled? (By that I mean &mdash; &ldquo;AA&rdquo; does appear doubled because it is in &ldquo;AARDVARK&rdquo;, &ldquo;BB&rdquo; does appear doubled because it is in &ldquo;BUBBLE&rdquo; &mdash; are there any letters that never appear doubled in a word?)</p></blockquote>

<p>I came up with a solution, but it was kind of slow, so I was trying to find a faster one.  Also, my original solution used a regular expression to match a doubled letter in a word, but it would only find the first pair (e.g. in BOOKKEEPER only the &lsquo;OO&rsquo; would be caught).</p>

<p>I decided to try taking the dictionary as a single string, rather than a list of words, and consuming it one letter-pair at a time, as follows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">find_all_doubles_as_word_mash</span><span class="p">():</span>
</span><span class='line'>    <span class="n">words</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;sowpods.txt&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>    <span class="n">letters</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">uppercase</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dub_re</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([A-Z])(\1)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">dubbed</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">dub_re</span><span class="p">,</span> <span class="n">words</span><span class="p">[</span><span class="n">end</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">dubbed</span> <span class="ow">and</span> <span class="n">letters</span><span class="p">:</span>
</span><span class='line'>        <span class="n">letters</span> <span class="o">-=</span> <span class="nb">set</span><span class="p">(</span><span class="n">dubbed</span><span class="o">.</span><span class="n">group</span><span class="p">())</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">+=</span> <span class="n">dubbed</span><span class="o">.</span><span class="n">end</span><span class="p">()</span>
</span><span class='line'>        <span class="n">dubbed</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">dub_re</span><span class="p">,</span> <span class="n">words</span><span class="p">[</span><span class="n">end</span><span class="p">:])</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">end</span><span class="p">,</span> <span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">letters</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re thinking, &ldquo;Hmm, that looks like it might be slow,&rdquo; congratulations!  It is indeed quite slow.  I had two guesses for why it was slow. (It wasn&rsquo;t the print statement.)  First, maybe I was copying the string over and over, and that was slowing down the function.  Second, maybe I misunderstodd the regular expression &ndash; for example, maybe it was taking a longer time to operate on a longer string. I decided to investigate the second possibility first, since regular expressions were more of a mystery to me.</p>

<p>At this point in the problem solving, my mental stack looks something like this:</p>

<pre>
 ---------------------------
| regex taking longer on a  | (newest)
| longer-length string?     |
 ---------------------------
| reg exp? or string copy?  |
 ---------------------------
| function is so slow, why? |
 ---------------------------
|   find a faster solution  |
 ---------------------------
|  solve wordplay problem   | (oldest)
 ---------------------------
</pre>


<p>The next step was to test my theory that my regular expression should not take longer on a longer string.  Importantly, the regex had no &ldquo;greedy&rdquo; elements &ndash; it should match and return the first time it encounters two identical characters, regardless of how long the string is after those matching characters.  Here was the experiment I wrote:</p>

<figure class='code'><figcaption><span>test_with_timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">timeit</span>
</span><span class='line'>
</span><span class='line'><span class="n">SETUP</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;import re;</span>
</span><span class='line'><span class="s">import string;</span>
</span><span class='line'><span class="s">double = re.compile(r&quot;([a-z])(</span><span class="se">\1</span><span class="s">)&quot;);</span>
</span><span class='line'><span class="s">short_test = &quot;hee&quot; + string.lowercase;</span>
</span><span class='line'><span class="s">long_test = &quot;hee&quot; + string.lowercase*100</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">N_TIMES</span> <span class="o">=</span> <span class="mi">10000</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span><span class='line'>    <span class="n">short_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(short_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>    <span class="n">long_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(long_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;short:&quot;</span><span class="p">,</span> <span class="n">short_time</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;long:&quot;</span><span class="p">,</span> <span class="n">long_time</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;time ratios:&quot;</span><span class="p">,</span> <span class="n">long_time</span> <span class="o">/</span> <span class="n">short_time</span><span class="p">,</span> <span class="s">&quot;x&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">test</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both cases, I thought, the regex should check &ldquo;he&rdquo;, fail, check &ldquo;ee&rdquo;, succeed, and return.  To my great surprise, the long string test took 70-80x as long to run as the short string test!</p>

<figure class='code'><figcaption><span>test_with_timeit output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>short: 0.0243809223175
</span><span class='line'>long: 1.77788496017
</span><span class='line'>time ratios: 72.9211527366 x
</span></code></pre></td></tr></table></div></figure>


<p>Clearly, I was missing something about regular expressions.  I googled around and learned some details about backreferences, the <code>(\1)</code> in my code (which makes my regular expression not actually <a href="http://en.wikipedia.org/wiki/Regular_expression#Formal_language_theory">&ldquo;regular&rdquo;</a>), but that wasn&rsquo;t very illuminating.  (You can picture &ldquo;something about Finite State Automata&rdquo; being pushed onto and quickly popped back off the stack.)</p>

<p>My next step was to run timing experiments with a variety of regular expressions to see if I could find an element that made the difference.  At this point yesterday, I was still trying to pass strings to <code>timeit</code>, which was getting unwieldy.  (Stay tuned to learn two better ways to do timing.)  I switched to a simpler timing script, just taking <code>time.time()</code> at the start and end of the algorithm.</p>

<figure class='code'><figcaption><span>test_without_timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'>
</span><span class='line'><span class="n">everybody_stand_back</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;double&quot;</span> <span class="p">:</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])(\1)&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&quot;double_var&quot;</span> <span class="p">:</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])\1&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&quot;single&quot;</span> <span class="p">:</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&quot;verbose&quot;</span> <span class="p">:</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">let</span><span class="o">*</span><span class="mi">2</span> <span class="k">for</span> <span class="n">let</span> <span class="ow">in</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="p">)),</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_strings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;short&quot;</span> <span class="p">:</span> <span class="s">&quot;hee&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;long&quot;</span> <span class="p">:</span> <span class="s">&quot;hee&quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">outcomes</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">N_TIMES</span> <span class="o">=</span> <span class="mi">100000</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">regex</span> <span class="ow">in</span> <span class="n">everybody_stand_back</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">string_name</span><span class="p">,</span> <span class="n">test_string</span> <span class="ow">in</span> <span class="n">test_strings</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>            <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N_TIMES</span><span class="p">):</span>
</span><span class='line'>                <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">regex</span><span class="p">,</span> <span class="n">test_string</span><span class="p">)</span>
</span><span class='line'>            <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>            <span class="n">delta</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span>
</span><span class='line'>            <span class="n">outcomes</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="n">string_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">delta</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">outcomes</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">outcomes</span> <span class="o">=</span> <span class="n">test</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">regex</span> <span class="ow">in</span> <span class="n">outcomes</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="n">regex</span><span class="p">[</span><span class="s">&quot;long&quot;</span><span class="p">]</span><span class="o">/</span><span class="n">regex</span><span class="p">[</span><span class="s">&quot;short&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Hopefully the differences would start to become clear, and I could easily extend this to add more variations on the regular expression.</p>

<p>It printed:</p>

<figure class='code'><figcaption><span>test_without_timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">double</span> <span class="mf">0.953508019384</span>
</span><span class='line'><span class="n">single</span> <span class="mf">1.15989795352</span>
</span><span class='line'><span class="n">double_var</span> <span class="mf">1.04188410251</span>
</span><span class='line'><span class="n">verbose</span> <span class="mf">0.861312402506</span>
</span></code></pre></td></tr></table></div></figure>


<p>Uh-oh, wait a minute, I thought this was identical code.  Where did the 70x time difference go?</p>

<p>I couldn&rsquo;t see any obvious errors, so I went back to the <code>timeit</code> code.  Could I reproduce these results while still using the <code>timeit</code> module?</p>

<p>Let&rsquo;s look back at the problem stack.</p>

<pre>
 ---------------------------
| what's up with timeit?    |    
 ---------------------------
| is this code different?   |    
 ---------------------------
| timing programs give      |
| different results, uh-oh  |
 ---------------------------
| regex taking longer on a  |
| longer-length string      |
 ---------------------------
| reg exp? or string copy?  |
 ---------------------------
| function is so slow, why? |
 ---------------------------
|   find a faster solution  |
 ---------------------------
|  solve wordplay problem   | (oldest)
 ---------------------------
</pre>


<p>At this point <a href="https://twitter.com/brandon_rhodes">Brandon Rhodes</a> joined me in pair-debugging, and we made a couple of discoveries.  The most interesting of these was that two different ways of calling timeit generated wildly different results.</p>

<figure class='code'><figcaption><span>test_with_timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">timeit</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">double</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])(\1)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">SETUP</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;import re;</span>
</span><span class='line'><span class="s">import string;</span>
</span><span class='line'><span class="s">double = re.compile(r&quot;([a-z])(</span><span class="se">\1</span><span class="s">)&quot;);</span>
</span><span class='line'><span class="s">short_test = &quot;hee&quot; + string.lowercase;</span>
</span><span class='line'><span class="s">long_test = &quot;hee&quot; + string.lowercase*200</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">N_TIMES</span> <span class="o">=</span> <span class="mi">10000</span>
</span><span class='line'>
</span><span class='line'><span class="n">short_test</span> <span class="o">=</span> <span class="s">&quot;hee&quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span>
</span><span class='line'><span class="n">long_test</span> <span class="o">=</span> <span class="s">&quot;hee&quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="o">*</span><span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span><span class='line'>    <span class="n">short_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(short_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>    <span class="n">long_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(long_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;short:&quot;</span><span class="p">,</span> <span class="n">short_time</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;long:&quot;</span><span class="p">,</span> <span class="n">long_time</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">short_string_test</span><span class="p">():</span>
</span><span class='line'>    <span class="n">double</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">short_test</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">long_string_test</span><span class="p">():</span>
</span><span class='line'>    <span class="n">double</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">long_test</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;method 1: strings&quot;</span>
</span><span class='line'>    <span class="n">test</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;method 2: functions&quot;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">short_string_test</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">long_string_test</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;method 3: build timer explicitly&quot;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(long_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;short:&quot;</span><span class="p">,</span> <span class="n">s</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(long_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;long:&quot;</span><span class="p">,</span> <span class="n">t</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>test_with_timeit output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">method</span> <span class="mi">1</span><span class="p">:</span> <span class="n">strings</span>
</span><span class='line'><span class="n">short</span><span class="p">:</span> <span class="mf">0.0235750675201</span>
</span><span class='line'><span class="nb">long</span><span class="p">:</span> <span class="mf">3.41090488434</span>
</span><span class='line'><span class="n">method</span> <span class="mi">2</span><span class="p">:</span> <span class="n">functions</span>
</span><span class='line'><span class="mf">0.0102179050446</span>
</span><span class='line'><span class="mf">0.00959801673889</span>
</span><span class='line'><span class="n">method</span> <span class="mi">3</span><span class="p">:</span> <span class="n">build</span> <span class="n">timer</span> <span class="n">explicitly</span>
</span><span class='line'><span class="n">short</span><span class="p">:</span> <span class="mf">0.0263011455536</span>
</span><span class='line'><span class="nb">long</span><span class="p">:</span> <span class="mf">3.42960190773</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we know something is up with passing strings to timeit.</p>

<pre>
 ---------------------------
| timeit string version - ? |        
 ---------------------------
| what's up with timeit?    |    
 ---------------------------
| is this code different?   |    
 ---------------------------
          ....
</pre>


<p>Ok, we&rsquo;ve narrowed it down this far &ndash; it&rsquo;s time to take a look at the source.  <code>timeit</code> is a module written in python (yay!), and the relevant parts look pretty straightforward:</p>

<figure class='code'><figcaption><span>timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">template</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">def inner(_it, _timer):</span>
</span><span class='line'><span class="s">    </span><span class="si">%(setup)s</span><span class="s"></span>
</span><span class='line'><span class="s">    _t0 = _timer()</span>
</span><span class='line'><span class="s">    for _i in _it:</span>
</span><span class='line'><span class="s">        </span><span class="si">%(stmt)s</span><span class="s"></span>
</span><span class='line'><span class="s">    _t1 = _timer()</span>
</span><span class='line'><span class="s">    return _t1 - _t0</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Timer</span><span class="p">:</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Class for timing execution speed of small code snippets.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The constructor takes a statement to be timed, an additional</span>
</span><span class='line'><span class="sd">    statement used for setup, and a timer function.  Both statements</span>
</span><span class='line'><span class="sd">    default to &#39;pass&#39;; the timer function is platform-dependent (see</span>
</span><span class='line'><span class="sd">    module doc string).</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    To measure the execution time of the first statement, use the</span>
</span><span class='line'><span class="sd">    timeit() method.  The repeat() method is a convenience to call</span>
</span><span class='line'><span class="sd">    timeit() multiple times and return a list of results.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The statements may contain newlines, as long as they don&#39;t contain</span>
</span><span class='line'><span class="sd">    multi-line string literals.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">stmt</span><span class="o">=</span><span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="n">timer</span><span class="o">=</span><span class="n">default_timer</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Constructor.  See class doc string.&quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">timer</span> <span class="o">=</span> <span class="n">timer</span>
</span><span class='line'>        <span class="n">ns</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="nb">basestring</span><span class="p">):</span>
</span><span class='line'>            <span class="n">stmt</span> <span class="o">=</span> <span class="n">reindent</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="nb">basestring</span><span class="p">):</span>
</span><span class='line'>                <span class="n">setup</span> <span class="o">=</span> <span class="n">reindent</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                <span class="n">src</span> <span class="o">=</span> <span class="n">template</span> <span class="o">%</span> <span class="p">{</span><span class="s">&#39;stmt&#39;</span><span class="p">:</span> <span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;setup&#39;</span><span class="p">:</span> <span class="n">setup</span><span class="p">}</span>
</span><span class='line'>            <span class="k">elif</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="s">&#39;__call__&#39;</span><span class="p">):</span>
</span><span class='line'>                <span class="n">src</span> <span class="o">=</span> <span class="n">template</span> <span class="o">%</span> <span class="p">{</span><span class="s">&#39;stmt&#39;</span><span class="p">:</span> <span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;setup&#39;</span><span class="p">:</span> <span class="s">&#39;_setup()&#39;</span><span class="p">}</span>
</span><span class='line'>                <span class="n">ns</span><span class="p">[</span><span class="s">&#39;_setup&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">setup</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;setup is neither a string nor callable&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">src</span> <span class="o">=</span> <span class="n">src</span> <span class="c"># Save for traceback display</span>
</span><span class='line'>            <span class="n">code</span> <span class="o">=</span> <span class="nb">compile</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">dummy_src_name</span><span class="p">,</span> <span class="s">&quot;exec&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">exec</span> <span class="n">code</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">(),</span> <span class="n">ns</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">inner</span> <span class="o">=</span> <span class="n">ns</span><span class="p">[</span><span class="s">&quot;inner&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;__call__&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">src</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="nb">basestring</span><span class="p">):</span>
</span><span class='line'>                <span class="n">_setup</span> <span class="o">=</span> <span class="n">setup</span>
</span><span class='line'>                <span class="k">def</span> <span class="nf">setup</span><span class="p">():</span>
</span><span class='line'>                    <span class="k">exec</span> <span class="n">_setup</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">(),</span> <span class="n">ns</span>
</span><span class='line'>            <span class="k">elif</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="s">&#39;__call__&#39;</span><span class="p">):</span>
</span><span class='line'>                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;setup is neither a string nor callable&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">inner</span> <span class="o">=</span> <span class="n">_template_func</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="n">stmt</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;stmt is neither a string nor callable&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">timeit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">default_number</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Time &#39;number&#39; executions of the main statement.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        To be precise, this executes the setup statement once, and</span>
</span><span class='line'><span class="sd">        then returns the time it takes to execute the main statement</span>
</span><span class='line'><span class="sd">        a number of times, as a float measured in seconds.  The</span>
</span><span class='line'><span class="sd">        argument is the number of times through the loop, defaulting</span>
</span><span class='line'><span class="sd">        to one million.  The main statement, the setup statement and</span>
</span><span class='line'><span class="sd">        the timer function to be used are passed to the constructor.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">itertools</span><span class="p">:</span>
</span><span class='line'>            <span class="n">it</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">it</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>        <span class="n">gcold</span> <span class="o">=</span> <span class="n">gc</span><span class="o">.</span><span class="n">isenabled</span><span class="p">()</span>
</span><span class='line'>        <span class="n">gc</span><span class="o">.</span><span class="n">disable</span><span class="p">()</span>
</span><span class='line'>        <span class="n">timing</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">inner</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">timer</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">gcold</span><span class="p">:</span>
</span><span class='line'>            <span class="n">gc</span><span class="o">.</span><span class="n">enable</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">timing</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">timeit</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="n">timer</span><span class="o">=</span><span class="n">default_timer</span><span class="p">,</span>
</span><span class='line'>           <span class="n">number</span><span class="o">=</span><span class="n">default_number</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Convenience function to create Timer object and call timeit method.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Timer</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="n">setup</span><span class="p">,</span> <span class="n">timer</span><span class="p">)</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s trace the part that&rsquo;s giving us the long execution string.  We call the module-level function <code>timeit.timeit</code>, which creates a Timer object and returns the result of calling its <code>timeit</code> method.  No surprise that we got identical results between our method #1 and method #3 above.</p>

<p>The <code>Timer</code> object checks to see if you&rsquo;ve passed it strings or callables as its <code>stmt</code> and <code>setup</code> parameters.  In our case both are strings.  The <code>init</code> method splices the strings into the source code here:</p>

<figure class='code'><figcaption><span>timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">src</span> <span class="o">=</span> <span class="n">template</span> <span class="o">%</span> <span class="p">{</span><span class="s">&#39;stmt&#39;</span><span class="p">:</span> <span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;setup&#39;</span><span class="p">:</span> <span class="n">setup</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can isolate this in the REPL if we want to be extra-sure of how it works:</p>

<figure class='code'><figcaption><span>timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">template</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">... def inner(_it, _timer):</span>
</span><span class='line'><span class="s">...     </span><span class="si">%(setup)s</span><span class="s"></span>
</span><span class='line'><span class="s">...     _t0 = _timer()</span>
</span><span class='line'><span class="s">...     for _i in _it:</span>
</span><span class='line'><span class="s">...         </span><span class="si">%(stmt)s</span><span class="s"></span>
</span><span class='line'><span class="s">...     _t1 = _timer()</span>
</span><span class='line'><span class="s">...     return _t1 - _t0</span>
</span><span class='line'><span class="s">... &quot;&quot;&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">stmt</span> <span class="o">=</span> <span class="s">&quot;pass&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">setup</span> <span class="o">=</span> <span class="s">&quot;print &#39;here we go&#39;&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">template</span> <span class="o">%</span> <span class="p">{</span><span class="s">&#39;stmt&#39;</span><span class="p">:</span> <span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;setup&#39;</span><span class="p">:</span> <span class="n">setup</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">_it</span><span class="p">,</span> <span class="n">_timer</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;here we go&#39;</span>
</span><span class='line'>    <span class="n">_t0</span> <span class="o">=</span> <span class="n">_timer</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_i</span> <span class="ow">in</span> <span class="n">_it</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="n">_t1</span> <span class="o">=</span> <span class="n">_timer</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_t1</span> <span class="o">-</span> <span class="n">_t0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Got it &ndash; simple, legal python code is generated. So where is our regular expression getting screwed up?  Let&rsquo;s take a look at the code generated in our actual test by inserting a print statement into the <code>timeit</code> module.  (First we&rsquo;ll copy the module over to our current working directory, to avoid modifying our actual standard library.)</p>

<figure class='code'><figcaption><span>timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">src</span> <span class="o">=</span> <span class="n">template</span> <span class="o">%</span> <span class="p">{</span><span class="s">&#39;stmt&#39;</span><span class="p">:</span> <span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;setup&#39;</span><span class="p">:</span> <span class="n">setup</span><span class="p">}</span>
</span><span class='line'><span class="k">print</span> <span class="n">src</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now calling <code>test_with_timeit.py</code> again, it prints:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">_it</span><span class="p">,</span> <span class="n">_timer</span><span class="p">):</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">re</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">string</span><span class="p">;</span>
</span><span class='line'>    <span class="n">double</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">short_test</span> <span class="o">=</span> <span class="s">&quot;hee&quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="p">;</span>
</span><span class='line'>    <span class="n">long_test</span> <span class="o">=</span> <span class="s">&quot;hee&quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="o">*</span><span class="mi">200</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_t0</span> <span class="o">=</span> <span class="n">_timer</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_i</span> <span class="ow">in</span> <span class="n">_it</span><span class="p">:</span>
</span><span class='line'>        <span class="n">double</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">short_test</span><span class="p">)</span>
</span><span class='line'>    <span class="n">_t1</span> <span class="o">=</span> <span class="n">_timer</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_t1</span> <span class="o">-</span> <span class="n">_t0</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks mostly reasonable &hellip; but hey, wait, what happened to the regular expression?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">double</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])()&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s not right!  Changing <code>print src</code> to <code>print repr(src)</code> gives us a better idea what&rsquo;s up &ndash; the relevant line is now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">double</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])(\x01)&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And looking back at the <code>SETUP</code> string &hellip; uh-oh, this isn&rsquo;t a raw string, and it contains an escape character (<code>(\1)</code>).  We can tell we&rsquo;re in trouble immediately in the REPL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&quot;</span><span class="se">\1</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">repr</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\1</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;&#39;</span><span class="se">\\</span><span class="s">x01&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why does this happen?  We can consult the <a href="http://docs.python.org/2/reference/lexical_analysis.html#string-literals">docs on string literals</a> to find out.  Unless you&rsquo;re working with a raw string (one prefixed with <code>r</code> or <code>R</code>), escape characters are interpreted the same way they are in C.  Our text, a backslash followed by a number, matches the pattern for an octal digit: a backslash followed by 1-3 integers. <code>\ooo</code> indicates a character with the octal value <code>ooo</code>.  And that&rsquo;s exactly what we&rsquo;ve done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\1</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;</span><span class="se">\x01</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>\x01</code> is a legal (though unprintable) character, and <strong>it doesn&rsquo;t appear in our long string to test the regular expression.</strong> So <em>of course</em> the longer one took a longer time &ndash; it had to traverse the entire string looking for <code>\x01</code>, which it never found.</p>

<p>The fix is quite easy &ndash; one character, in fact.  Make the <code>SETUP</code> string raw:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">SETUP</span> <span class="o">=</span> <span class="s">r&quot;&quot;&quot;import re;</span>
</span><span class='line'><span class="s">import string;</span>
</span><span class='line'><span class="s">double = re.compile(r&quot;([a-z])(\1)&quot;);</span>
</span><span class='line'><span class="s">short_test = &quot;hee&quot; + string.lowercase;</span>
</span><span class='line'><span class="s">long_test = &quot;hee&quot; + string.lowercase*200</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and the problem is solved.  So we can pop a bunch of frame off our problem stack and go investigate the string copying, which is in fact the issue.</p>

<pre>
 ---------------------------
| reg exp? or string copy?  |
 ---------------------------
| function is so slow, why? |
 ---------------------------
|   find a faster solution  |
 ---------------------------
|  solve wordplay problem   | (oldest)
 ---------------------------
</pre>


<h2>Lessons learned</h2>

<p>Interesting bugs are a ton of fun!  Now for a bit of introspection: what could have gone better?</p>

<ul>
<li><p>Most obviously, I could have spent less time on the regular-expression branch of why the function was slow, especially as the stack grew.  Whether I should have done this depends on your perspective: at Hacker School, I&rsquo;m almost 100% learning motivated and about 0% get-it-done motivated, so my time to solve the bug is virtually unbounded.</p></li>
<li><p>I was slightly overconfident about understanding how the <code>timeit</code> code splicing happened.  The code looked so simple that I didn&rsquo;t bother to check my understanding at first.</p></li>
<li><p>Passing <code>timeit.timeit</code> strings is an unwieldy way of doing timing.  I should have been using either the callable option, or just timing with <code>time python test_file.py</code> from the command line.  Both of these would have been easier to work with and would have sidestepped the bug.</p></li>
<li><p>My mental model of regular expressions was largely correct.  That&rsquo;s satisfying.</p></li>
<li><p>Strings!  Ouch.  This may not seem like much of a lesson, but it&rsquo;s useful to add to my mental list of Places That Bugs Lurk.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
