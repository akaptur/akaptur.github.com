<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Of Interest]]></title>
  <link href="http://akaptur.github.com/atom.xml" rel="self"/>
  <link href="http://akaptur.github.com/"/>
  <updated>2013-11-01T21:47:36-04:00</updated>
  <id>http://akaptur.github.com/</id>
  <author>
    <name><![CDATA[akaptur]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Puzzle Solutions]]></title>
    <link href="http://akaptur.github.com/blog/2013/10/31/python-puzzle-solutions/"/>
    <updated>2013-10-31T10:47:00-04:00</updated>
    <id>http://akaptur.github.com/blog/2013/10/31/python-puzzle-solutions</id>
    <content type="html"><![CDATA[<p>I really enjoyed seeing all the clever solutions to the <a href="http://akaptur.github.io/blog/2013/10/29/a-python-puzzle/">python puzzle I posted</a>.  You&rsquo;re all very creative!  Here&rsquo;s a discussion of the solutions I&rsquo;ve seen, plus some clarifications.  All spoilers are below the fold.</p>

<p>First, clarifications.  (These weren&rsquo;t always clear in the problem statement, particularly if you got the problem off of twitter, so award yourself full marks as desired.)</p>

<h4>Order doesn&rsquo;t matter</h4>

<p>&ldquo;Order doesn&rsquo;t matter&rdquo; means that the three-line version <em>always</em> returns <code>False</code>, and the semicolon version <em>always</em> returns <code>True</code>.</p>

<h4>You control only the contents of the lines</h4>

<p>Several people, including <a href="https://twitter.com/pepijndevos">Pepijn De Vos</a>, <a href="https://twitter.com/wolever">David Wolever</a>, and <a href="https://twitter.com/diarmuidbourke">diarmuidbourke</a> suggested something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;&quot;&quot;a; b; c&quot;&quot;&quot;</span> <span class="o">==</span> <span class="s">&#39;a; b; c&#39;</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;&quot;&quot;a</span>
</span><span class='line'><span class="s">... b</span>
</span><span class='line'><span class="s">... c&quot;&quot;&quot;</span> <span class="o">==</span> <span class="s">&#39;a; b; c&#39;</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m being pedantic here, but I rule this cheating, since (a) each line has to be a valid python expression or statement, and a multi-line string literal is only one expression, and (b) the string <code>"""a; b; c"""</code> is not the same as the string <code>"""a\nb\nc"""</code>.</p>

<p>Solutions appear below the fold.</p>

<!-- more -->


<h3>Solutions!</h3>

<h4>Jessica McKellar</h4>

<p><a href="https://twitter.com/jessicamckellar">Jessica</a> suggests the following solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">global</span> <span class="n">a</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot;a&quot;</span> <span class="k">if</span> <span class="s">&quot;a&quot;</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">global</span> <span class="n">a</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot;a&quot;</span> <span class="k">if</span> <span class="s">&quot;a&quot;</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span><span class="p">;</span> <span class="k">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">my_function</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">global</span> <span class="n">a</span>
</span><span class='line'><span class="o">...</span>     <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot;a&quot;</span> <span class="k">if</span> <span class="s">&quot;a&quot;</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">my_function</span><span class="p">()</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>
However, Jessica&rsquo;s solution <del>fails the &ldquo;order doesn&rsquo;t matter&rdquo; test, and it</del> is stateful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">global</span> <span class="n">a</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot;a&quot;</span> <span class="k">if</span> <span class="s">&quot;a&quot;</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span><span class="p">;</span> <span class="k">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">global</span> <span class="n">a</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot;a&quot;</span> <span class="k">if</span> <span class="s">&quot;a&quot;</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span><span class="p">;</span> <span class="k">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Edit: As Jessica points out, I&rsquo;m wrong here: her solution does pass the order test.  She also notes that the restriction against state wasn&rsquo;t present in the blog post (and she didn&rsquo;t see the <a href="https://twitter.com/akaptur/status/395252265117687808">original tweet</a>).  Full credit to Jessica, then!</em></p>

<h4>Javier Novoa Cata√±o</h4>

<p><a href="https://twitter.com/JaviStitch">Javier</a> suggests a solution for Python 2 that fails the order test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="bp">True</span> <span class="o">=</span> <span class="ow">not</span> <span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="bp">True</span> <span class="o">=</span> <span class="ow">not</span> <span class="bp">True</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="bp">True</span><span class="p">;</span> <span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, this depends on order and is stateful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="bp">True</span> <span class="o">=</span> <span class="ow">not</span> <span class="bp">True</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="bp">True</span><span class="p">;</span> <span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="bp">True</span> <span class="o">=</span> <span class="ow">not</span> <span class="bp">True</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="bp">True</span><span class="p">;</span> <span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Alex Gaynor</h4>

<p><a href="https://twitter.com/alex_gaynor">Alex</a> suggests using <code>sys._getframe(0)</code>.  I might quibble that <code>sys._getframe</code> constitutes introspection, but Alex is on to something.  He notices that each line of code executed in the interpreter gets its own frame.  (<em>foreshadowing</em>)</p>

<p>Alex gets full credit because I just discovered that the behavior underlying the original puzzle works in CPython, but is different in PyPy.  Sorry, Alex!</p>

<p><em>Edit: Never mind &ndash; there is a simpler solution in PyPy. See below.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">b</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">my_function</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>  <span class="n">a</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>  <span class="n">b</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>  <span class="k">return</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">my_function</span><span class="p">()</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Anton Dubrau</h4>

<p>For sheer inventiveness and creativity I have to hand it to <a href="https://twitter.com/ant6n">Anton</a>, working in the iPython REPL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">145</span><span class="p">]:</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span><span class="n">x</span><span class="o">=</span><span class="n">n</span> <span class="ow">or</span> <span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">x</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;&quot;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="p">(</span><span class="s">&quot;False&quot;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="s">&quot;True&quot;</span><span class="p">))</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">142</span><span class="p">]:</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span><span class="n">x</span><span class="o">=</span><span class="n">n</span> <span class="ow">or</span> <span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">143</span><span class="p">]:</span> <span class="n">x</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">144</span><span class="p">]:</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;&quot;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="p">(</span><span class="s">&quot;False&quot;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="s">&quot;True&quot;</span><span class="p">))</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>He&rsquo;s exploiting the fact that when executed on a single line, all three lines are considered part of the <code>for</code> loop. When the lines are broken up, only the <code>x=n or x-1</code> part belongs to the loop.  (This pretty much works in the standard CPython REPL too, but you have to throw in an extra line break.)</p>

<h4>Alexey Bezhan</h4>

<p><a href="https://twitter.com/allait">Alexey</a> was the only person outside of Hacker School to hit on my solution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">257</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">257</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">257</span><span class="p">;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">257</span><span class="p">;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nicely done, Alexey!</p>

<p>(For the pedantic among us, like me: this was the version I had in mind when I described my solution as 14 non-whitespace characters. Of course, to make the function version work too, we have to add <code>print</code> to the last line, taking us up to 19.  I&rsquo;ve edited the original post.)</p>

<p>So what&rsquo;s going on here, and why is this interesting?</p>

<h2>Analyzing this solution</h2>

<p>I described Alex Gaynor&rsquo;s solution as foreshadowing earlier.  Alex appears to have started from a good question: what&rsquo;s different about executing three lines of code versus executing three statements as one line of code?</p>

<p>One thing to note is that each time you get an interpreter prompt back (<code>&gt;&gt;&gt;</code>), your python has compiled and executed some code.  Every prompt corresponds to at least one code object.</p>

<p>How can we use the difference in code objects to generate this behavior? One way is to use constants: in CPython, two instances of the same number (larger than 256) are different objects. This explains why <code>a is b</code> returns <code>False</code> in the REPL (in the extended version, without semicolons).  In the semicolon version, all three statements are part of one code object.  We&rsquo;re giving the CPython compiler a chance to optimize.  It notices that we have two constants with the same value, and only hangs on to one copy.</p>

<p>Let&rsquo;s take a look.  It&rsquo;s easy to get a handle on the code object corresponding to a function &ndash; use <code>f.func_code</code> in Python 2, and <code>f.__code__</code> in Python 3.  Getting a handle on a code object corresponding to a line in the REPL is a little bit trickier, but we can do it if we compile them by hand.  In Python 2.x:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_a</span> <span class="o">=</span> <span class="nb">compile</span><span class="p">(</span><span class="s">&quot;a = 257&quot;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&quot;exec&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_a</span><span class="o">.</span><span class="n">co_consts</span>
</span><span class='line'><span class="p">(</span><span class="mi">257</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_b</span> <span class="o">=</span> <span class="nb">compile</span><span class="p">(</span><span class="s">&quot;b = 257&quot;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&quot;exec&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_b</span><span class="o">.</span><span class="n">co_consts</span>
</span><span class='line'><span class="p">(</span><span class="mi">257</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_both</span> <span class="o">=</span> <span class="nb">compile</span><span class="p">(</span><span class="s">&quot;a = 257; b = 257&quot;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&quot;exec&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code_obj_both</span><span class="o">.</span><span class="n">co_consts</span>
</span><span class='line'><span class="p">(</span><span class="mi">257</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="n">a</span> <span class="o">=</span> <span class="mi">257</span>
</span><span class='line'><span class="o">...</span>     <span class="n">b</span> <span class="o">=</span> <span class="mi">257</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">func_code</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">f</span> <span class="n">at</span> <span class="mh">0x107133cb0</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_consts</span>
</span><span class='line'><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="mi">257</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler&rsquo;s being a little smart here, and we only get one occurence of the constant <code>257</code> per code object.  When we execute the assignment statements on two different lines, we get two different code objects with two different instances of the integer <code>257</code>. This explains why <code>is</code>, which is comparing object identity, sees one as the same and the others as different.</p>

<p>This came up originally at Hacker School when <a href="https://github.com/phsteve">Steve Katz</a> stumbled across that thing with small integers and <code>is</code> versus <code>==</code> in python.  (If you&rsquo;re not familiar with it, you can read <a href="http://stackoverflow.com/questions/306313/python-is-operator-behaves-unexpectedly-with-integers">many questions on Stack Overflow about it</a>.  As a general rule, don&rsquo;t use <code>is</code> for integer comparisons.)  Steve went on to notice that the behavior changes when run from a script rather than in the REPL.</p>

<p>I didn&rsquo;t realize when posing this problem that it was an implementation detail of CPython, and <a href="http://pypy.readthedocs.org/en/latest/cpython_differences.html#object-identity-of-primitive-values-is-and-id">PyPy behaves differently</a> (and arguably correctly). That&rsquo;s why Alex Gaynor had to hook into the frame object.</p>

<h3><em>Edit: Late submissions</em></h3>

<p>More cleverness in my twitter feed!</p>

<p><a href="https://twitter.com/nedbat">Ned Batchelder</a> suggests using <code>-9</code> instead of <code>257</code> to shave off a few characters.</p>

<h4>Zev Benjamin</h4>

<p><a href="https://github.com/zbenjamin">Zev</a> came up with my favorite so far, in 14 characters <em>including</em> the print.  <del>He exploits the intricacies of floating-point arithmetic</del></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">x</span> <span class="ow">is</span> <span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="o">.</span><span class="mi">1</span><span class="p">;</span> <span class="k">print</span> <span class="n">x</span> <span class="ow">is</span> <span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;ve never dug around with floating-point math, do yourself a favor: it&rsquo;s really interesting stuff.  The Julia language suggests some good <a href="http://docs.julialang.org/en/latest/manual/integers-and-floating-point-numbers/#background-and-references">background reading</a>.</p>

<p><em>Edit 2: Zev emails that floating-point precision isn&rsquo;t involved here. Instead, he&rsquo;s exploiting the fact that floating-point numbers &ndash; even those that can be precisely represented &ndash; are not interned.  We&rsquo;d get the same results using <code>1.</code> instead of <code>.1</code>. This suggests a broader point: many solutions here could have used <code>a = thing; a is thing</code>, omitting LINE_B.</em></p>

<h4>Nick Olson-Harris</h4>

<p><a href="https://twitter.com/TheNyktos">Nick</a> has a fix to the PyPy integer handling: use a string instead of an int.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;f&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="s">&quot;f&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;f&quot;</span><span class="p">;</span> <span class="n">b</span> <span class="o">=</span> <span class="s">&quot;f&quot;</span><span class="p">;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Thanks, everyone!</h3>

<p>This was fun!  If I missed your solution and you want it to be included, <a href="https://twitter.com/akaptur">ping me on twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Python puzzle]]></title>
    <link href="http://akaptur.github.com/blog/2013/10/29/a-python-puzzle/"/>
    <updated>2013-10-29T19:40:00-04:00</updated>
    <id>http://akaptur.github.com/blog/2013/10/29/a-python-puzzle</id>
    <content type="html"><![CDATA[<p>A couple of Hacker Schoolers were discussing an interesting corner of python today.  We discovered a nice bit of trivia: there exist three lines of python code that display the following behavior:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">LINE_A</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">LINE_B</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">LINE_C</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">LINE_A</span><span class="p">;</span> <span class="n">LINE_B</span><span class="p">;</span> <span class="n">LINE_C</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">my_function</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="n">LINE_A</span>
</span><span class='line'><span class="o">...</span>     <span class="n">LINE_B</span>
</span><span class='line'><span class="o">...</span>     <span class="n">LINE_C</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">my_function</span><span class="p">()</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>What are the lines?</p>

<p>Some ground rules:</p>

<ul>
<li>Introspection of any kind is cheating (e.g. noting the line number).</li>
<li>No dunder (<code>__foo__</code>) methods allowed.</li>
<li>Each line is a valid python expression.</li>
<li>You can&rsquo;t rely on order: while the lines will always execute A &ndash;> B &ndash;> C, a complete solution behaves identically if e.g. the semicolon version happens before the separate-line version.</li>
<li>No cheating with the function: e.g. you can&rsquo;t add a <code>return</code> unless you add it everywhere.</li>
<li><em>Edit: And nothing stateful.</em></li>
</ul>


<p>For bonus points, code golf!  My solution to this is <del>14</del> 19 characters long, not counting whitespace.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bug hunting]]></title>
    <link href="http://akaptur.github.com/blog/2013/10/15/bug-hunting/"/>
    <updated>2013-10-15T08:01:00-04:00</updated>
    <id>http://akaptur.github.com/blog/2013/10/15/bug-hunting</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve managed to encounter three different bugs with the same obscure source in the last week.  I think Hacker School might be cursed.  Here&rsquo;s a blog post attempting to rid us of the curse.</p>

<h3>Bug 1: Flask app on Heroku can&rsquo;t find images and stylesheets</h3>

<p>The first bug was a Flask app deployed to Heroku.  It worked fine locally, but when deployed, none of the images or stylesheets rendered.</p>

<h3>Bug 2: A project fails to build</h3>

<p>A Hacker Schooler cloned into a project and tried to build it with <code>python setup.py install</code>.  The build failed with the error <code>Supposed package directory '[project]' exists but is not a directory.</code></p>

<h3>Bug 3: Heroku-deployed app crashes</h3>

<p>I deployed a new feature to the Hacker School site (which is a Rails app), and crashed the application.  Again, everything worked fine locally on my machine and my colleague&rsquo;s machines.</p>

<p>The solution and explanations are below the fold.  If you&rsquo;d like to try to guess, you can ask me debugging questions on twitter <a href="https://twitter.com/akaptur">(@akaptur)</a>, and I&rsquo;ll respond within 24 hours until Friday, October 18th, 2013. If you don&rsquo;t like guessing, or your own bugs are plenty for you, you can click through now.</p>

<!-- more -->


<h2>PSA: Mac OS X is a case-insensitive file system, y&#8217;all</h2>

<p>Remarkably enough, all these bugs were caused by converting from a case-insensitve file system, like Mac OS X, to a case-sensitive one, like Ubuntu.</p>

<h3>The flask app</h3>

<p>In the flask app, the author had named his static folder <code>Static</code>.  Flask looks for static assets in <code>static</code> by default. No problem on his MacBook &ndash; but a big problem on Heroku.</p>

<h3>The build</h3>

<p>This was my personal favorite, and a new bit of trivia: when can <code>git clone</code> result in a local repo state that&rsquo;s different from the remote repo?  If the project was developed on a case-sensitive file system, and there exists both a <code>project</code> script and a <code>Project</code> folder, git will first clone the script and then <strong>silently</strong> fail to write the identically-named folder or the files that belong in it.  Interestingly, all the blobs are still there in your local repo: <code>git status</code> will show all the files in <code>Project/</code> and the <code>Project/</code> folder itself as deleted.  Simple demo <a href="https://github.com/paulvstheworld/case-sensitive-test">here</a>. (Thanks, Paul!)</p>

<h3>The Hacker School deploy</h3>

<p>Same story as #1 with different details: my colleague and I had done <code>require 'JSON'</code> instead of <code>require 'json'</code>, which worked fine locally and brought the entire app down on heroku.</p>

<p>I&rsquo;ve finally learned to look for this bug when something mysterious happens between my machine and some other machine &ndash; which I&rsquo;m sure means I&rsquo;ll never encounter it again!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Bytecode: Fun with dis]]></title>
    <link href="http://akaptur.github.com/blog/2013/08/14/python-bytecode-fun-with-dis/"/>
    <updated>2013-08-14T16:04:00-04:00</updated>
    <id>http://akaptur.github.com/blog/2013/08/14/python-bytecode-fun-with-dis</id>
    <content type="html"><![CDATA[<p>Last week at <a href="https://www.hackerschool.com/">Hacker School</a> I did a quick presentation on python bytecode and the <code>dis</code> module.  The disassembler is a very powerful tool with a gentle learning curve &ndash; that is, you can get a fair amount out of it without really knowing much about what&rsquo;s going on.  This post is a quick introduction to how and why you should use it.</p>

<h3>What&rsquo;s bytecode?</h3>

<p>Bytecode is the internal representation of a python program in the compiler.  Here, we&rsquo;ll be looking at bytecode from cpython, the default compiler.  If you don&rsquo;t know what compiler you&rsquo;re using, it&rsquo;s probably cpython.</p>

<h3>How do I get bytecode?</h3>

<p>You already have it!  Bytecode is what&rsquo;s contained in those .pyc files you see when you import a module.  It&rsquo;s also created on the fly by running any python code.</p>

<h3>Disassembling</h3>

<p>Ok, so you have some bytecode, and you want to understand it.  Let&rsquo;s look at it without using the <code>dis</code> module first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="o">...</span>     <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span> <span class="nb">object</span> <span class="n">foo</span> <span class="n">at</span> <span class="mh">0x106353530</span><span class="p">,</span> <span class="nb">file</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_code</span>
</span><span class='line'><span class="s">&#39;d</span><span class="se">\x01\x00</span><span class="s">}</span><span class="se">\x00\x00</span><span class="s">d</span><span class="se">\x02\x00</span><span class="s">}</span><span class="se">\x01\x00</span><span class="s">|</span><span class="se">\x00\x00</span><span class="s">|</span><span class="se">\x01\x00\x17</span><span class="s">S&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">foo</span><span class="o">.</span><span class="n">func_code</span><span class="o">.</span><span class="n">co_code</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">83</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm, that was &hellip; not very enlightening.  We can see that we have a bunch of bytes (some printable, others not), but we have no idea what they mean.</p>

<p>Let&rsquo;s run it through <code>dis.dis</code> instead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">dis</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">2</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">STORE_FAST</span>               <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">3</span>           <span class="mi">6</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">9</span> <span class="n">STORE_FAST</span>               <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">4</span>          <span class="mi">12</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">15</span> <span class="n">LOAD_FAST</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">18</span> <span class="n">BINARY_ADD</span>
</span><span class='line'>             <span class="mi">19</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this starts to make some sense.  <code>dis</code> takes each byte, finds the opcode that corresponds to it in <code>opcodes.py</code>, and prints it as a nice, readable constant.  If we look at <code>opcodes.py</code> we see that <code>LOAD_CONST</code> is 100, <code>STORE_FAST</code> is 125, etc. <code>dis</code> also shows the line numbers on the left and the values or names on the right.  So without ever seeing something like before, we have an idea what&rsquo;s going on: we first load a constant, 2, then somehow store it as <code>a</code>.  Then we repeat this with 3 and <code>b</code>.  We load <code>a</code> and <code>b</code> back up, do <code>BINARY_ADD</code>, which presumably adds the numbers, and then do <code>RETURN_VALUE</code>.</p>

<p>Examining the bytecode can sometimes increase your understanding of python code.  Here is one example.</p>

<h3>elif</h3>

<p><code>elif</code> is identical in bytecode to <code>else ... if</code>.  Take a look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">flat</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="s">&quot;Fizz&quot;</span>
</span><span class='line'><span class="o">...</span>     <span class="k">elif</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="s">&quot;Buzz&quot;</span>
</span><span class='line'><span class="o">...</span>     <span class="k">else</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="n">num</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">nested</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span> <span class="s">&quot;Fizz&quot;</span>
</span><span class='line'><span class="o">...</span>     <span class="k">else</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>             <span class="k">print</span> <span class="s">&quot;Buzz&quot;</span>
</span><span class='line'><span class="o">...</span>         <span class="k">else</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>             <span class="k">print</span> <span class="n">num</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve read <a href="http://www.python.org/dev/peps/pep-0008/">PEP 8</a> so we know that <em>flat is better than nested</em> for style and readability.  But is there a performance difference?  Not at all &ndash; in fact, these two functions have identical bytecode.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="mi">2</span>           <span class="mi">0</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">6</span> <span class="n">BINARY_MODULO</span>
</span><span class='line'>              <span class="mi">7</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">10</span> <span class="n">COMPARE_OP</span>               <span class="mi">2</span> <span class="p">(</span><span class="o">==</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">13</span> <span class="n">POP_JUMP_IF_FALSE</span>       <span class="mi">24</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">3</span>          <span class="mi">16</span> <span class="n">LOAD_CONST</span>               <span class="mi">3</span> <span class="p">(</span><span class="s">&#39;Fizz&#39;</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">19</span> <span class="n">PRINT_ITEM</span>
</span><span class='line'>             <span class="mi">20</span> <span class="n">PRINT_NEWLINE</span>
</span><span class='line'>             <span class="mi">21</span> <span class="n">JUMP_FORWARD</span>            <span class="mi">29</span> <span class="p">(</span><span class="n">to</span> <span class="mi">53</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">4</span>     <span class="o">&gt;&gt;</span>   <span class="mi">24</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">27</span> <span class="n">LOAD_CONST</span>               <span class="mi">4</span> <span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">30</span> <span class="n">BINARY_MODULO</span>
</span><span class='line'>             <span class="mi">31</span> <span class="n">LOAD_CONST</span>               <span class="mi">2</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">34</span> <span class="n">COMPARE_OP</span>               <span class="mi">2</span> <span class="p">(</span><span class="o">==</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">37</span> <span class="n">POP_JUMP_IF_FALSE</span>       <span class="mi">48</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">5</span>          <span class="mi">40</span> <span class="n">LOAD_CONST</span>               <span class="mi">5</span> <span class="p">(</span><span class="s">&#39;Buzz&#39;</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">43</span> <span class="n">PRINT_ITEM</span>
</span><span class='line'>             <span class="mi">44</span> <span class="n">PRINT_NEWLINE</span>
</span><span class='line'>             <span class="mi">45</span> <span class="n">JUMP_FORWARD</span>             <span class="mi">5</span> <span class="p">(</span><span class="n">to</span> <span class="mi">53</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">7</span>     <span class="o">&gt;&gt;</span>   <span class="mi">48</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">51</span> <span class="n">PRINT_ITEM</span>
</span><span class='line'>             <span class="mi">52</span> <span class="n">PRINT_NEWLINE</span>
</span><span class='line'>        <span class="o">&gt;&gt;</span>   <span class="mi">53</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">56</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>That makes sense &ndash; <code>else</code> just means &ldquo;start executing here if the <code>if</code> was false&rdquo; &ndash; there&rsquo;s no more computation to do.  <code>elif</code> is just <a href="https://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a>.</p>

<h3>Further reading:</h3>

<p>This just scratches the surface of what&rsquo;s interesting about python bytecode.</p>

<p>If you enjoyed this, you might enjoy diving into Yaniv Aknin&rsquo;s <a href="http://tech.blog.aknin.name/category/my-projects/pythons-innards/">series</a> on python internals.  If you&rsquo;re excited about bytecode, you should contribute to Ned Batchelder&rsquo;s <a href="https://github.com/nedbat/byterun">byterun</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Systematic Debugging]]></title>
    <link href="http://akaptur.github.com/blog/2013/07/24/systematic-debugging/"/>
    <updated>2013-07-24T13:54:00-04:00</updated>
    <id>http://akaptur.github.com/blog/2013/07/24/systematic-debugging</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve asked many of our residents at Hacker School what qualities all great programmers share.  There&rsquo;s very little agreement &ndash; clearly, there are a multitude of ways to be a great programmer, and you can think of a counter-example for almost every quality you can name.  One of the rare non-controversial statements came first from Jessica McKellar, who identified systematic debugging as a key skill.</p>

<p>What does systematic debugging look like?  At this point, I&rsquo;m focused on two aspects: asking a clear question, and keeping track of my mental &ldquo;stack&rdquo;.  I had a particularly fun and interesting bug yesterday that I think illustrates this nicely.</p>

<p>The problem at hand was a brainteaser from Jessica:</p>

<blockquote><p>Using the official SOWPODS Scrabble dictionary, what letters, if any, never appear doubled? (By that I mean &mdash; &ldquo;AA&rdquo; does appear doubled because it is in &ldquo;AARDVARK&rdquo;, &ldquo;BB&rdquo; does appear doubled because it is in &ldquo;BUBBLE&rdquo; &mdash; are there any letters that never appear doubled in a word?)</p></blockquote>

<p>I came up with a solution, but it was kind of slow, so I was trying to find a faster one.  Also, my original solution used a regular expression to match a doubled letter in a word, but it would only find the first pair (e.g. in BOOKKEEPER only the &lsquo;OO&rsquo; would be caught).</p>

<p>I decided to try taking the dictionary as a single string, rather than a list of words, and consuming it one letter-pair at a time, as follows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">find_all_doubles_as_word_mash</span><span class="p">():</span>
</span><span class='line'>    <span class="n">words</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;sowpods.txt&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>    <span class="n">letters</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">uppercase</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dub_re</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([A-Z])(\1)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">dubbed</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">dub_re</span><span class="p">,</span> <span class="n">words</span><span class="p">[</span><span class="n">end</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">dubbed</span> <span class="ow">and</span> <span class="n">letters</span><span class="p">:</span>
</span><span class='line'>        <span class="n">letters</span> <span class="o">-=</span> <span class="nb">set</span><span class="p">(</span><span class="n">dubbed</span><span class="o">.</span><span class="n">group</span><span class="p">())</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">+=</span> <span class="n">dubbed</span><span class="o">.</span><span class="n">end</span><span class="p">()</span>
</span><span class='line'>        <span class="n">dubbed</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">dub_re</span><span class="p">,</span> <span class="n">words</span><span class="p">[</span><span class="n">end</span><span class="p">:])</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">end</span><span class="p">,</span> <span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">letters</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re thinking, &ldquo;Hmm, that looks like it might be slow,&rdquo; congratulations!  It is indeed quite slow.  I had two guesses for why it was slow. (It wasn&rsquo;t the print statement.)  First, maybe I was copying the string over and over, and that was slowing down the function.  Second, maybe I misunderstodd the regular expression &ndash; for example, maybe it was taking a longer time to operate on a longer string. I decided to investigate the second possibility first, since regular expressions were more of a mystery to me.</p>

<p>At this point in the problem solving, my mental stack looks something like this:</p>

<pre>
 ---------------------------
| regex taking longer on a  | (newest)
| longer-length string?     |
 ---------------------------
| reg exp? or string copy?  |
 ---------------------------
| function is so slow, why? |
 ---------------------------
|   find a faster solution  |
 ---------------------------
|  solve wordplay problem   | (oldest)
 ---------------------------
</pre>


<p>The next step was to test my theory that my regular expression should not take longer on a longer string.  Importantly, the regex had no &ldquo;greedy&rdquo; elements &ndash; it should match and return the first time it encounters two identical characters, regardless of how long the string is after those matching characters.  Here was the experiment I wrote:</p>

<figure class='code'><figcaption><span>test_with_timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">timeit</span>
</span><span class='line'>
</span><span class='line'><span class="n">SETUP</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;import re;</span>
</span><span class='line'><span class="s">import string;</span>
</span><span class='line'><span class="s">double = re.compile(r&quot;([a-z])(</span><span class="se">\1</span><span class="s">)&quot;);</span>
</span><span class='line'><span class="s">short_test = &quot;hee&quot; + string.lowercase;</span>
</span><span class='line'><span class="s">long_test = &quot;hee&quot; + string.lowercase*100</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">N_TIMES</span> <span class="o">=</span> <span class="mi">10000</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span><span class='line'>    <span class="n">short_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(short_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>    <span class="n">long_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(long_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;short:&quot;</span><span class="p">,</span> <span class="n">short_time</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;long:&quot;</span><span class="p">,</span> <span class="n">long_time</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;time ratios:&quot;</span><span class="p">,</span> <span class="n">long_time</span> <span class="o">/</span> <span class="n">short_time</span><span class="p">,</span> <span class="s">&quot;x&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">test</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both cases, I thought, the regex should check &ldquo;he&rdquo;, fail, check &ldquo;ee&rdquo;, succeed, and return.  To my great surprise, the long string test took 70-80x as long to run as the short string test!</p>

<figure class='code'><figcaption><span>test_with_timeit output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>short: 0.0243809223175
</span><span class='line'>long: 1.77788496017
</span><span class='line'>time ratios: 72.9211527366 x
</span></code></pre></td></tr></table></div></figure>


<p>Clearly, I was missing something about regular expressions.  I googled around and learned some details about backreferences, the <code>(\1)</code> in my code (which makes my regular expression not actually <a href="http://en.wikipedia.org/wiki/Regular_expression#Formal_language_theory">&ldquo;regular&rdquo;</a>), but that wasn&rsquo;t very illuminating.  (You can picture &ldquo;something about Finite State Automata&rdquo; being pushed onto and quickly popped back off the stack.)</p>

<p>My next step was to run timing experiments with a variety of regular expressions to see if I could find an element that made the difference.  At this point yesterday, I was still trying to pass strings to <code>timeit</code>, which was getting unwieldy.  (Stay tuned to learn two better ways to do timing.)  I switched to a simpler timing script, just taking <code>time.time()</code> at the start and end of the algorithm.</p>

<figure class='code'><figcaption><span>test_without_timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'>
</span><span class='line'><span class="n">everybody_stand_back</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;double&quot;</span> <span class="p">:</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])(\1)&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&quot;double_var&quot;</span> <span class="p">:</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])\1&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&quot;single&quot;</span> <span class="p">:</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&quot;verbose&quot;</span> <span class="p">:</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">let</span><span class="o">*</span><span class="mi">2</span> <span class="k">for</span> <span class="n">let</span> <span class="ow">in</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="p">)),</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_strings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;short&quot;</span> <span class="p">:</span> <span class="s">&quot;hee&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;long&quot;</span> <span class="p">:</span> <span class="s">&quot;hee&quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">outcomes</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">N_TIMES</span> <span class="o">=</span> <span class="mi">100000</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">regex</span> <span class="ow">in</span> <span class="n">everybody_stand_back</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">string_name</span><span class="p">,</span> <span class="n">test_string</span> <span class="ow">in</span> <span class="n">test_strings</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>            <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N_TIMES</span><span class="p">):</span>
</span><span class='line'>                <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">regex</span><span class="p">,</span> <span class="n">test_string</span><span class="p">)</span>
</span><span class='line'>            <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>            <span class="n">delta</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span>
</span><span class='line'>            <span class="n">outcomes</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="n">string_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">delta</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">outcomes</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">outcomes</span> <span class="o">=</span> <span class="n">test</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">regex</span> <span class="ow">in</span> <span class="n">outcomes</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="n">regex</span><span class="p">[</span><span class="s">&quot;long&quot;</span><span class="p">]</span><span class="o">/</span><span class="n">regex</span><span class="p">[</span><span class="s">&quot;short&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Hopefully the differences would start to become clear, and I could easily extend this to add more variations on the regular expression.</p>

<p>It printed:</p>

<figure class='code'><figcaption><span>test_without_timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">double</span> <span class="mf">0.953508019384</span>
</span><span class='line'><span class="n">single</span> <span class="mf">1.15989795352</span>
</span><span class='line'><span class="n">double_var</span> <span class="mf">1.04188410251</span>
</span><span class='line'><span class="n">verbose</span> <span class="mf">0.861312402506</span>
</span></code></pre></td></tr></table></div></figure>


<p>Uh-oh, wait a minute, I thought this was identical code.  Where did the 70x time difference go?</p>

<p>I couldn&rsquo;t see any obvious errors, so I went back to the <code>timeit</code> code.  Could I reproduce these results while still using the <code>timeit</code> module?</p>

<p>Let&rsquo;s look back at the problem stack.</p>

<pre>
 ---------------------------
| what's up with timeit?    |    
 ---------------------------
| is this code different?   |    
 ---------------------------
| timing programs give      |
| different results, uh-oh  |
 ---------------------------
| regex taking longer on a  |
| longer-length string      |
 ---------------------------
| reg exp? or string copy?  |
 ---------------------------
| function is so slow, why? |
 ---------------------------
|   find a faster solution  |
 ---------------------------
|  solve wordplay problem   | (oldest)
 ---------------------------
</pre>


<p>At this point <a href="https://twitter.com/brandon_rhodes">Brandon Rhodes</a> joined me in pair-debugging, and we made a couple of discoveries.  The most interesting of these was that two different ways of calling timeit generated wildly different results.</p>

<figure class='code'><figcaption><span>test_with_timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">timeit</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">double</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])(\1)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">SETUP</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;import re;</span>
</span><span class='line'><span class="s">import string;</span>
</span><span class='line'><span class="s">double = re.compile(r&quot;([a-z])(</span><span class="se">\1</span><span class="s">)&quot;);</span>
</span><span class='line'><span class="s">short_test = &quot;hee&quot; + string.lowercase;</span>
</span><span class='line'><span class="s">long_test = &quot;hee&quot; + string.lowercase*200</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">N_TIMES</span> <span class="o">=</span> <span class="mi">10000</span>
</span><span class='line'>
</span><span class='line'><span class="n">short_test</span> <span class="o">=</span> <span class="s">&quot;hee&quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span>
</span><span class='line'><span class="n">long_test</span> <span class="o">=</span> <span class="s">&quot;hee&quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="o">*</span><span class="mi">200</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span><span class='line'>    <span class="n">short_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(short_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>    <span class="n">long_time</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(long_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;short:&quot;</span><span class="p">,</span> <span class="n">short_time</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;long:&quot;</span><span class="p">,</span> <span class="n">long_time</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">short_string_test</span><span class="p">():</span>
</span><span class='line'>    <span class="n">double</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">short_test</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">long_string_test</span><span class="p">():</span>
</span><span class='line'>    <span class="n">double</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">long_test</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;method 1: strings&quot;</span>
</span><span class='line'>    <span class="n">test</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;method 2: functions&quot;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">short_string_test</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">long_string_test</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;method 3: build timer explicitly&quot;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(long_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;short:&quot;</span><span class="p">,</span> <span class="n">s</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;double.search(long_test)&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">SETUP</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;long:&quot;</span><span class="p">,</span> <span class="n">t</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="n">N_TIMES</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>test_with_timeit output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">method</span> <span class="mi">1</span><span class="p">:</span> <span class="n">strings</span>
</span><span class='line'><span class="n">short</span><span class="p">:</span> <span class="mf">0.0235750675201</span>
</span><span class='line'><span class="nb">long</span><span class="p">:</span> <span class="mf">3.41090488434</span>
</span><span class='line'><span class="n">method</span> <span class="mi">2</span><span class="p">:</span> <span class="n">functions</span>
</span><span class='line'><span class="mf">0.0102179050446</span>
</span><span class='line'><span class="mf">0.00959801673889</span>
</span><span class='line'><span class="n">method</span> <span class="mi">3</span><span class="p">:</span> <span class="n">build</span> <span class="n">timer</span> <span class="n">explicitly</span>
</span><span class='line'><span class="n">short</span><span class="p">:</span> <span class="mf">0.0263011455536</span>
</span><span class='line'><span class="nb">long</span><span class="p">:</span> <span class="mf">3.42960190773</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we know something is up with passing strings to timeit.</p>

<pre>
 ---------------------------
| timeit string version - ? |        
 ---------------------------
| what's up with timeit?    |    
 ---------------------------
| is this code different?   |    
 ---------------------------
          ....
</pre>


<p>Ok, we&rsquo;ve narrowed it down this far &ndash; it&rsquo;s time to take a look at the source.  <code>timeit</code> is a module written in python (yay!), and the relevant parts look pretty straightforward:</p>

<figure class='code'><figcaption><span>timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">template</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">def inner(_it, _timer):</span>
</span><span class='line'><span class="s">    </span><span class="si">%(setup)s</span><span class="s"></span>
</span><span class='line'><span class="s">    _t0 = _timer()</span>
</span><span class='line'><span class="s">    for _i in _it:</span>
</span><span class='line'><span class="s">        </span><span class="si">%(stmt)s</span><span class="s"></span>
</span><span class='line'><span class="s">    _t1 = _timer()</span>
</span><span class='line'><span class="s">    return _t1 - _t0</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Timer</span><span class="p">:</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Class for timing execution speed of small code snippets.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The constructor takes a statement to be timed, an additional</span>
</span><span class='line'><span class="sd">    statement used for setup, and a timer function.  Both statements</span>
</span><span class='line'><span class="sd">    default to &#39;pass&#39;; the timer function is platform-dependent (see</span>
</span><span class='line'><span class="sd">    module doc string).</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    To measure the execution time of the first statement, use the</span>
</span><span class='line'><span class="sd">    timeit() method.  The repeat() method is a convenience to call</span>
</span><span class='line'><span class="sd">    timeit() multiple times and return a list of results.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The statements may contain newlines, as long as they don&#39;t contain</span>
</span><span class='line'><span class="sd">    multi-line string literals.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">stmt</span><span class="o">=</span><span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="n">timer</span><span class="o">=</span><span class="n">default_timer</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Constructor.  See class doc string.&quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">timer</span> <span class="o">=</span> <span class="n">timer</span>
</span><span class='line'>        <span class="n">ns</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="nb">basestring</span><span class="p">):</span>
</span><span class='line'>            <span class="n">stmt</span> <span class="o">=</span> <span class="n">reindent</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="nb">basestring</span><span class="p">):</span>
</span><span class='line'>                <span class="n">setup</span> <span class="o">=</span> <span class="n">reindent</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                <span class="n">src</span> <span class="o">=</span> <span class="n">template</span> <span class="o">%</span> <span class="p">{</span><span class="s">&#39;stmt&#39;</span><span class="p">:</span> <span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;setup&#39;</span><span class="p">:</span> <span class="n">setup</span><span class="p">}</span>
</span><span class='line'>            <span class="k">elif</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="s">&#39;__call__&#39;</span><span class="p">):</span>
</span><span class='line'>                <span class="n">src</span> <span class="o">=</span> <span class="n">template</span> <span class="o">%</span> <span class="p">{</span><span class="s">&#39;stmt&#39;</span><span class="p">:</span> <span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;setup&#39;</span><span class="p">:</span> <span class="s">&#39;_setup()&#39;</span><span class="p">}</span>
</span><span class='line'>                <span class="n">ns</span><span class="p">[</span><span class="s">&#39;_setup&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">setup</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;setup is neither a string nor callable&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">src</span> <span class="o">=</span> <span class="n">src</span> <span class="c"># Save for traceback display</span>
</span><span class='line'>            <span class="n">code</span> <span class="o">=</span> <span class="nb">compile</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">dummy_src_name</span><span class="p">,</span> <span class="s">&quot;exec&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">exec</span> <span class="n">code</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">(),</span> <span class="n">ns</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">inner</span> <span class="o">=</span> <span class="n">ns</span><span class="p">[</span><span class="s">&quot;inner&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;__call__&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">src</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="nb">basestring</span><span class="p">):</span>
</span><span class='line'>                <span class="n">_setup</span> <span class="o">=</span> <span class="n">setup</span>
</span><span class='line'>                <span class="k">def</span> <span class="nf">setup</span><span class="p">():</span>
</span><span class='line'>                    <span class="k">exec</span> <span class="n">_setup</span> <span class="ow">in</span> <span class="nb">globals</span><span class="p">(),</span> <span class="n">ns</span>
</span><span class='line'>            <span class="k">elif</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="s">&#39;__call__&#39;</span><span class="p">):</span>
</span><span class='line'>                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;setup is neither a string nor callable&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">inner</span> <span class="o">=</span> <span class="n">_template_func</span><span class="p">(</span><span class="n">setup</span><span class="p">,</span> <span class="n">stmt</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;stmt is neither a string nor callable&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">timeit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">default_number</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Time &#39;number&#39; executions of the main statement.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        To be precise, this executes the setup statement once, and</span>
</span><span class='line'><span class="sd">        then returns the time it takes to execute the main statement</span>
</span><span class='line'><span class="sd">        a number of times, as a float measured in seconds.  The</span>
</span><span class='line'><span class="sd">        argument is the number of times through the loop, defaulting</span>
</span><span class='line'><span class="sd">        to one million.  The main statement, the setup statement and</span>
</span><span class='line'><span class="sd">        the timer function to be used are passed to the constructor.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">itertools</span><span class="p">:</span>
</span><span class='line'>            <span class="n">it</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">it</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>        <span class="n">gcold</span> <span class="o">=</span> <span class="n">gc</span><span class="o">.</span><span class="n">isenabled</span><span class="p">()</span>
</span><span class='line'>        <span class="n">gc</span><span class="o">.</span><span class="n">disable</span><span class="p">()</span>
</span><span class='line'>        <span class="n">timing</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">inner</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">timer</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">gcold</span><span class="p">:</span>
</span><span class='line'>            <span class="n">gc</span><span class="o">.</span><span class="n">enable</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">timing</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">timeit</span><span class="p">(</span><span class="n">stmt</span><span class="o">=</span><span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="n">timer</span><span class="o">=</span><span class="n">default_timer</span><span class="p">,</span>
</span><span class='line'>           <span class="n">number</span><span class="o">=</span><span class="n">default_number</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Convenience function to create Timer object and call timeit method.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Timer</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="n">setup</span><span class="p">,</span> <span class="n">timer</span><span class="p">)</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s trace the part that&rsquo;s giving us the long execution string.  We call the module-level function <code>timeit.timeit</code>, which creates a Timer object and returns the result of calling its <code>timeit</code> method.  No surprise that we got identical results between our method #1 and method #3 above.</p>

<p>The <code>Timer</code> object checks to see if you&rsquo;ve passed it strings or callables as its <code>stmt</code> and <code>setup</code> parameters.  In our case both are strings.  The <code>init</code> method splices the strings into the source code here:</p>

<figure class='code'><figcaption><span>timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">src</span> <span class="o">=</span> <span class="n">template</span> <span class="o">%</span> <span class="p">{</span><span class="s">&#39;stmt&#39;</span><span class="p">:</span> <span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;setup&#39;</span><span class="p">:</span> <span class="n">setup</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can isolate this in the REPL if we want to be extra-sure of how it works:</p>

<figure class='code'><figcaption><span>timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">template</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">... def inner(_it, _timer):</span>
</span><span class='line'><span class="s">...     </span><span class="si">%(setup)s</span><span class="s"></span>
</span><span class='line'><span class="s">...     _t0 = _timer()</span>
</span><span class='line'><span class="s">...     for _i in _it:</span>
</span><span class='line'><span class="s">...         </span><span class="si">%(stmt)s</span><span class="s"></span>
</span><span class='line'><span class="s">...     _t1 = _timer()</span>
</span><span class='line'><span class="s">...     return _t1 - _t0</span>
</span><span class='line'><span class="s">... &quot;&quot;&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">stmt</span> <span class="o">=</span> <span class="s">&quot;pass&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">setup</span> <span class="o">=</span> <span class="s">&quot;print &#39;here we go&#39;&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">template</span> <span class="o">%</span> <span class="p">{</span><span class="s">&#39;stmt&#39;</span><span class="p">:</span> <span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;setup&#39;</span><span class="p">:</span> <span class="n">setup</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">_it</span><span class="p">,</span> <span class="n">_timer</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;here we go&#39;</span>
</span><span class='line'>    <span class="n">_t0</span> <span class="o">=</span> <span class="n">_timer</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_i</span> <span class="ow">in</span> <span class="n">_it</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="n">_t1</span> <span class="o">=</span> <span class="n">_timer</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_t1</span> <span class="o">-</span> <span class="n">_t0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Got it &ndash; simple, legal python code is generated. So where is our regular expression getting screwed up?  Let&rsquo;s take a look at the code generated in our actual test by inserting a print statement into the <code>timeit</code> module.  (First we&rsquo;ll copy the module over to our current working directory, to avoid modifying our actual standard library.)</p>

<figure class='code'><figcaption><span>timeit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">src</span> <span class="o">=</span> <span class="n">template</span> <span class="o">%</span> <span class="p">{</span><span class="s">&#39;stmt&#39;</span><span class="p">:</span> <span class="n">stmt</span><span class="p">,</span> <span class="s">&#39;setup&#39;</span><span class="p">:</span> <span class="n">setup</span><span class="p">}</span>
</span><span class='line'><span class="k">print</span> <span class="n">src</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now calling <code>test_with_timeit.py</code> again, it prints:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="n">_it</span><span class="p">,</span> <span class="n">_timer</span><span class="p">):</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">re</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">string</span><span class="p">;</span>
</span><span class='line'>    <span class="n">double</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">short_test</span> <span class="o">=</span> <span class="s">&quot;hee&quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="p">;</span>
</span><span class='line'>    <span class="n">long_test</span> <span class="o">=</span> <span class="s">&quot;hee&quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="o">*</span><span class="mi">200</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_t0</span> <span class="o">=</span> <span class="n">_timer</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_i</span> <span class="ow">in</span> <span class="n">_it</span><span class="p">:</span>
</span><span class='line'>        <span class="n">double</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">short_test</span><span class="p">)</span>
</span><span class='line'>    <span class="n">_t1</span> <span class="o">=</span> <span class="n">_timer</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_t1</span> <span class="o">-</span> <span class="n">_t0</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks mostly reasonable &hellip; but hey, wait, what happened to the regular expression?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">double</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])()&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s not right!  Changing <code>print src</code> to <code>print repr(src)</code> gives us a better idea what&rsquo;s up &ndash; the relevant line is now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">double</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;([a-z])(\x01)&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And looking back at the <code>SETUP</code> string &hellip; uh-oh, this isn&rsquo;t a raw string, and it contains an escape character (<code>(\1)</code>).  We can tell we&rsquo;re in trouble immediately in the REPL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&quot;</span><span class="se">\1</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">repr</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\1</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;&#39;</span><span class="se">\\</span><span class="s">x01&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why does this happen?  We can consult the <a href="http://docs.python.org/2/reference/lexical_analysis.html#string-literals">docs on string literals</a> to find out.  Unless you&rsquo;re working with a raw string (one prefixed with <code>r</code> or <code>R</code>), escape characters are interpreted the same way they are in C.  Our text, a backslash followed by a number, matches the pattern for an octal digit: a backslash followed by 1-3 integers. <code>\ooo</code> indicates a character with the octal value <code>ooo</code>.  And that&rsquo;s exactly what we&rsquo;ve done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\1</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;</span><span class="se">\x01</span><span class="s">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>\x01</code> is a legal (though unprintable) character, and <strong>it doesn&rsquo;t appear in our long string to test the regular expression.</strong> So <em>of course</em> the longer one took a longer time &ndash; it had to traverse the entire string looking for <code>\x01</code>, which it never found.</p>

<p>The fix is quite easy &ndash; one character, in fact.  Make the <code>SETUP</code> string raw:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">SETUP</span> <span class="o">=</span> <span class="s">r&quot;&quot;&quot;import re;</span>
</span><span class='line'><span class="s">import string;</span>
</span><span class='line'><span class="s">double = re.compile(r&quot;([a-z])(\1)&quot;);</span>
</span><span class='line'><span class="s">short_test = &quot;hee&quot; + string.lowercase;</span>
</span><span class='line'><span class="s">long_test = &quot;hee&quot; + string.lowercase*200</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and the problem is solved.  So we can pop a bunch of frame off our problem stack and go investigate the string copying, which is in fact the issue.</p>

<pre>
 ---------------------------
| reg exp? or string copy?  |
 ---------------------------
| function is so slow, why? |
 ---------------------------
|   find a faster solution  |
 ---------------------------
|  solve wordplay problem   | (oldest)
 ---------------------------
</pre>


<h2>Lessons learned</h2>

<p>Interesting bugs are a ton of fun!  Now for a bit of introspection: what could have gone better?</p>

<ul>
<li><p>Most obviously, I could have spent less time on the regular-expression branch of why the function was slow, especially as the stack grew.  Whether I should have done this depends on your perspective: at Hacker School, I&rsquo;m almost 100% learning motivated and about 0% get-it-done motivated, so my time to solve the bug is virtually unbounded.</p></li>
<li><p>I was slightly overconfident about understanding how the <code>timeit</code> code splicing happened.  The code looked so simple that I didn&rsquo;t bother to check my understanding at first.</p></li>
<li><p>Passing <code>timeit.timeit</code> strings is an unwieldy way of doing timing.  I should have been using either the callable option, or just timing with <code>time python test_file.py</code> from the command line.  Both of these would have been easier to work with and would have sidestepped the bug.</p></li>
<li><p>My mental model of regular expressions was largely correct.  That&rsquo;s satisfying.</p></li>
<li><p>Strings!  Ouch.  This may not seem like much of a lesson, but it&rsquo;s useful to add to my mental list of Places That Bugs Lurk.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More side effecting]]></title>
    <link href="http://akaptur.github.com/blog/2013/07/02/more-side-effecting/"/>
    <updated>2013-07-02T15:47:00-04:00</updated>
    <id>http://akaptur.github.com/blog/2013/07/02/more-side-effecting</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/ncoghlan_dev">Nick Coghlan</a> added another interesting note in response to my last post about creating side-effecting assignments in python.  Here&rsquo;s Nick:</p>

<blockquote class="twitter-tweet" data-conversation="none" data-cards="hidden"><p><a href="https://twitter.com/brandon_rhodes">@brandon_rhodes</a> <a href="https://twitter.com/akaptur">@akaptur</a> You can do better if you&#39;re the one controlling the namespace creation (e.g. an importer): <a href="https://t.co/gA8LD121cD">https://t.co/gA8LD121cD</a></p>&mdash; Nick Coghlan (@ncoghlan_dev) <a href="https://twitter.com/ncoghlan_dev/statuses/350971160659378176">June 29, 2013</a></blockquote>


<script async src="http://akaptur.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Let&rsquo;s look at <a href="https://gist.github.com/ncoghlan/5891123#file-crazy-namespace-python-2">that gist</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Madness</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>         <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">type</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>             <span class="n">value</span><span class="o">.</span><span class="n">__name__</span> <span class="o">=</span> <span class="n">attr</span>
</span><span class='line'><span class="o">...</span>         <span class="nb">dict</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span><span class="se">\</span>
</span><span class='line'><span class="s">... class Example(object): pass</span>
</span><span class='line'><span class="s">... NewName = Example</span>
</span><span class='line'><span class="s">... print(Example.__name__)</span>
</span><span class='line'><span class="s">... &quot;&quot;&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">exec</span> <span class="n">code</span> <span class="ow">in</span> <span class="n">Madness</span><span class="p">()</span>
</span><span class='line'><span class="n">NewName</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is really fun stuff, and nicely illustrates a core feature of python &ndash; that namespaces are basically just dictionaries.</p>

<p>So what&rsquo;s going on here?  In this case, I think it&rsquo;s easiest to work backwards from the end.</p>

<p>Last we have <code>exec code in Madness()</code>. The <code>exec</code> keyword in python 2<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> executes a string as code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">exec</span> <span class="s">&quot;print a&quot;</span>
</span><span class='line'><span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>exec</code> optionally takes a context in which to execute the code.  A dictionary is a perfectly legal context to use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">exec</span> <span class="s">&quot;print b&quot;</span> <span class="ow">in</span> <span class="p">{</span><span class="s">&#39;b&#39;</span> <span class="p">:</span> <span class="s">&quot;hi there&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">hi</span> <span class="n">there</span>
</span></code></pre></td></tr></table></div></figure>


<p>All the code is shown here &ndash; <code>b</code> is not defined elsewhere in the REPL session.</p>

<p>If a dictionary is provided, it&rsquo;s presumed to contain both the global and the local variables.  This dictionary is the <strong>only</strong> context in which the code will be executed (it won&rsquo;t check the scope from which the <code>exec</code> statement was made).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">exec</span> <span class="s">&quot;print a&quot;</span> <span class="ow">in</span> <span class="p">{</span><span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="s">&quot;hi there&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;string&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="s">&#39;a&#39;</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>
</span></code></pre></td></tr></table></div></figure>


<p>So without knowing anything about the <code>Madness()</code> object, we&rsquo;d expect it to be a dictionary-like thing.</p>

<p>And sure enough, it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Madness</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>__setitem__</code> is the standard way to override setting a key:value pair in a dictionary.  It works just like you&rsquo;d expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;hello&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;hello&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re intercepting any attempt to write to the Madness dictionary-like object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>         <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">type</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>             <span class="n">value</span><span class="o">.</span><span class="n">__name__</span> <span class="o">=</span> <span class="n">attr</span>
</span><span class='line'><span class="o">...</span>         <span class="nb">dict</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the value of the key:value pair that we&rsquo;re setting is an instance of the <code>type</code> type &ndash; that is, if the object in question is a class &ndash; then grab that class&rsquo;s <strong>name</strong> and set it to the key.  (This step will blow up if the key in question isn&rsquo;t a legal name in the first place.)  Then use the parent class (<code>dict</code>)&rsquo;s <code>__setitem__</code> to actually write to the Madness object.</p>

<p>We can execute the code string one line at a time to better see what&rsquo;s happening.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">Madness</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span><span class='line'><span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">exec</span> <span class="s">&quot;class Example(object): pass&quot;</span> <span class="ow">in</span> <span class="n">m</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__builtins__&#39;</span><span class="p">,</span> <span class="s">&#39;Example&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">[</span><span class="s">&#39;Example&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">Example</span><span class="s">&#39;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">exec</span> <span class="s">&quot;NewName = Example&quot;</span> <span class="ow">in</span> <span class="n">m</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__builtins__&#39;</span><span class="p">,</span> <span class="s">&#39;NewName&#39;</span><span class="p">,</span> <span class="s">&#39;Example&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">[</span><span class="s">&#39;Example&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">NewName</span><span class="s">&#39;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">[</span><span class="s">&#39;NewName&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">NewName</span><span class="s">&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">exec</span> <span class="s">&quot;OtherName = Example&quot;</span> <span class="ow">in</span> <span class="n">m</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">[</span><span class="s">&#39;Example&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">OtherName</span><span class="s">&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(I&rsquo;m using <code>m.keys()</code> to examine the state of the namespace instead of just printing <code>m</code> because the reference to <code>__builtins__</code> pukes a bunch of tiresome definitions and copyright statements into the REPL.  <code>exec</code> adds a reference to <code>__builtins__</code> on the execution of any statement.)</p>

<p>We&rsquo;re now quite close to the original Ruby behavior &ndash; with a deeper understanding of python namespaces!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>All of this works in python 3, too, with slightly different syntax because <code>exec</code> is a function, not a keyword.  Nick&rsquo;s gist includes the python 3 version too.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Side-effecting Assignment]]></title>
    <link href="http://akaptur.github.com/blog/2013/06/28/side-effecting-assignment/"/>
    <updated>2013-06-28T14:35:00-04:00</updated>
    <id>http://akaptur.github.com/blog/2013/06/28/side-effecting-assignment</id>
    <content type="html"><![CDATA[<h2>Surprises</h2>

<p>My colleague <a href="https://github.com/davidbalbert">Dave</a> told me about an interesting bit of Ruby the other day.  If you make a new <code>Class</code> object, it initially has no name. If you then assign a name to it, with your new class on the right-hand side of the assignment, the name is attached to the Class object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Class:0x007ff19bc46988&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Foo</span> <span class="o">=</span> <span class="n">c</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Foo</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Foo</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Foo</span>
</span><span class='line'><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Foo</span>
</span><span class='line'><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I found this shockingly non-intuitive. Really, an assignment statement permanently modified the object on the right-hand side?</p>

<p>In a word, yes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Bar</span> <span class="o">=</span> <span class="n">c</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Foo</span>
</span><span class='line'><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">c</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Foo</span>
</span><span class='line'><span class="o">[</span><span class="mi">10</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Foo</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Foo</span>
</span><span class='line'><span class="o">[</span><span class="mi">11</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Bar</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Foo</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">12</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Baz</span> <span class="o">=</span> <span class="no">Foo</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Foo</span>
</span><span class='line'><span class="o">[</span><span class="mi">13</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Baz</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>To recap:</p>

<p>Step 1: <code>c</code> is some object</p>

<p>Step 2: set <code>Foo = c</code></p>

<p>Step 3: <code>c</code> is permanently altered.</p>

<p>Wow.</p>

<p>Luckily for our intuition, this is a pretty special case, and not a way that Ruby generally behaves.  But it got me wondering if there&rsquo;s something similar in python.</p>

<h2>What about python?</h2>

<p>The simplest answer is &ldquo;no&rdquo;.  In python, <a href="http://docs.python.org/2/reference/simple_stmts.html#assignment-statements">assignment is a simple statement</a>, not an operator, so you can&rsquo;t do things like operator overloading.  This also means we can&rsquo;t somehow add a hook to assignment.</p>

<p>Ok, fine.  But wait &ndash; we&rsquo;re programmers!  We don&rsquo;t give up that easily.</p>

<p>What about hooking on <code>__getattribute__</code>?  (Defining your own <code>__getattribute__</code> is &ldquo;the bad way&rdquo; to do it.  You almost always want to define your own <code>__getattr__</code>, unless you&rsquo;re doing something silly and/or malicious, like we are.  Note that we have to use the parent class (<code>object</code>)&rsquo;s <code>__getattribute__</code> to extract and save the attribute we want.  If we didn&rsquo;t do that, we&rsquo;d trigger an infinitely recursive lookup.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Foo</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">some_attr</span> <span class="o">=</span> <span class="s">&quot;sup foo&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__getattribute__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">):</span>
</span><span class='line'>        <span class="n">attribute</span> <span class="o">=</span> <span class="nb">object</span><span class="o">.</span><span class="n">__getattribute__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">object</span><span class="o">.</span><span class="n">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="s">&quot;you&#39;re too late!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">attribute</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks like it works!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">obj</span><span class="o">.</span><span class="n">Foo</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x10253dd10</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">some_attr</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">word</span>
</span><span class='line'><span class="n">sup</span> <span class="n">foo</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">f</span><span class="o">.</span><span class="n">some_attr</span>
</span><span class='line'><span class="n">you</span><span class="s">&#39;re too late!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, this behavior has nothing to do with assignment.  The object was mutated when <code>__getattribute__</code> was called, which happened to be in an assignment statement in this code above.  We&rsquo;d get exactly the same behavior without the assignment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">obj</span><span class="o">.</span><span class="n">Foo</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x10253dd10</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">some_attr</span>
</span><span class='line'><span class="n">sup</span> <span class="n">foo</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">some_attr</span>
</span><span class='line'><span class="n">you</span><span class="s">&#39;re too late!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Darn.</p>

<p>But we&rsquo;re programmers, right?  We don&rsquo;t give up that easily.</p>

<h2>Trace functions to the rescue</h2>

<p>There&rsquo;s a <code>settrace</code> function in python&rsquo;s <code>sys</code> module that we can use to examine stack frames, events, and lots of other code data while our program is running.  <code>sys.settrace(fn)</code> takes a trace function as an argument, and that trace function must take <code>frame, event, args</code> as arguments.  It will then get called every time an event happens.  A line of code, a function call, a function return, and an exception are all &ldquo;events&rdquo;.  We can use this to inspect each line of code before it runs and check manually if it&rsquo;s an assignment statement.</p>

<p>(I know this is silly, but isn&rsquo;t it fun?)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">linecache</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Tracer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">program</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">program</span> <span class="o">=</span> <span class="n">program</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">traceit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">frame</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">event</span> <span class="o">==</span> <span class="s">&#39;line&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">linenum</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_lineno</span>
</span><span class='line'>            <span class="n">linetext</span> <span class="o">=</span> <span class="n">linecache</span><span class="o">.</span><span class="n">getline</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">program</span><span class="p">,</span> <span class="n">linenum</span><span class="p">)</span>
</span><span class='line'>            <span class="n">vprint</span><span class="p">(</span> <span class="s">&#39;line&#39;</span><span class="p">,</span> <span class="n">linenum</span><span class="p">,</span> <span class="n">linetext</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">is_assignment</span> <span class="o">=</span> <span class="s">&quot;=&quot;</span> <span class="ow">in</span> <span class="n">linetext</span> <span class="ow">and</span> <span class="s">&quot;==&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">linetext</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">is_assignment</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">mess_up_on_assignment</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">linetext</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">traceit</span>
</span></code></pre></td></tr></table></div></figure>


<p>(The trace function returns a reference to itself to indicate that tracing should continue.)</p>

<p>Now let&rsquo;s write our code to mess up assignment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Tracer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">mess_up_on_assignment</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">frame</span><span class="p">,</span> <span class="n">linetext</span><span class="p">):</span>
</span><span class='line'>        <span class="n">rhs</span> <span class="o">=</span> <span class="n">linetext</span><span class="p">[</span><span class="n">linetext</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s">&quot;=&quot;</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'>        <span class="n">names</span> <span class="o">=</span> <span class="n">rhs</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>        <span class="n">local_objs</span> <span class="o">=</span> <span class="p">[</span><span class="n">name</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">names</span> <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_locals</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span> <span class="o">+</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_globals</span><span class="o">.</span><span class="n">keys</span><span class="p">()]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">local_objs</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">JANKY_NAMESPACE_MANAGER</span><span class="p">:</span>
</span><span class='line'>                <span class="n">box</span> <span class="o">=</span> <span class="n">Box</span><span class="p">(</span><span class="n">frame</span><span class="o">.</span><span class="n">f_locals</span><span class="p">[</span><span class="n">name</span><span class="p">],</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>                <span class="n">frame</span><span class="o">.</span><span class="n">f_locals</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">box</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">JANKY_NAMESPACE_MANAGER</span><span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="o">.</span><span class="n">assignments</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">JANKY_NAMESPACE_MANAGER</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Box</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">obj</span> <span class="o">=</span> <span class="n">obj</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assignments</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">JANKY_NAMESPACE_MANAGER</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">NameError</span><span class="p">(</span><span class="s">&quot;this message has self-destructed.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here our &ldquo;box&rdquo; object is pretty silly.  It takes the original object and wraps it in a box.  (You could implement <code>__getattr__</code> and <code>__setattr__</code> so that the box behaves basically like the original object, which I haven&rsquo;t done.)  The box then explodes when you try to print it.  We&rsquo;re also tracking which names we&rsquo;ve seen with the aptly-named <code>JANKY_NAMESPACE_MANAGER</code> (which has all kinds of scope issues, but whatever).</p>

<p>Meanwhile, in the <code>mess_up_on_assignment</code> code, we check to see if any of the whitespace-separated words on the right-hand side of the equation are names we recognize from <code>frame.f_locals</code> or <code>frame.f_globals</code>.  If so, and if we haven&rsquo;t seen them before, throw them in a self-destructing box!</p>

<p>Add a simple helper to get things set up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">assignment</span><span class="p">(</span><span class="n">orig_file</span><span class="p">):</span>
</span><span class='line'>    <span class="n">trace_obj</span> <span class="o">=</span> <span class="n">Tracer</span><span class="p">(</span><span class="n">orig_file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">settrace</span><span class="p">(</span><span class="n">trace_obj</span><span class="o">.</span><span class="n">traceit</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now sabotage simple-looking programs!</p>

<p>This one runs fine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sabotage</span>
</span><span class='line'><span class="n">sabotage</span><span class="o">.</span><span class="n">assignment</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">greet</span><span class="p">():</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&quot;Enter your name: &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;hello,&quot;</span><span class="p">,</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;goodbye, &quot;</span><span class="p">,</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">greet</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this one blows up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sabotage</span>
</span><span class='line'><span class="n">sabotage</span><span class="o">.</span><span class="n">assignment</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;done sabotaging&quot;</span>
</span><span class='line'><span class="nb">raw_input</span><span class="p">(</span><span class="s">&quot;Hit enter to continue&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">greet</span><span class="p">():</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&quot;Enter your name: &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;hello,&quot;</span><span class="p">,</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">name_copy</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;goodbye, &quot;</span><span class="p">,</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">greet</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have it &ndash; a (incredibly goofy) side-effecting assignment that mutates the object on the right-hand side of the assignment statement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New git tricks]]></title>
    <link href="http://akaptur.github.com/blog/2013/06/25/new-git-tricks/"/>
    <updated>2013-06-25T14:14:00-04:00</updated>
    <id>http://akaptur.github.com/blog/2013/06/25/new-git-tricks</id>
    <content type="html"><![CDATA[<p>I picked up a couple of new tricks at Hacker School&rsquo;s intermediate/advanced Git seminar, led by Peter Bell.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -</span></code></pre></td></tr></table></div></figure>


<p>This checks out whatever you had checked out last.  Thanks, <a href="https://github.com/nnja">Nina</a>!</p>

<p>Draw a graph of the commit history:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git-advanced [master]\ $ git log --graph --oneline --all
</span><span class='line'>*   b2da179 Merge branch 'test-graph'
</span><span class='line'>|\  
</span><span class='line'>| * d71e4fc testing graph thing
</span><span class='line'>* | 8535311 still testing graph
</span><span class='line'>|/  
</span><span class='line'>* b90b105 Added contact form
</span><span class='line'>* b36ba51 added gitignore to ignore generated log files
</span><span class='line'>* 70461dc added about
</span><span class='line'>* c57f995 added homepage</span></code></pre></td></tr></table></div></figure>


<p>You can alias this with <code>git config --global alias.plog "log --graph --oneline --all"</code>.  (Looking at this graph may motivate you to start using <code>git merge --no-ff</code>.)  You can substitute whatever you want for <code>plog</code> above.</p>

<p>If you get really screwed up, it&rsquo;s reflog time!  (This is pronounced ref-log, not re-flog as I&rsquo;d been reading it.  On the other hand, as my colleague <a href="https://github.com/happy4crazy">Alan</a> notes, &ldquo;You damn well ought to feel penitent if you&rsquo;re wedged enough to need the reflog.&rdquo;)  Here, we&rsquo;re using <code>git reset</code> to undo the last commit.  Even though the commit doesn&rsquo;t appear in <code>git log</code> anymore, there&rsquo;s still a references to it in the reflog.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git-advanced [master %]\ $ git add tester.css
</span><span class='line'>git-advanced [master +]\ $ git commit -m "add some file"
</span><span class='line'>git-advanced [master]\ $ git reset HEAD~1
</span><span class='line'>git-advanced [master %]\ $ git add tester.css
</span><span class='line'>git-advanced [master +]\ $ git commit -m "redoing some file"
</span><span class='line'>
</span><span class='line'>git-advanced [master]\ $ git log --oneline
</span><span class='line'>8039ec5 redoing some file
</span><span class='line'>b2da179 Merge branch 'test-graph'
</span><span class='line'>8535311 still testing graph
</span><span class='line'>d71e4fc testing graph thing
</span><span class='line'>
</span><span class='line'>git-advanced [master]\ $ git reflog
</span><span class='line'>8039ec5 HEAD@{0}: commit: redoing some file
</span><span class='line'>b2da179 HEAD@{1}: reset: moving to HEAD~1
</span><span class='line'>848874d HEAD@{2}: commit: add some file</span></code></pre></td></tr></table></div></figure>


<p>It turns out that there is a better way to get a commit sha than running <code>git log</code> and copying and pasting the relevant shas.  You can use <code>rev-parse</code> instead.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git-advanced [master]\ $ git rev-parse HEAD~2
</span><span class='line'>0fafe464f4b7d524c8ba707ea2115950d6dd4bdf
</span><span class='line'>git-advanced [master]\ $ git rev-parse master
</span><span class='line'>8039ec584485540f07aac1209389022f627bc8c5</span></code></pre></td></tr></table></div></figure>


<p>Then you can inline with backticks!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git-advanced [master]\ $ git diff `git rev-parse HEAD~2` `git rev-parse HEAD`</span></code></pre></td></tr></table></div></figure>


<p>Now go forth and git in peace.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surprised by Stable Sort]]></title>
    <link href="http://akaptur.github.com/blog/2013/01/02/surprised-by-stable-sort/"/>
    <updated>2013-01-02T00:02:00-05:00</updated>
    <id>http://akaptur.github.com/blog/2013/01/02/surprised-by-stable-sort</id>
    <content type="html"><![CDATA[<p>I encountered some surprising behavior in python&rsquo;s list.sort() method.  I was calling list.sort() with a function, then list.reverse().  This was silly &ndash; I forgot I could call list.sort(reverse=True).  As it turns out, these are not the always the same, or even usually the same.</p>

<p>Here&rsquo;s the code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def two_sort(ex):
</span><span class='line'>    ex_copy = ex[:]
</span><span class='line'> 
</span><span class='line'>    ex.sort(key=lambda tup: tup[1])
</span><span class='line'>    ex.reverse()
</span><span class='line'>    print "Ex:  ", ex
</span><span class='line'> 
</span><span class='line'>    ex_copy.sort(key=lambda tup: tup[1], reverse=True)
</span><span class='line'>    print "Copy:", ex_copy
</span><span class='line'> 
</span><span class='line'>    assert ex == ex_copy # fails
</span><span class='line'> 
</span><span class='line'>ex = [('a', 0), ('b', 0), ('c', 2), ('d', 3)]
</span><span class='line'>two_sort(ex)
</span><span class='line'># Ex:   [('d', 3), ('c', 2), ('b', 0), ('a', 0)]
</span><span class='line'># Copy: [('d', 3), ('c', 2), ('a', 0), ('b', 0)]</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s happening here is that .sort() and sorted() in python are &ldquo;stable sorts&rdquo;, meaning that it&rsquo;ll preserve the existing order when faced with a tie.  This leads to a nice side effect, as described in the <a href="http://wiki.python.org/moin/HowTo/Sorting/">python wiki</a>: you can sort by multiple criteria.  So if we wanted to sort primarily by number (ascending), and secondarily by letter, we could do that quite easily.  Just sort by the secondary key first, then by the primary key.  Since the sort is stable, you know that a tie in the second (primary) sort will preserve the order you had going in.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; a = [('d', 3), ('c', 5), ('b', 0), ('a', 0)]
</span><span class='line'>&gt;&gt;&gt; a.sort(key=lambda tup: tup[0])
</span><span class='line'>&gt;&gt;&gt; a
</span><span class='line'>[('a', 0), ('b', 0), ('c', 5), ('d', 3)]
</span><span class='line'>&gt;&gt;&gt; a.sort(key=lambda tup:tup[1])
</span><span class='line'>&gt;&gt;&gt; a
</span><span class='line'>[('a', 0), ('b', 0), ('d', 3), ('c', 5)]</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some wacky shell scripting]]></title>
    <link href="http://akaptur.github.com/blog/2012/12/23/some-wacky-shell-scripting/"/>
    <updated>2012-12-23T16:16:00-05:00</updated>
    <id>http://akaptur.github.com/blog/2012/12/23/some-wacky-shell-scripting</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently digging into the source of virtualenv, a python utility for managing environments.  It&rsquo;s incredibly handy, and I&rsquo;d been using it for a while without really understanding how it worked.  I&rsquo;ll have more later on the details, but in the meantime, I hit a particularly puzzling bit of code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if [ -z "$VIRTUAL_ENV_DISABLE_PROMPT" ] ; then
</span><span class='line'>    _OLD_VIRTUAL_PS1="$PS1"
</span><span class='line'>    if [ "x" != x ] ; then
</span><span class='line'>        PS1="$PS1"
</span><span class='line'>    else
</span><span class='line'>    if [ "`basename \"$VIRTUAL_ENV\"`" = "__" ] ; then
</span><span class='line'>        # special case for Aspen magic directories
</span><span class='line'>        # see http://www.zetadev.com/software/aspen/
</span><span class='line'>        PS1="[`basename \`dirname \"$VIRTUAL_ENV\"\``] $PS1"
</span><span class='line'>    else
</span><span class='line'>        PS1="(`basename \"$VIRTUAL_ENV\"`)$PS1"
</span><span class='line'>    fi
</span><span class='line'>    fi
</span><span class='line'>    export PS1
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>This is largely intelligible &ndash; clearly we&rsquo;re modifying the $PS1 variable, which sets the bash prompt.  But what on earth is this line?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if [ "x" != x ] ; then
</span><span class='line'>    PS1="$PS1"</span></code></pre></td></tr></table></div></figure>


<p><code>x</code> is not a variable defined elsewhere in the script, and bash will interpret both <code>"x"</code> and <code>x</code> as string literals anyway.  Is there some bizarre shell in which this test can possibly return true?</p>

<p>As it turns out, there isn&rsquo;t.  The reason this code looks so bizarre is that it&rsquo;s automatically generated by virtualenv.  The original line of code is <a href="https://github.com/pypa/virtualenv/blob/develop/virtualenv_embedded/activate.sh#L59">this</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if [ "x__VIRTUAL_PROMPT__" != x ] ; then
</span><span class='line'>    PS1="__VIRTUAL_PROMPT__$PS1"</span></code></pre></td></tr></table></div></figure>


<p>And then elsewhere we find its <a href="https://github.com/pypa/virtualenv/blob/develop/virtualenv.py#L1582">complement</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    content = content.replace('__VIRTUAL_PROMPT__', prompt or '')</span></code></pre></td></tr></table></div></figure>


<p>Together, this code is entirely reasonable.</p>

<p>Thanks to user ruakh on <a href="http://stackoverflow.com/questions/13976472/what-does-if-x-x-do-in-bash">Stack Overflow</a> for the key insight here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git add -p: The Wave of the Future]]></title>
    <link href="http://akaptur.github.com/blog/2012/12/18/git-add-p-the-wave-of-the-future/"/>
    <updated>2012-12-18T16:12:00-05:00</updated>
    <id>http://akaptur.github.com/blog/2012/12/18/git-add-p-the-wave-of-the-future</id>
    <content type="html"><![CDATA[<p>I recently started using git&rsquo;s patch mode via <code>git add -p</code>. Patch mode makes my commits more granular, which means my commit messages are more accurate.  Better still, patch mode allows you to abstract away from adding &ldquo;files&rdquo; &ndash; you&rsquo;re adding changes to be committed.  This is a closer mental model to what git is actually doing.  I&rsquo;m finding it particularly useful for code review: make several changes in a friend&rsquo;s program, group the changes by concept, and commit one concept at a time.</p>

<p>That&rsquo;s the why &ndash; here&rsquo;s the how.</p>

<p><code>git add -p</code> launches what git calls the &ldquo;interactive hunk selector.&rdquo;  This leads me to my other favorite reason to use -p: besides being useful, all the <a href="http://www.kernel.org/pub/software/scm/git/docs/git-add.html">docs</a> sound like an episode of The Bachelorette.  &ldquo;Once you have decided the fate of all the hunks, if there is any hunk that is chosen, the index is updated with the selected hunks.&rdquo; And if not, our bachelorette takes the million dollars!</p>

<p>In practice, I only end up using three of the interactive hunk selector options: [y]es, [n]o, and [s]plit.  Split takes the current hunk and divides it into smaller hunks, then presents them for selection one at a time.  (If you&rsquo;re attempting to continue the Bachelorette metaphor, now is a good time to stop.)</p>

<p>Let&rsquo;s look at an example.  Suppose I&rsquo;m working on a function that recursively calculates the sum of element of a list.  My first draft looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def sum(list_in):
</span><span class='line'>    """ Returns the sum of elements of a list."""
</span><span class='line'>    if list_in == []:
</span><span class='line'>        return 0
</span><span class='line'>    else:
</span><span class='line'>        return list_in.pop() + sum(list_in)</span></code></pre></td></tr></table></div></figure>


<p>Not bad, but it&rsquo;s a little verbose.  Let&rsquo;s take advantage of the fact that an empty list is falsey.  And, oops, we&rsquo;re overwriting the built-in <code>sum</code> function in python &ndash; we probably don&rsquo;t want to do that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def summer(list_in):
</span><span class='line'>    """ Returns the sum of elements of a list."""
</span><span class='line'>    if not list_in:
</span><span class='line'>        return 0
</span><span class='line'>    else:
</span><span class='line'>        return list_in.pop() + summer(list_in)</span></code></pre></td></tr></table></div></figure>


<p>Ok, these are two different thoughts, but we didn&rsquo;t commit in between.  Interactive mode to the rescue &ndash; let&rsquo;s stage those hunks.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum [master]\ ‚ö≤git add -p
</span><span class='line'>diff --git a/sum.py b/sum.py
</span><span class='line'>index fdccd3f..6d000f7 100644
</span><span class='line'>--- a/sum.py
</span><span class='line'>+++ b/sum.py
</span><span class='line'>@@ -1,6 +1,6 @@
</span><span class='line'>-def sum(list_in):
</span><span class='line'>+def summer(list_in):
</span><span class='line'>     """ Returns the sum of elements of a list."""
</span><span class='line'>-    if list_in == []:
</span><span class='line'>+    if not list_in:
</span><span class='line'>         return 0
</span><span class='line'>     else:
</span><span class='line'>-        return list_in.pop() + sum(list_in)
</span><span class='line'>+        return list_in.pop() + summer(list_in)
</span><span class='line'>Stage this hunk [y,n,q,a,d,/,s,e,?]? </span></code></pre></td></tr></table></div></figure>


<p>Our changes aren&rsquo;t in the right hunks, so we&rsquo;ll pick <code>s</code> to split them.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Stage this hunk [y,n,q,a,d,/,s,e,?]? s
</span><span class='line'>Split into 3 hunks.
</span><span class='line'>@@ -1,2 +1,2 @@
</span><span class='line'>-def sum(list_in):
</span><span class='line'>+def summer(list_in):
</span><span class='line'>     """ Returns the sum of elements of a list."""
</span><span class='line'>Stage this hunk [y,n,q,a,d,/,j,J,g,e,?]? </span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s deal with the naming issue first.  <code>y</code>.  Next up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@@ -2,4 +2,4 @@
</span><span class='line'>     """ Returns the sum of elements of a list."""
</span><span class='line'>-    if list_in == []:
</span><span class='line'>+    if not list_in:
</span><span class='line'>         return 0
</span><span class='line'>     else:</span></code></pre></td></tr></table></div></figure>


<p>This one&rsquo;s different. <code>n</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Stage this hunk [y,n,q,a,d,/,K,j,J,g,e,?]? n
</span><span class='line'>@@ -4,3 +4,3 @@
</span><span class='line'>         return 0
</span><span class='line'>     else:
</span><span class='line'>-        return list_in.pop() + sum(list_in)
</span><span class='line'>+        return list_in.pop() + summer(list_in)</span></code></pre></td></tr></table></div></figure>


<p>Back to the naming issue.  <code>y</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum [master *+]\ ‚ö≤git commit -m "fix naming to not conflict with builtin"
</span><span class='line'>[master caaa300] fix naming to not conflict with builtin
</span><span class='line'> 1 file changed, 2 insertions(+), 2 deletions(-)</span></code></pre></td></tr></table></div></figure>


<p> Now we can repeat this process for our other change.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> sum [master *]\ ‚ö≤git add -p
</span><span class='line'>diff --git a/sum.py b/sum.py
</span><span class='line'>index 77676b1..6d000f7 100644
</span><span class='line'>--- a/sum.py
</span><span class='line'>+++ b/sum.py
</span><span class='line'>@@ -1,6 +1,6 @@
</span><span class='line'> def summer(list_in):
</span><span class='line'>     """ Returns the sum of elements of a list."""
</span><span class='line'>-    if list_in == []:
</span><span class='line'>+    if not list_in:
</span><span class='line'>         return 0
</span><span class='line'>     else:
</span><span class='line'>         return list_in.pop() + summer(list_in)
</span><span class='line'>Stage this hunk [y,n,q,a,d,/,e,?]? </span></code></pre></td></tr></table></div></figure>


<p>This is our only hunk now, so <code>y</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum [master +]\ ‚ö≤git commit -m "use falseyness of empty list"
</span><span class='line'>[master 5209728] use falseyness of empty list
</span><span class='line'> 1 file changed, 1 insertion(+), 1 deletion(-)</span></code></pre></td></tr></table></div></figure>


<p>Of course, you may not want your commits to be quite <em>this</em> granular &ndash; but hopefully the example has demonstrated the strength of <code>git add -p</code> in creating single-concept commits.</p>
]]></content>
  </entry>
  
</feed>
