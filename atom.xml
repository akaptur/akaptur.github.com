<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Of Interest]]></title>
  <link href="http://akaptur.github.com/atom.xml" rel="self"/>
  <link href="http://akaptur.github.com/"/>
  <updated>2012-12-19T14:15:15-05:00</updated>
  <id>http://akaptur.github.com/</id>
  <author>
    <name><![CDATA[akaptur]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git add -p: The Wave of the Future]]></title>
    <link href="http://akaptur.github.com/blog/2012/12/18/git-add-p-the-wave-of-the-future/"/>
    <updated>2012-12-18T16:12:00-05:00</updated>
    <id>http://akaptur.github.com/blog/2012/12/18/git-add-p-the-wave-of-the-future</id>
    <content type="html"><![CDATA[<p>I recently started using git&#8217;s patch mode via <code>git add -p</code>. Patch mode makes my commits more granular, which means my commit messages are more accurate.  Better still, patch mode allows you to abstract away from adding &#8220;files&#8221; - you&#8217;re adding changes to be committed.  This is a closer mental model to what git is actually doing.  I&#8217;m finding it particularly useful for code review: make several changes in a friend&#8217;s program, group the changes by concept, and commit one concept at a time.</p>

<p>That&#8217;s the why - here&#8217;s the how.</p>

<p><code>git add -p</code> launches what git calls the &#8220;interactive hunk selector.&#8221;  This leads me to my other favorite reason to use -p: besides being useful, all the <a href="http://www.kernel.org/pub/software/scm/git/docs/git-add.html">docs</a> sound like an episode of The Bachelorette.  &#8220;Once you have decided the fate of all the hunks, if there is any hunk that is chosen, the index is updated with the selected hunks.&#8221; And if not, our bachelorette takes the million dollars!</p>

<p>In practice, I only end up using three of the interactive hunk selector options: [y]es, [n]o, and [s]plit.  Split takes the current hunk and divides it into smaller hunks, then presents them for selection one at a time.  (If you&#8217;re attempting to continue the Bachelorette metaphor, now is a good time to stop.)</p>

<p>Let&#8217;s look at an example.  Suppose I&#8217;m working on a function that recursively calculates the sum of element of a list.  My first draft looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def sum(list_in):
</span><span class='line'>    """ Returns the sum of elements of a list."""
</span><span class='line'>    if list_in == []:
</span><span class='line'>        return 0
</span><span class='line'>    else:
</span><span class='line'>        return list_in.pop() + sum(list_in)</span></code></pre></td></tr></table></div></figure>


<p>Not bad, but it&#8217;s a little verbose.  Let&#8217;s take advantage of the fact that an empty list is falsey.  And, oops, we&#8217;re overwriting the built-in <code>sum</code> function in python - we probably don&#8217;t want to do that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def summer(list_in):
</span><span class='line'>    """ Returns the sum of elements of a list."""
</span><span class='line'>    if not list_in:
</span><span class='line'>        return 0
</span><span class='line'>    else:
</span><span class='line'>        return list_in.pop() + summer(list_in)</span></code></pre></td></tr></table></div></figure>


<p>Ok, these are two different thoughts, but we didn&#8217;t commit in between.  Interactive mode to the rescue - let&#8217;s stage those hunks.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum [master]\ ⚲git add -p
</span><span class='line'>diff --git a/sum.py b/sum.py
</span><span class='line'>index fdccd3f..6d000f7 100644
</span><span class='line'>--- a/sum.py
</span><span class='line'>+++ b/sum.py
</span><span class='line'>@@ -1,6 +1,6 @@
</span><span class='line'>-def sum(list_in):
</span><span class='line'>+def summer(list_in):
</span><span class='line'>     """ Returns the sum of elements of a list."""
</span><span class='line'>-    if list_in == []:
</span><span class='line'>+    if not list_in:
</span><span class='line'>         return 0
</span><span class='line'>     else:
</span><span class='line'>-        return list_in.pop() + sum(list_in)
</span><span class='line'>+        return list_in.pop() + summer(list_in)
</span><span class='line'>Stage this hunk [y,n,q,a,d,/,s,e,?]? </span></code></pre></td></tr></table></div></figure>


<p>Our changes aren&#8217;t in the right hunks, so we&#8217;ll pick <code>s</code> to split them.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Stage this hunk [y,n,q,a,d,/,s,e,?]? s
</span><span class='line'>Split into 3 hunks.
</span><span class='line'>@@ -1,2 +1,2 @@
</span><span class='line'>-def sum(list_in):
</span><span class='line'>+def summer(list_in):
</span><span class='line'>     """ Returns the sum of elements of a list."""
</span><span class='line'>Stage this hunk [y,n,q,a,d,/,j,J,g,e,?]? </span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s deal with the naming issue first.  <code>y</code>.  Next up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@@ -2,4 +2,4 @@
</span><span class='line'>     """ Returns the sum of elements of a list."""
</span><span class='line'>-    if list_in == []:
</span><span class='line'>+    if not list_in:
</span><span class='line'>         return 0
</span><span class='line'>     else:</span></code></pre></td></tr></table></div></figure>


<p>This one&#8217;s different. <code>n</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Stage this hunk [y,n,q,a,d,/,K,j,J,g,e,?]? n
</span><span class='line'>@@ -4,3 +4,3 @@
</span><span class='line'>         return 0
</span><span class='line'>     else:
</span><span class='line'>-        return list_in.pop() + sum(list_in)
</span><span class='line'>+        return list_in.pop() + summer(list_in)</span></code></pre></td></tr></table></div></figure>


<p>Back to the naming issue.  <code>y</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum [master *+]\ ⚲git commit -m "fix naming to not conflict with builtin"
</span><span class='line'>[master caaa300] fix naming to not conflict with builtin
</span><span class='line'> 1 file changed, 2 insertions(+), 2 deletions(-)</span></code></pre></td></tr></table></div></figure>


<p> Now we can repeat this process for our other change.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> sum [master *]\ ⚲git add -p
</span><span class='line'>diff --git a/sum.py b/sum.py
</span><span class='line'>index 77676b1..6d000f7 100644
</span><span class='line'>--- a/sum.py
</span><span class='line'>+++ b/sum.py
</span><span class='line'>@@ -1,6 +1,6 @@
</span><span class='line'> def summer(list_in):
</span><span class='line'>     """ Returns the sum of elements of a list."""
</span><span class='line'>-    if list_in == []:
</span><span class='line'>+    if not list_in:
</span><span class='line'>         return 0
</span><span class='line'>     else:
</span><span class='line'>         return list_in.pop() + summer(list_in)
</span><span class='line'>Stage this hunk [y,n,q,a,d,/,e,?]? </span></code></pre></td></tr></table></div></figure>


<p>This is our only hunk now, so <code>y</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum [master +]\ ⚲git commit -m "use falseyness of empty list"
</span><span class='line'>[master 5209728] use falseyness of empty list
</span><span class='line'> 1 file changed, 1 insertion(+), 1 deletion(-)</span></code></pre></td></tr></table></div></figure>


<p>Of course, you may not want your commits to be quite <em>this</em> granular - but hopefully the example has demonstrated the strength of <code>git add -p</code> in creating single-concept commits.</p>
]]></content>
  </entry>
  
</feed>
