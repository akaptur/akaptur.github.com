<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python, | Allison Kaptur]]></title>
  <link href="http://akaptur.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://akaptur.github.com/"/>
  <updated>2014-08-18T12:16:02-04:00</updated>
  <id>http://akaptur.github.com/</id>
  <author>
    <name><![CDATA[akaptur]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Of Syntax Warnings and Symbol Tables]]></title>
    <link href="http://akaptur.github.com/blog/2014/06/11/of-syntax-warnings-and-symbol-tables/"/>
    <updated>2014-06-11T18:30:00-04:00</updated>
    <id>http://akaptur.github.com/blog/2014/06/11/of-syntax-warnings-and-symbol-tables</id>
    <content type="html"><![CDATA[<p>A Hacker Schooler hit an interesting bug today: her program would sometimes emit the message <code>SyntaxWarning: import * only allowed at module level</code>.  I had never seen a <code>SyntaxWarning</code> before, so I decided to dig in.</p>

<p>The wording of the warning is strange: it says that star-import is only <em>allowed</em> at the module level, but it&rsquo;s not a syntax error, just a warning.  In fact, you can use a star-import in a scope that isn&rsquo;t a module (in Python 2):</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>def nope():
&hellip;     from random import *
&hellip;     print randint(1,10)
&hellip;
<stdin>:1: SyntaxWarning: import * only allowed at module level
nope()
7
```</p></blockquote></blockquote></blockquote>

<p>The Python <a href="https://docs.python.org/2/reference/simple_stmts.html?highlight=import#the-import-statement">spec</a> gives some more details:</p>

<blockquote><p>The from form with * may only occur in a module scope. If the wild card form of import — import * — is used in a function and the function contains or is a nested block with free variables, the compiler will raise a SyntaxError.</p></blockquote>

<p>Just having <code>import *</code> in a function isn&rsquo;t enough to raise a syntax error &ndash; we also need free variables. The <a href="https://docs.python.org/2.7/reference/executionmodel.html">Python execution model</a> refers to three kinds of variables, &lsquo;local,&rsquo; &lsquo;global,&rsquo; and &lsquo;free&rsquo;, defined as follows:</p>

<blockquote><p>If a name is bound in a block, it is a local variable of that block. If a name is bound at the module level, it is a global variable. (The variables of the module code block are local and global.) If a variable is used in a code block but not defined there, it is a free variable.</p></blockquote>

<p>Now we can see how to trigger a syntax error from our syntax warning:</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>def one():
&hellip;     def two():
&hellip;         from random import *
&hellip;         print randint(1,10)
&hellip;     two()
&hellip;
<stdin>:2: SyntaxWarning: import * only allowed at module level
  File &ldquo;<stdin>&rdquo;, line 3
SyntaxError: import * is not allowed in function &lsquo;two&rsquo; because it is a nested function
```</p></blockquote></blockquote></blockquote>

<p>and similarly,</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>def one():
&hellip;     from random import *
&hellip;     def two():
&hellip;         print randint(1,10)
&hellip;     two()
&hellip;
<stdin>:1: SyntaxWarning: import * only allowed at module level
  File &ldquo;<stdin>&rdquo;, line 2
SyntaxError: import * is not allowed in function &lsquo;one&rsquo; because it contains a nested function with free variables
```</p></blockquote></blockquote></blockquote>

<p>As Python programmers, we&rsquo;re used to our lovely dynamic language, and it&rsquo;s unusual to hit compile-time constraints.  As <a href="https://twitter.com/amygdalama">Amy Hanlon</a> points out, it&rsquo;s particularly weird to hit a compile-time error for code that wouldn&rsquo;t raise a NameError when it ran &ndash; <code>randint</code> would indeed be in <code>one</code>&rsquo;s namespace if the import-star had executed.</p>

<p>But we can&rsquo;t run code that doesn&rsquo;t compile, and in this case the compiler doesn&rsquo;t have enough information to determine what bytecode to emit. There are different opcodes for loading and storing each of global, free, and local variables. A variable&rsquo;s status as global, free, or local must be determined at compile time and then stored in the symbol table.</p>

<p>To investigate this, let&rsquo;s look at minor variations on this code snippet and disassemble them.</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>code_type = type((lambda: 1).<strong>code</strong>) # just a handle on the code type, which isn&rsquo;t exposed as a builtin</p>

<h1>A helper function to disassemble nested functions</h1>

<p>def recur_dis(fn):
&hellip;     print(fn.<strong>code</strong>)
&hellip;     dis.dis(fn)
&hellip;     for const in fn.<strong>code</strong>.co_consts:
&hellip;         if isinstance(const, code_type):
&hellip;             print
&hellip;             print
&hellip;             print(const)
&hellip;             dis.dis(const)
```</p></blockquote></blockquote></blockquote>

<p>First, when <code>x</code> is local, the compiler emits <code>STORE_FAST</code> in the assignment statement and <code>LOAD_FAST</code> to load it, marked with arrows below.</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>def one():
&hellip;     def two():
&hellip;         x = 1
&hellip;         print x
&hellip;     two()
recur_dis(one)
<code object one at 0x10e246730, file "<stdin>&ldquo;, line 1>
  2           0 LOAD_CONST               1 (<code object two at 0x10e246030, file "<stdin>&rdquo;, line 2>)</p>

<pre><code>          3 MAKE_FUNCTION            0
          6 STORE_FAST               0 (two)
</code></pre></blockquote></blockquote></blockquote>

<p>  5           9 LOAD_FAST                0 (two)</p>

<pre><code>         12 CALL_FUNCTION            0
         15 POP_TOP
         16 LOAD_CONST               0 (None)
         19 RETURN_VALUE
</code></pre>

<p><code object two at 0x10e246030, file "<stdin>&ldquo;, line 2>
  3           0 LOAD_CONST               1 (1)</p>

<pre><code>          3 STORE_FAST               0 (x)          &lt;---- STORE_FAST
</code></pre>

<p>  4           6 LOAD_FAST                0 (x)          &lt;&mdash;&mdash;&ndash; LOAD_FAST</p>

<pre><code>          9 PRINT_ITEM
         10 PRINT_NEWLINE
         11 LOAD_CONST               0 (None)
         14 RETURN_VALUE
</code></pre>

<p>```</p>

<p>When <code>x</code> is global, the compiler emits <code>LOAD_GLOBAL</code> to load it.  I think the assignment is <code>STORE_FAST</code> again, but it&rsquo;s not pictured here because the assignment is outside the function and thus not disassembled.</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>x = 1
def one():
&hellip;     def two():
&hellip;         print x
&hellip;     two()
&hellip;
recur_dis(one)
<code object one at 0x10e246730, file "<stdin>&ldquo;, line 1>
  2           0 LOAD_CONST               1 (<code object two at 0x10e2464b0, file "<stdin>&rdquo;, line 2>)</p>

<pre><code>          3 MAKE_FUNCTION            0
          6 STORE_FAST               0 (two)
</code></pre></blockquote></blockquote></blockquote>

<p>  4           9 LOAD_FAST                0 (two)</p>

<pre><code>         12 CALL_FUNCTION            0
         15 POP_TOP
         16 LOAD_CONST               0 (None)
         19 RETURN_VALUE
</code></pre>

<p><code object two at 0x10e2464b0, file "<stdin>&ldquo;, line 2>
  3           0 LOAD_GLOBAL              0 (x)          &lt;&mdash;&mdash;&ndash; LOAD_GLOBAL</p>

<pre><code>          3 PRINT_ITEM
          4 PRINT_NEWLINE
          5 LOAD_CONST               0 (None)
          8 RETURN_VALUE
</code></pre>

<p>```</p>

<p>Finally, when <code>x</code> is nonlocal, the compiler notices that we&rsquo;ll need a closure, and emits the opcodes <code>LOAD_CLOSURE</code>, <code>MAKE_CLOSURE</code>, and later <code>LOAD_DEREF</code>.</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>def one():
&hellip;     x = 1
&hellip;     def two():
&hellip;        print x
&hellip;     two()
&hellip;
recur_dis(one)
<code object one at 0x10e246e30, file "<stdin>&ldquo;, line 1>
  2           0 LOAD_CONST               1 (1)</p>

<pre><code>          3 STORE_DEREF              0 (x)          &lt;----- STORE_DEREF
</code></pre></blockquote></blockquote></blockquote>

<p>  3           6 LOAD_CLOSURE             0 (x)          &lt;&mdash;&mdash;&ndash; LOAD_CLOSURE</p>

<pre><code>          9 BUILD_TUPLE              1
         12 LOAD_CONST               2 (&lt;code object two at 0x10e246d30, file "&lt;stdin&gt;", line 3&gt;)
         15 MAKE_CLOSURE             0
         18 STORE_FAST               0 (two)
</code></pre>

<p>  5          21 LOAD_FAST                0 (two)</p>

<pre><code>         24 CALL_FUNCTION            0
         27 POP_TOP
         28 LOAD_CONST               0 (None)
         31 RETURN_VALUE
</code></pre>

<p><code object two at 0x10e246d30, file "<stdin>&ldquo;, line 3>
  4           0 LOAD_DEREF               0 (x)          &lt;&mdash;&mdash;&ndash; LOAD_DEREF</p>

<pre><code>          3 PRINT_ITEM
          4 PRINT_NEWLINE
          5 LOAD_CONST               0 (None)
          8 RETURN_VALUE
</code></pre>

<p>```</p>

<p>Let&rsquo;s now return to a case that throws a syntax error.</p>

<p>```</p>

<blockquote><blockquote><blockquote><p>def one():
&hellip;      from random import *
&hellip;      def two():
&hellip;          print x
&hellip;      two()
&hellip;
<stdin>:1: SyntaxWarning: import * only allowed at module level
  File &ldquo;<stdin>&rdquo;, line 2
SyntaxError: import * is not allowed in function &lsquo;one&rsquo; because it contains a nested function with free variables
```</p></blockquote></blockquote></blockquote>

<p>I&rsquo;d love to show what the disassembled bytecode for this one looks like, but we can&rsquo;t do that because there is no bytecode! We got a compile-time error, so there&rsquo;s nothing here.</p>

<h3>Further reading</h3>

<p>Everything I know about symbol tables I learned from <a href="http://eli.thegreenplace.net/2010/09/18/python-internals-symbol-tables-part-1/">Eli Bendersky&rsquo;s blog</a>. I&rsquo;ve skipped some complexity in the implementation that Eli covers.</p>

<p><code>ack</code>ing through the source code of CPython for the text of the error message leads us right to <code>symtable.c</code>, which is exactly where we&rsquo;d expect this message to be emitted. The function <code>check_unoptimized</code> shows where the syntax error gets thrown (and shows another illegal construct, too &ndash; but we&rsquo;ll leave that one as an exercise for the reader).</p>

<p>p.s. In Python 3, <code>import *</code> anywhere other than a module is just an unqualified syntax error &ndash; none of this messing around with the symbol table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Python Interpreter, Part 2: Code Objects]]></title>
    <link href="http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter-2/"/>
    <updated>2013-11-15T19:22:00-05:00</updated>
    <id>http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter-2</id>
    <content type="html"><![CDATA[<p>This is part of a <a href="/blog/categories/python-internals">series</a> on the python interpreter.
Part 1 <a href="/blog/2013/11/15/introduction-to-the-python-interpreter/">here</a>.</p>

<p>When we left our heroes, they were examining a simple function object.  Let&rsquo;s now dive a level deeper, and look at this function&rsquo;s code object.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>def foo(a):
&hellip;     x = 3
&hellip;     return x + a
&hellip;
foo
<function foo at 0x107ef7aa0>
foo.func_code
<code object foo at 0x107eeccb0, file "<stdin>&ldquo;, line 1>
```</p></blockquote></blockquote></blockquote>

<p>As you can see in the code above, the code object is an attribute of the function object.  (There are lots of other attributes on the function object, too. They&rsquo;re mostly not interesting because <code>foo</code> is so simple.)</p>

<p>A code object is generated by the Python compiler and intepreted by the interpreter.  It contains information that this interpreter needs to do its job. Let&rsquo;s look at the attributes of the code object.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>dir(foo.func_code)
[&lsquo;<strong>class</strong>&rsquo;, &lsquo;<strong>cmp</strong>&rsquo;, &lsquo;<strong>delattr</strong>&rsquo;, &lsquo;<strong>doc</strong>&rsquo;, &lsquo;<strong>eq</strong>&rsquo;, &lsquo;<strong>format</strong>&rsquo;, &lsquo;<strong>ge</strong>&rsquo;,
&lsquo;<strong>getattribute</strong>&rsquo;, &lsquo;<strong>gt</strong>&rsquo;, &lsquo;<strong>hash</strong>&rsquo;, &lsquo;<strong>init</strong>&rsquo;, &lsquo;<strong>le</strong>&rsquo;, &lsquo;<strong>lt</strong>&rsquo;, &lsquo;<strong>ne</strong>&rsquo;, &lsquo;<strong>new</strong>&rsquo;,
&lsquo;<strong>reduce</strong>&rsquo;, &lsquo;<strong>reduce_ex</strong>&rsquo;, &lsquo;<strong>repr</strong>&rsquo;, &lsquo;<strong>setattr</strong>&rsquo;, &lsquo;<strong>sizeof</strong>&rsquo;, &lsquo;<strong>str</strong>&rsquo;,
&lsquo;<strong>subclasshook</strong>&rsquo;, &lsquo;co_argcount&rsquo;, &lsquo;co_cellvars&rsquo;, &lsquo;co_code&rsquo;, &lsquo;co_consts&rsquo;, &lsquo;co_filename&rsquo;,
&lsquo;co_firstlineno&rsquo;, &lsquo;co_flags&rsquo;, &lsquo;co_freevars&rsquo;, &lsquo;co_lnotab&rsquo;, &lsquo;co_name&rsquo;, &lsquo;co_names&rsquo;, &lsquo;co_nlocals&rsquo;,
&lsquo;co_stacksize&rsquo;, &lsquo;co_varnames&rsquo;]
```</p></blockquote></blockquote></blockquote>

<p>There&rsquo;s a bunch of stuff going on here, much of which we&rsquo;re not going to worry about today.  Let&rsquo;s take a look at three attributes that are interesting to us for our code object on <code>foo</code>.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>foo.func_code.co_varnames
(&lsquo;a&rsquo;, &lsquo;x&rsquo;)
foo.func_code.co_consts
(None, 3)
foo.func_code.co_argcount
1
```</p></blockquote></blockquote></blockquote>

<p>Here are some intelligible-looking things: the names of the variables and the constants that our function knows about and the number of arguments the function takes.  But so far, we haven&rsquo;t seen anything that looks like instructions for how to execute the code object.  These instructions are called <em>bytecode</em>.  Bytecode is an attribute of the code object:</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>foo.func_code.co_code
&rsquo;d\x01\x00}\x01\x00|\x01\x00|\x00\x00\x17S'
```</p></blockquote></blockquote></blockquote>

<p>So much for our intelligible-looking things.  What&rsquo;s going on here?  We&rsquo;ll dive in to bytecode in Part 3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Python Interpreter, Part 1: Function Objects]]></title>
    <link href="http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter/"/>
    <updated>2013-11-15T18:50:00-05:00</updated>
    <id>http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter</id>
    <content type="html"><![CDATA[<p>Over the last three months, I&rsquo;ve spent a lot of time working with Ned Batchelder on <a href="https://github.com/nedbat/byterun">byterun</a>, a python bytecode interpreter written in python.  Working on byterun has been tremendously educational and a lot of fun for me.  At the end of this series, I&rsquo;m going to attempt to convince you that it would be interesting and fun for you to play with byterun, too.  But before we do that, we need a bit of a warm-up: an overview of how python&rsquo;s internals work, so that we can understand what an interpreter is, what it does, and what it doesn&rsquo;t do.</p>

<p>This series assumes that you&rsquo;re in a similar position to where I was three months ago: you know python, but you don&rsquo;t know anything about the internals.</p>

<p>One quick note: I&rsquo;m going to work in and talk about Python 2.7 in this post.  The interpreter in Python 3 is mostly pretty similar.  There are also some syntax and naming differences, which I&rsquo;m going to ignore, but everything we do here is possible in Python 3 as well.</p>

<h3>How does it python?</h3>

<p>We&rsquo;ll start out with a really (really) high-level view of python&rsquo;s internals.  What happens when you execute a line of code in your python REPL?</p>

<p>```python
~ $ python
Python 2.7.2 (default, Jun 20 2012, 16:23:33)
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>a = &ldquo;hello&rdquo;
```</p></blockquote></blockquote></blockquote>

<p>There are four steps that python takes when you hit return: lexing, parsing, compiling, and interpreting. Lexing is breaking the line of code you just typed into tokens.  The parser takes those tokens and generates a structure that shows their relationship to each other (in this case, an Abstract Syntax Tree).  The compiler then takes the AST and turns it into one (or more) code objects.  Finally, the interpreter takes each code object executes the code it represents.</p>

<p>I&rsquo;m not going to talk about lexing, parsing, or compiling at all today, mainly because I don&rsquo;t know anything about these steps yet.  Instead, we&rsquo;ll suppose that all that went just fine, and we&rsquo;ll have a proper python code object for the interpreter to interpret.</p>

<p>Before we get to code objects, let me clear up some common confusion.  In this series, we&rsquo;re going to talk about function objects, code objects, and bytecode. They&rsquo;re all different things.  Let&rsquo;s start with function objects.  We don&rsquo;t really have to understand function objects to get to the interpreter, but I want to stress that function objects and code objects are not the same &ndash; and besides, function objects are cool.</p>

<h3>Function objects</h3>

<p>You might have heard of &ldquo;function objects.&rdquo;  These are the things people are talking about when they say things like &ldquo;Functions are first-class objects,&rdquo; or &ldquo;Python has first-class functions.&rdquo;  Let&rsquo;s take a look at one.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>def foo(a):
&hellip;     x = 3
&hellip;     return x + a
&hellip;
foo
<function foo at 0x107ef7aa0>
```</p></blockquote></blockquote></blockquote>

<p>&ldquo;Functions are first-class objects,&rdquo; means that function are objects, like a list is an object or an instance of <code>MyObject</code> is an object.  Since <code>foo</code> is an object, we can talk about it without invoking it (that is, there&rsquo;s a difference between <code>foo</code> and <code>foo()</code>).  We can pass <code>foo</code> into another function as an argument, or we could bind it to a new name (<code>other_function = foo</code>). With first-class functions, all sorts of possibilities are open to us!</p>

<p>In Part 2, we&rsquo;ll dive down a level and look at the code object.</p>
]]></content>
  </entry>
  
</feed>
