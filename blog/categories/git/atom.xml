<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Of Interest]]></title>
  <link href="http://akaptur.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://akaptur.github.com/"/>
  <updated>2013-11-01T21:47:41-04:00</updated>
  <id>http://akaptur.github.com/</id>
  <author>
    <name><![CDATA[akaptur]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git add -p: The Wave of the Future]]></title>
    <link href="http://akaptur.github.com/blog/2012/12/18/git-add-p-the-wave-of-the-future/"/>
    <updated>2012-12-18T16:12:00-05:00</updated>
    <id>http://akaptur.github.com/blog/2012/12/18/git-add-p-the-wave-of-the-future</id>
    <content type="html"><![CDATA[<p>I recently started using git&rsquo;s patch mode via <code>git add -p</code>. Patch mode makes my commits more granular, which means my commit messages are more accurate.  Better still, patch mode allows you to abstract away from adding &ldquo;files&rdquo; &ndash; you&rsquo;re adding changes to be committed.  This is a closer mental model to what git is actually doing.  I&rsquo;m finding it particularly useful for code review: make several changes in a friend&rsquo;s program, group the changes by concept, and commit one concept at a time.</p>

<p>That&rsquo;s the why &ndash; here&rsquo;s the how.</p>

<p><code>git add -p</code> launches what git calls the &ldquo;interactive hunk selector.&rdquo;  This leads me to my other favorite reason to use -p: besides being useful, all the <a href="http://www.kernel.org/pub/software/scm/git/docs/git-add.html">docs</a> sound like an episode of The Bachelorette.  &ldquo;Once you have decided the fate of all the hunks, if there is any hunk that is chosen, the index is updated with the selected hunks.&rdquo; And if not, our bachelorette takes the million dollars!</p>

<p>In practice, I only end up using three of the interactive hunk selector options: [y]es, [n]o, and [s]plit.  Split takes the current hunk and divides it into smaller hunks, then presents them for selection one at a time.  (If you&rsquo;re attempting to continue the Bachelorette metaphor, now is a good time to stop.)</p>

<p>Let&rsquo;s look at an example.  Suppose I&rsquo;m working on a function that recursively calculates the sum of element of a list.  My first draft looks like this:
```
def sum(list_in):</p>

<pre><code>""" Returns the sum of elements of a list."""
if list_in == []:
    return 0
else:
    return list_in.pop() + sum(list_in)
</code></pre>

<p>```</p>

<p>Not bad, but it&rsquo;s a little verbose.  Let&rsquo;s take advantage of the fact that an empty list is falsey.  And, oops, we&rsquo;re overwriting the built-in <code>sum</code> function in python &ndash; we probably don&rsquo;t want to do that.
```
def summer(list_in):</p>

<pre><code>""" Returns the sum of elements of a list."""
if not list_in:
    return 0
else:
    return list_in.pop() + summer(list_in)
</code></pre>

<p><code>
Ok, these are two different thoughts, but we didn't commit in between.  Interactive mode to the rescue - let's stage those hunks.
</code>
sum [master]\ ⚲git add -p
diff &mdash;git a/sum.py b/sum.py
index fdccd3f..6d000f7 100644
&mdash;&ndash; a/sum.py
+++ b/sum.py
@@ -1,6 +1,6 @@
-def sum(list_in):
+def summer(list_in):</p>

<pre><code> """ Returns the sum of elements of a list."""
</code></pre>

<ul>
<li> if list_in == []:</li>
<li> if not list_in:
     return 0
 else:</li>
<li><pre><code> return list_in.pop() + sum(list_in)
</code></pre></li>
<li><pre><code> return list_in.pop() + summer(list_in)
</code></pre>

<p>Stage this hunk [y,n,q,a,d,/,s,e,?]?
<code>
Our changes aren't in the right hunks, so we'll pick `s` to split them.  
</code>
Stage this hunk [y,n,q,a,d,/,s,e,?]? s
Split into 3 hunks.
@@ -1,2 +1,2 @@
-def sum(list_in):
+def summer(list_in):
 &ldquo;&rdquo;&ldquo; Returns the sum of elements of a list.&rdquo;&ldquo;&rdquo;
Stage this hunk [y,n,q,a,d,/,j,J,g,e,?]?
<code>
Let's deal with the naming issue first.  `y`.  Next up:
</code>
@@ -2,4 +2,4 @@
 &ldquo;&rdquo;&ldquo; Returns the sum of elements of a list.&rdquo;&ldquo;&rdquo;</p></li>
<li> if list_in == []:</li>
<li> if not list_in:
     return 0
 else:
<code>
This one's different. `n`.
</code>
Stage this hunk [y,n,q,a,d,/,K,j,J,g,e,?]? n
@@ -4,3 +4,3 @@
     return 0
 else:</li>
<li><pre><code> return list_in.pop() + sum(list_in)
</code></pre></li>
<li><pre><code> return list_in.pop() + summer(list_in)
</code></pre>

<p><code>
Back to the naming issue.  `y`.
</code>
sum [master <em>+]\ ⚲git commit -m &ldquo;fix naming to not conflict with builtin&rdquo;
[master caaa300] fix naming to not conflict with builtin
1 file changed, 2 insertions(+), 2 deletions(&ndash;)
<code>
Now we can repeat this process for our other change.
</code>
sum [master </em>]\ ⚲git add -p
diff &mdash;git a/sum.py b/sum.py
index 77676b1..6d000f7 100644
&mdash;&ndash; a/sum.py
+++ b/sum.py
@@ -1,6 +1,6 @@
def summer(list_in):
 &ldquo;&rdquo;&ldquo; Returns the sum of elements of a list.&rdquo;&ldquo;&rdquo;</p></li>
<li> if list_in == []:</li>
<li> if not list_in:
     return 0
 else:
     return list_in.pop() + summer(list_in)
Stage this hunk [y,n,q,a,d,/,e,?]?
<code>
This is our only hunk now, so `y`.
</code>
sum [master +]\ ⚲git commit -m &ldquo;use falseyness of empty list&rdquo;
[master 5209728] use falseyness of empty list
1 file changed, 1 insertion(+), 1 deletion(&ndash;)
```</li>
</ul>


<p>Of course, you may not want your commits to be quite <em>this</em> granular &ndash; but hopefully the example has demonstrated the strength of <code>git add -p</code> in creating single-concept commits.</p>
]]></content>
  </entry>
  
</feed>
