<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python-internals | Allison Kaptur]]></title>
  <link href="http://akaptur.github.com/blog/categories/python-internals/atom.xml" rel="self"/>
  <link href="http://akaptur.github.com/"/>
  <updated>2014-08-03T11:03:15-04:00</updated>
  <id>http://akaptur.github.com/</id>
  <author>
    <name><![CDATA[akaptur]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The CPython Peephole Optimizer and You]]></title>
    <link href="http://akaptur.github.com/blog/2014/08/02/the-cpython-peephole-optimizer-and-you/"/>
    <updated>2014-08-02T11:25:00-04:00</updated>
    <id>http://akaptur.github.com/blog/2014/08/02/the-cpython-peephole-optimizer-and-you</id>
    <content type="html"><![CDATA[<p>Last Thursday I gave a lightning talk at <a href="//www.hackerschool.com">Hacker School</a> about the peephole optimizer in Python.  A &ldquo;peephole optimization&rdquo; is a compiler optimization that looks at a small chunk of code at a time and optimizes in that little spot. This post explains one surprising side-effect of an optimization in CPython.</p>

<h2>Writing a test coverage tool</h2>

<p>Suppose that we&rsquo;re setting out to write a test coverage tool. Python provides an easy way to trace execution using <code>sys.settrace</code>, so a simple version of a coverage analyzer isn&rsquo;t too hard.</p>

<p>Our code to test is one simple function:</p>

<p>``` python example.py
def iffer(condition):</p>

<pre><code>if condition:
    return 3
else:
    return 10
</code></pre>

<p>```</p>

<p>Then we&rsquo;ll write the world&rsquo;s simplest testing framework:</p>

<p>``` python tests.py
from example import iffer</p>

<p>def test_iffer():</p>

<pre><code>assert iffer(True) == 3
assert iffer(False) == 10
</code></pre>

<p>def run_tests():</p>

<pre><code>test_iffer()
</code></pre>

<p>```</p>

<p>Now for the simplest possible coverage tool. We can pass <code>sys.settrace</code> any tracing function, and it&rsquo;ll be called with the arguments <code>frame</code>, <code>event</code>, and <code>arg</code> every time an event happens in the execution.  Lines of code being executed, function calls, function returns, and exceptions are all events. We&rsquo;ll filter out everything but <code>line</code> and <code>call</code> events, then keep track of what line of code was executing.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Then we run the tests while the trace function is tracing, and finally report which (non-empty lines) failed to execute.</p>

<p>``` python coverage.py
import sys
import tests
import inspect</p>

<p>class TinyCoverage(object):</p>

<pre><code>def __init__(self, file_to_watch):
    self.source_file = file_to_watch
    self.source_code = open(file_to_watch).readlines()
    self.executed_code = []

def trace(self, frame, event, arg):
    current_file = inspect.getframeinfo(frame).filename

    if self.source_file in current_file and \
        (event == "line" or event == "call"):

        self.executed_code.append(frame.f_lineno)

    return self.trace

def unexecuted_code(self):
    skipped = []
    for line_num in range(1, len(self.source_code)+1):
        if line_num not in self.executed_code:
            src = self.source_code[line_num - 1]
            if src != "\n":
                skipped.append(line_num)
    return skipped

def report(self):
    skipped = self.unexecuted_code()
    percent_skipped = float(len(skipped)) / len(self.source_code)
    if skipped:
        print "{} line(s) did not execute ({:.0%})".format(len(skipped), percent_skipped)
        for line_num in skipped:
            print line_num, self.source_code[line_num - 1]
    else:
        print "100% coverage, go you!"
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>t = TinyCoverage('example.py')
sys.settrace(t.trace)
tests.run_tests()
sys.settrace(None)
t.report()
</code></pre>

<p>```</p>

<p>Let&rsquo;s try it.  We&rsquo;re pretty confident in our test coverage &ndash; there are only two branches in the code, and we&rsquo;ve tested both of them.</p>

<p><code>text
peephole [master *] ⚲ python coverage.py
1 line(s) did not execute (9%)
4     else:
</code></p>

<p>Why didn&rsquo;t the <code>else</code> line execute? To answer this, we&rsquo;ll run our function through the disassembler.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>```</p>

<blockquote><blockquote><blockquote><p>from example import iffer
import dis
dis.dis(iffer)
  2           0 LOAD_FAST                0 (condition)</p>

<pre><code>          3 POP_JUMP_IF_FALSE       10
</code></pre></blockquote></blockquote></blockquote>

<p>  3           6 LOAD_CONST               1 (3)</p>

<pre><code>          9 RETURN_VALUE
</code></pre>

<p>  5     >>   10 LOAD_CONST               2 (10)</p>

<pre><code>         13 RETURN_VALUE
         14 LOAD_CONST               0 (None)
         17 RETURN_VALUE
</code></pre>

<p>```</p>

<p>You don&rsquo;t need to follow exactly what&rsquo;s going on in this bytecode, but note that the first column is the line numbers of source code and line 4, the one containing the <code>else</code>, doesn&rsquo;t appear. Why not? Well, there&rsquo;s nothing to <em>do</em> with an else statement &ndash; it&rsquo;s just a separator between two branches of an <code>if</code> statement. The second line in the disassembly, <code>POP_JUMP_IF_FALSE   10</code>, means that the interpreter will pop the top thing off of the virtual machine stack, jump to bytecode index ten if that thing is false, or continue with the next instruction if it&rsquo;s true.</p>

<p>From the bytecode&rsquo;s perspective, there&rsquo;s no difference at all between writing this:
``` python
if a:</p>

<pre><code>...
</code></pre>

<p>else:</p>

<pre><code>if b:
   ...
else:
    ...
</code></pre>

<p>```</p>

<p>and this:</p>

<p>```python
if a:</p>

<pre><code>...
</code></pre>

<p>elif b:
   &hellip;
else:</p>

<pre><code>...
</code></pre>

<p>```
(even though the second is better style).</p>

<p>We&rsquo;ve learned we need to special-case <code>else</code> statements in our code coverage tool.  Since there&rsquo;s no logic in them, let&rsquo;s just drop lines that only contain <code>else:</code>. We can revise our <code>unexecuted_code</code> method accordingly:</p>

<p>``` python coverage.py</p>

<pre><code>def unexecuted_code(self):
    skipped = []
    for line_num in range(1, len(self.source_code)+1):
        if line_num not in self.executed_code:
            src = self.source_code[line_num - 1]
            if src != "\n" and "else:\n" not in src:  # Add "else" dropping
                skipped.append(line_num)
    return skipped
</code></pre>

<p>```</p>

<p>Then run it again:</p>

<p><code>text
peephole [master *] ⚲ python coverage.py
100% coverage, go you!
</code></p>

<p>Success!</p>

<h2>Complications arise</h2>

<p>Our previous example was really simple. Let&rsquo;s add a more complex one.</p>

<p>``` python example.py
def iffer(condition):</p>

<pre><code>if condition:
    return 3
else:
    return 10
</code></pre>

<p>def continuer():</p>

<pre><code>a = b = c = 0
for n in range(100):
    if n % 2:
        if n % 4:
            a += 1
        continue
    else:
        b += 1
    c += 1

return a, b, c
</code></pre>

<p>```</p>

<p><code>continuer</code> will increment <code>a</code> on all odd numbers and increment <code>b</code> and <code>c</code> for all even numbers. Don&rsquo;t forget to add a test:</p>

<p>``` python tests.py
import sys
import inspect
from example2 import iffer, continuer</p>

<p>def test_iffer():</p>

<pre><code>assert iffer(True) == 3
assert iffer(False) == 10
</code></pre>

<p>def test_continuer():</p>

<pre><code>assert continuer() == (50, 50, 50)
</code></pre>

<p>def run_tests():</p>

<pre><code>test_iffer()
test_continuer()
</code></pre>

<p>```</p>

<p><code>text
peephole [master *] ⚲ python coverage2.py
1 line(s) did not execute (4%)
13             continue
</code></p>

<p>Hmm. The test we wrote certainly did involve the <code>continue</code> statement &ndash; if the interpreter hadn&rsquo;t skipped the bottom half of the loop, the test wouldn&rsquo;t have passed. Let&rsquo;s use the strategy we used before to understand what&rsquo;s happening: examining the output of the disassembler.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>dis.dis(continuer)
  8           0 LOAD_CONST               1 (0)</p>

<pre><code>          3 DUP_TOP
          4 STORE_FAST               0 (a)
          7 DUP_TOP
          8 STORE_FAST               1 (b)
         11 STORE_FAST               2 (c)
</code></pre></blockquote></blockquote></blockquote>

<p>  9          14 SETUP_LOOP              79 (to 96)</p>

<pre><code>         17 LOAD_GLOBAL              0 (range)
         20 LOAD_CONST               2 (100)
         23 CALL_FUNCTION            1
         26 GET_ITER
    &gt;&gt;   27 FOR_ITER                65 (to 95)
         30 STORE_FAST               3 (n)
</code></pre>

<p> 10          33 LOAD_FAST                3 (n)</p>

<pre><code>         36 LOAD_CONST               3 (2)
         39 BINARY_MODULO
         40 POP_JUMP_IF_FALSE       72
</code></pre>

<p> 11          43 LOAD_FAST                3 (n)</p>

<pre><code>         46 LOAD_CONST               4 (4)
         49 BINARY_MODULO
         50 POP_JUMP_IF_FALSE       27
</code></pre>

<p> 12          53 LOAD_FAST                0 (a)</p>

<pre><code>         56 LOAD_CONST               5 (1)
         59 INPLACE_ADD
         60 STORE_FAST               0 (a)
         63 JUMP_ABSOLUTE           27
</code></pre>

<p> 13          66 JUMP_ABSOLUTE           27</p>

<pre><code>         69 JUMP_FORWARD            10 (to 82)
</code></pre>

<p> 15     >>   72 LOAD_FAST                1 (b)</p>

<pre><code>         75 LOAD_CONST               5 (1)
         78 INPLACE_ADD
         79 STORE_FAST               1 (b)
</code></pre>

<p> 16     >>   82 LOAD_FAST                2 &copy;</p>

<pre><code>         85 LOAD_CONST               5 (1)
         88 INPLACE_ADD
         89 STORE_FAST               2 (c)
         92 JUMP_ABSOLUTE           27
    &gt;&gt;   95 POP_BLOCK
</code></pre>

<p> 18     >>   96 LOAD_FAST                0 (a)</p>

<pre><code>         99 LOAD_FAST                1 (b)
        102 LOAD_FAST                2 (c)
        105 BUILD_TUPLE              3
        108 RETURN_VALUE
</code></pre>

<p>```</p>

<p>There&rsquo;s a lot more going on here, but you don&rsquo;t need to understand all of it to proceed. Here are the things we need to know to make sense of this:</p>

<ul>
<li>The second column in the output is the index in the bytecode, the third is the byte name, and the fourth is the argument.  The fifth, when present, is a hint about the meaning of the argument.</li>
<li><code>POP_JUMP_IF_FALSE</code>, <code>POP_JUMP_IF_TRUE</code>, and <code>JUMP_ABSOLUTE</code> have the jump target as their argument. So, e.g. <code>POP_JUMP_IF_TRUE 27</code> means &ldquo;if the popped expression is true, jump to position 27.&rdquo;</li>
<li><code>JUMP_FORWARD</code>&rsquo;s argument specifies the distance to jump forward in the bytecode, and the fifth column shows where the jump will end.</li>
<li>When an iterator is done, <code>FOR_ITER</code> jumps forward the number of bytes specified in its argument.</li>
</ul>


<p>Unlike the <code>else</code> case, the line containing the <code>continue</code> does appear in the bytecode. But trace through the bytecode using what you know about jumps: no matter how hard you try, you can&rsquo;t end up on bytes 66 or 69, the two that belong to line 13.</p>

<p>The <code>continue</code> is unreachable because of a compiler optimization. In this particular optimization, the compiler notices that two instructions in a row are jumps, and it combines these two hops into one larger jump. So, in a very real sense, the <code>continue</code> line didn&rsquo;t execute &ndash; it was optimized out &ndash; even though the logic reflected in the <code>continue</code> is still reflected in the bytecode.</p>

<p>What would this bytecode have looked like without the optimizations? There&rsquo;s not currently an option to disable the peephole bytecode optimizations, although there will be in a future version of Python (following an <a href="//mail.python.org/pipermail/python-ideas/2014-May/027893.html">extensive debate</a> on the python-dev list). For now, the only way to turn off optimizations is to comment out the relevant line in <code>compile.c</code>, the call to <code>PyCode_Optimize</code>, and recompile Python. Here&rsquo;s the diff, if you&rsquo;re playing along at home.</p>

<p>``` diff
cpython ⚲ hg diff
diff -r 77f36cdb71b0 Python/compile.c
&mdash;&ndash; a/Python/compile.c  Fri Aug 01 17:48:34 2014 +0200
+++ b/Python/compile.c  Sat Aug 02 15:43:45 2014 -0400
@@ -4256,10 +4256,6 @@</p>

<pre><code> if (flags &lt; 0)
     goto error;
</code></pre>

<ul>
<li> bytecode = PyCode_Optimize(a->a_bytecode, consts, names, a->a_lnotab);</li>
<li> if (!bytecode)

<h2>&ndash;        goto error;</h2>

<p> tmp = PyList_AsTuple(consts); /<em> PyCode_New requires a tuple </em>/
 if (!tmp)
     goto error;
@@ -4270,7 +4266,7 @@
 kwonlyargcount = Py_SAFE_DOWNCAST(c->u->u_kwonlyargcount, Py_ssize_t, int);
 co = PyCode_New(argcount, kwonlyargcount,
                 nlocals_int, stackdepth&copy;, flags,</p></li>
<li><pre><code>             bytecode, consts, names, varnames,
</code></pre></li>
<li><pre><code>             a-&gt;a_bytecode, consts, names, varnames,
             freevars, cellvars,
             c-&gt;c_filename, c-&gt;u-&gt;u_name,
             c-&gt;u-&gt;u_firstlineno,
</code></pre>

<p>```</p></li>
</ul>


<p>``` python</p>

<blockquote><blockquote><blockquote><p>dis.dis(continuer)
  8           0 LOAD_CONST               1 (0)</p>

<pre><code>          3 DUP_TOP
          4 STORE_FAST               0 (a)
          7 DUP_TOP
          8 STORE_FAST               1 (b)
         11 STORE_FAST               2 (c)
</code></pre></blockquote></blockquote></blockquote>

<p>  9          14 SETUP_LOOP              79 (to 96)</p>

<pre><code>         17 LOAD_GLOBAL              0 (range)
         20 LOAD_CONST               2 (100)
         23 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
         26 GET_ITER
    &gt;&gt;   27 FOR_ITER                65 (to 95)
         30 STORE_FAST               3 (n)
</code></pre>

<p>  10         33 LOAD_FAST                3 (n)</p>

<pre><code>         36 LOAD_CONST               3 (2)
         39 BINARY_MODULO
         40 POP_JUMP_IF_FALSE       72
</code></pre>

<p>  11         43 LOAD_FAST                3 (n)</p>

<pre><code>         46 LOAD_CONST               4 (4)
         49 BINARY_MODULO
         50 POP_JUMP_IF_FALSE       66
</code></pre>

<p>  12         53 LOAD_FAST                0 (a)</p>

<pre><code>         56 LOAD_CONST               5 (1)
         59 INPLACE_ADD
         60 STORE_FAST               0 (a)
         63 JUMP_FORWARD             0 (to 66)
</code></pre>

<p>  13    >>   66 JUMP_ABSOLUTE           27</p>

<pre><code>         69 JUMP_FORWARD            10 (to 82)
</code></pre>

<p>  14    >>   72 LOAD_FAST                1 (b)</p>

<pre><code>         75 LOAD_CONST               5 (1)
         78 INPLACE_ADD
         79 STORE_FAST               1 (b)
</code></pre>

<p>  15    >>   82 LOAD_FAST                2 &copy;</p>

<pre><code>         85 LOAD_CONST               5 (1)
         88 INPLACE_ADD
         89 STORE_FAST               2 (c)
         92 JUMP_ABSOLUTE           27
    &gt;&gt;   95 POP_BLOCK
</code></pre>

<p>  16    >>   96 LOAD_FAST                0 (a)</p>

<pre><code>         99 LOAD_FAST                1 (b)
        102 LOAD_FAST                2 (c)
        105 BUILD_TUPLE              3
        108 RETURN_VALUE
</code></pre>

<p>```</p>

<p>Just as we expected, the jump targets have changed. The instruction at position 50, <code>POP_JUMP_IF_FALSE</code>, now has 66 as its jump target &ndash; a previously unreachable instruction associated with the <code>continue</code>. Instruction 63, <code>JUMP_FORWARD</code>, is also targeting 66. In both cases, the only way to reach this instruction is to jump to it, and the instruction itself jumps away.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>Now we can run our coverage tool with the unoptimized Python:</p>

<p><code>text
peephole [master *+] ⚲ ../cpython/python.exe coverage2.py
100% coverage, go you!
</code></p>

<p>Complete success!</p>

<h2>So is this a good idea or not?</h2>

<p>Compiler optimizations are often a straightforward win.  If the compiler can apply simple rules that make my code faster without requiring work from me, that&rsquo;s great. Almost nobody requires a strict mapping of code that they write to code that ends up executing. So, peephole optimization in general: yes! Great!</p>

<p>But &ldquo;almost nobody&rdquo; is not nobody, and one kind of people who <em>do</em> require strict reasoning about executed code are the authors of test coverage software. In the <a href="//mail.python.org/pipermail/python-ideas/2014-May/027893.html">python-dev thread</a> I linked to earlier, there was an extensive discussion over whether or not serving this demographic by providing an option to disable to optimizations was worth increasing the complexity of the codebase. Ultimately it was decided that it was worthwhile, but this is a fair question to ask.</p>

<h2>Further reading</h2>

<p>Beyond the interesting Python-dev thread linked above, my other suggestions are mostly code. <a href="//hg.python.org/cpython/file/118d6f49d6d6/Python/peephole.c">CPython&rsquo;s <code>peephole.c</code></a> is pretty readable C code, and I encourage you to take a look at it. (&ldquo;Constant folding&rdquo; is a great place to start.) There&rsquo;s also a website <a href="//www.compileroptimizations.com/">compileroptimizations.com</a> which has short examples and discussion of 45 different optimizations. If you&rsquo;d like to play with these code examples, they&rsquo;re all available on my <a href="//github.com/akaptur/peephole-optimization">github</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>We need to include <code>call</code> events to capture the first line of a function declaration, <code>def fn(...):</code><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I&rsquo;ve previously written an introduction to the disassembler <a href="/blog/2013/11/17/introduction-to-the-python-interpreter-3/">here</a>.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>You may be wondering what the <code>JUMP_FORWARD</code> instruction at position 69 is doing.  This instruction does nothing unless a particular compiler optimization is turned on. The optimization support faster loops, but creates restrictions on what those loops can do. See <code>ceval.c</code> for more.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Of Syntax Warnings and Symbol Tables]]></title>
    <link href="http://akaptur.github.com/blog/2014/06/11/of-syntax-warnings-and-symbol-tables/"/>
    <updated>2014-06-11T18:30:00-04:00</updated>
    <id>http://akaptur.github.com/blog/2014/06/11/of-syntax-warnings-and-symbol-tables</id>
    <content type="html"><![CDATA[<p>A Hacker Schooler hit an interesting bug today: her program would sometimes emit the message <code>SyntaxWarning: import * only allowed at module level</code>.  I had never seen a <code>SyntaxWarning</code> before, so I decided to dig in.</p>

<p>The wording of the warning is strange: it says that star-import is only <em>allowed</em> at the module level, but it&rsquo;s not a syntax error, just a warning.  In fact, you can use a star-import in a scope that isn&rsquo;t a module (in Python 2):</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>def nope():
&hellip;     from random import *
&hellip;     print randint(1,10)
&hellip;
<stdin>:1: SyntaxWarning: import * only allowed at module level
nope()
7
```</p></blockquote></blockquote></blockquote>

<p>The Python <a href="https://docs.python.org/2/reference/simple_stmts.html?highlight=import#the-import-statement">spec</a> gives some more details:</p>

<blockquote><p>The from form with * may only occur in a module scope. If the wild card form of import — import * — is used in a function and the function contains or is a nested block with free variables, the compiler will raise a SyntaxError.</p></blockquote>

<p>Just having <code>import *</code> in a function isn&rsquo;t enough to raise a syntax error &ndash; we also need free variables. The <a href="https://docs.python.org/2.7/reference/executionmodel.html">Python execution model</a> refers to three kinds of variables, &lsquo;local,&rsquo; &lsquo;global,&rsquo; and &lsquo;free&rsquo;, defined as follows:</p>

<blockquote><p>If a name is bound in a block, it is a local variable of that block. If a name is bound at the module level, it is a global variable. (The variables of the module code block are local and global.) If a variable is used in a code block but not defined there, it is a free variable.</p></blockquote>

<p>Now we can see how to trigger a syntax error from our syntax warning:</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>def one():
&hellip;     def two():
&hellip;         from random import *
&hellip;         print randint(1,10)
&hellip;     two()
&hellip;
<stdin>:2: SyntaxWarning: import * only allowed at module level
  File &ldquo;<stdin>&rdquo;, line 3
SyntaxError: import * is not allowed in function &lsquo;two&rsquo; because it is a nested function
```</p></blockquote></blockquote></blockquote>

<p>and similarly,</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>def one():
&hellip;     from random import *
&hellip;     def two():
&hellip;         print randint(1,10)
&hellip;     two()
&hellip;
<stdin>:1: SyntaxWarning: import * only allowed at module level
  File &ldquo;<stdin>&rdquo;, line 2
SyntaxError: import * is not allowed in function &lsquo;one&rsquo; because it contains a nested function with free variables
```</p></blockquote></blockquote></blockquote>

<p>As Python programmers, we&rsquo;re used to our lovely dynamic language, and it&rsquo;s unusual to hit compile-time constraints.  As <a href="https://twitter.com/amygdalama">Amy Hanlon</a> points out, it&rsquo;s particularly weird to hit a compile-time error for code that wouldn&rsquo;t raise a NameError when it ran &ndash; <code>randint</code> would indeed be in <code>one</code>&rsquo;s namespace if the import-star had executed.</p>

<p>But we can&rsquo;t run code that doesn&rsquo;t compile, and in this case the compiler doesn&rsquo;t have enough information to determine what bytecode to emit. There are different opcodes for loading and storing each of global, free, and local variables. A variable&rsquo;s status as global, free, or local must be determined at compile time and then stored in the symbol table.</p>

<p>To investigate this, let&rsquo;s look at minor variations on this code snippet and disassemble them.</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>code_type = type((lambda: 1).<strong>code</strong>) # just a handle on the code type, which isn&rsquo;t exposed as a builtin</p>

<h1>A helper function to disassemble nested functions</h1>

<p>def recur_dis(fn):
&hellip;     print(fn.<strong>code</strong>)
&hellip;     dis.dis(fn)
&hellip;     for const in fn.<strong>code</strong>.co_consts:
&hellip;         if isinstance(const, code_type):
&hellip;             print
&hellip;             print
&hellip;             print(const)
&hellip;             dis.dis(const)
```</p></blockquote></blockquote></blockquote>

<p>First, when <code>x</code> is local, the compiler emits <code>STORE_FAST</code> in the assignment statement and <code>LOAD_FAST</code> to load it, marked with arrows below.</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>def one():
&hellip;     def two():
&hellip;         x = 1
&hellip;         print x
&hellip;     two()
recur_dis(one)
<code object one at 0x10e246730, file "<stdin>&ldquo;, line 1>
  2           0 LOAD_CONST               1 (<code object two at 0x10e246030, file "<stdin>&rdquo;, line 2>)</p>

<pre><code>          3 MAKE_FUNCTION            0
          6 STORE_FAST               0 (two)
</code></pre></blockquote></blockquote></blockquote>

<p>  5           9 LOAD_FAST                0 (two)</p>

<pre><code>         12 CALL_FUNCTION            0
         15 POP_TOP
         16 LOAD_CONST               0 (None)
         19 RETURN_VALUE
</code></pre>

<p><code object two at 0x10e246030, file "<stdin>&ldquo;, line 2>
  3           0 LOAD_CONST               1 (1)</p>

<pre><code>          3 STORE_FAST               0 (x)          &lt;---- STORE_FAST
</code></pre>

<p>  4           6 LOAD_FAST                0 (x)          &lt;&mdash;&mdash;&ndash; LOAD_FAST</p>

<pre><code>          9 PRINT_ITEM
         10 PRINT_NEWLINE
         11 LOAD_CONST               0 (None)
         14 RETURN_VALUE
</code></pre>

<p>```</p>

<p>When <code>x</code> is global, the compiler emits <code>LOAD_GLOBAL</code> to load it.  I think the assignment is <code>STORE_FAST</code> again, but it&rsquo;s not pictured here because the assignment is outside the function and thus not disassembled.</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>x = 1
def one():
&hellip;     def two():
&hellip;         print x
&hellip;     two()
&hellip;
recur_dis(one)
<code object one at 0x10e246730, file "<stdin>&ldquo;, line 1>
  2           0 LOAD_CONST               1 (<code object two at 0x10e2464b0, file "<stdin>&rdquo;, line 2>)</p>

<pre><code>          3 MAKE_FUNCTION            0
          6 STORE_FAST               0 (two)
</code></pre></blockquote></blockquote></blockquote>

<p>  4           9 LOAD_FAST                0 (two)</p>

<pre><code>         12 CALL_FUNCTION            0
         15 POP_TOP
         16 LOAD_CONST               0 (None)
         19 RETURN_VALUE
</code></pre>

<p><code object two at 0x10e2464b0, file "<stdin>&ldquo;, line 2>
  3           0 LOAD_GLOBAL              0 (x)          &lt;&mdash;&mdash;&ndash; LOAD_GLOBAL</p>

<pre><code>          3 PRINT_ITEM
          4 PRINT_NEWLINE
          5 LOAD_CONST               0 (None)
          8 RETURN_VALUE
</code></pre>

<p>```</p>

<p>Finally, when <code>x</code> is nonlocal, the compiler notices that we&rsquo;ll need a closure, and emits the opcodes <code>LOAD_CLOSURE</code>, <code>MAKE_CLOSURE</code>, and later <code>LOAD_DEREF</code>.</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>def one():
&hellip;     x = 1
&hellip;     def two():
&hellip;        print x
&hellip;     two()
&hellip;
recur_dis(one)
<code object one at 0x10e246e30, file "<stdin>&ldquo;, line 1>
  2           0 LOAD_CONST               1 (1)</p>

<pre><code>          3 STORE_DEREF              0 (x)          &lt;----- STORE_DEREF
</code></pre></blockquote></blockquote></blockquote>

<p>  3           6 LOAD_CLOSURE             0 (x)          &lt;&mdash;&mdash;&ndash; LOAD_CLOSURE</p>

<pre><code>          9 BUILD_TUPLE              1
         12 LOAD_CONST               2 (&lt;code object two at 0x10e246d30, file "&lt;stdin&gt;", line 3&gt;)
         15 MAKE_CLOSURE             0
         18 STORE_FAST               0 (two)
</code></pre>

<p>  5          21 LOAD_FAST                0 (two)</p>

<pre><code>         24 CALL_FUNCTION            0
         27 POP_TOP
         28 LOAD_CONST               0 (None)
         31 RETURN_VALUE
</code></pre>

<p><code object two at 0x10e246d30, file "<stdin>&ldquo;, line 3>
  4           0 LOAD_DEREF               0 (x)          &lt;&mdash;&mdash;&ndash; LOAD_DEREF</p>

<pre><code>          3 PRINT_ITEM
          4 PRINT_NEWLINE
          5 LOAD_CONST               0 (None)
          8 RETURN_VALUE
</code></pre>

<p>```</p>

<p>Let&rsquo;s now return to a case that throws a syntax error.</p>

<p>```</p>

<blockquote><blockquote><blockquote><p>def one():
&hellip;      from random import *
&hellip;      def two():
&hellip;          print x
&hellip;      two()
&hellip;
<stdin>:1: SyntaxWarning: import * only allowed at module level
  File &ldquo;<stdin>&rdquo;, line 2
SyntaxError: import * is not allowed in function &lsquo;one&rsquo; because it contains a nested function with free variables
```</p></blockquote></blockquote></blockquote>

<p>I&rsquo;d love to show what the disassembled bytecode for this one looks like, but we can&rsquo;t do that because there is no bytecode! We got a compile-time error, so there&rsquo;s nothing here.</p>

<h3>Further reading</h3>

<p>Everything I know about symbol tables I learned from <a href="http://eli.thegreenplace.net/2010/09/18/python-internals-symbol-tables-part-1/">Eli Bendersky&rsquo;s blog</a>. I&rsquo;ve skipped some complexity in the implementation that Eli covers.</p>

<p><code>ack</code>ing through the source code of CPython for the text of the error message leads us right to <code>symtable.c</code>, which is exactly where we&rsquo;d expect this message to be emitted. The function <code>check_unoptimized</code> shows where the syntax error gets thrown (and shows another illegal construct, too &ndash; but we&rsquo;ll leave that one as an exercise for the reader).</p>

<p>p.s. In Python 3, <code>import *</code> anywhere other than a module is just an unqualified syntax error &ndash; none of this messing around with the symbol table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Python Interpreter, Part 4: It's Dynamic!]]></title>
    <link href="http://akaptur.github.com/blog/2013/12/03/introduction-to-the-python-interpreter-4/"/>
    <updated>2013-12-03T11:25:00-05:00</updated>
    <id>http://akaptur.github.com/blog/2013/12/03/introduction-to-the-python-interpreter-4</id>
    <content type="html"><![CDATA[<p><em>This is Part 4 in a <a href="/blog/categories/python-internals">series</a> on the Python interpreter. Read <a href="/blog/2013/11/15/introduction-to-the-python-interpreter/">Part 1</a>, <a href="/blog/2013/11/15/introduction-to-the-python-interpreter-2/">Part 2</a>, and <a href="/blog/2013/11/17/introduction-to-the-python-interpreter-3/">Part 3</a>. If you&rsquo;re enjoying this series, consider applying to <a href="https://www.hackerschool.com/">Hacker School</a>, where I work as a facilitator.</em></p>

<p>One of the things I was confused about when I started digging into python internals was how python could be &ldquo;dynamic&rdquo; if it was also &ldquo;compiled.&rdquo; Often, in casual coversation, those two words are used as antonyms &ndash; there are &ldquo;dynamic languages,&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> like Python, Ruby, and Javascript, and &ldquo;compiled languages,&rdquo; like C, Java, and Haskell.</p>

<p>Most of the time, when people talk about a &ldquo;compiled&rdquo; language, they mean one that compiles down to native x86/ARM/etc instructions<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> &ndash; instructions for an actual machine made of metal. An &ldquo;interpreted&rdquo; language either doesn&rsquo;t have any compilation at all<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, or compiles to an intermediate representation, like bytecode.  Bytecode is instructions for a virtual machine, not a piece of hardware. Python falls into this latter category: the Python compiler&rsquo;s job is to generate bytecode for the Python interpreter.<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<p>The Python interpreter&rsquo;s job is to make sense of the bytecode via the virtual machine, which turns out to be a lot of work. We&rsquo;ll dig in to the virtual machine in Part 5.</p>

<p>So far our discussion of compiling versus interpretation has been abstract. These ideas become more clear with an example.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>def modulus(x, y):
&hellip;     return x % y
&hellip;
[ord(b) for b in modulus.func_code.co_code]
[124, 0, 0, 124, 1, 0, 22, 83]
dis.dis(modulus.func_code)
  2           0 LOAD_FAST                0 (x)</p>

<pre><code>          3 LOAD_FAST                1 (y)
          6 BINARY_MODULO       
          7 RETURN_VALUE
</code></pre>

<p>```</p></blockquote></blockquote></blockquote>

<p>Here&rsquo;s a function, its bytecode, and its bytecode run through the disassembler. By the time we get the prompt back after the function definition, the <code>modulus</code> function has been compiled and a code object generated. That code object will never be modified.</p>

<p>This seems pretty easy to reason about. Unsurprisingly, typing a modulus (<code>%</code>) causes the compiler to emit the instruction <code>BINARY_MODULO</code>. It looks like this function will be useful if we need to calculate a remainder.</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>modulus(15,4)
3
```</p></blockquote></blockquote></blockquote>

<p>So far, so good. But what if we don&rsquo;t pass it numbers?</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>modulus(&ldquo;hello %s&rdquo;, &ldquo;world&rdquo;)
&lsquo;hello world&rsquo;
```</p></blockquote></blockquote></blockquote>

<p>Uh-oh, what happened there? You&rsquo;ve probably seen this before, but it usually looks like this:</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>print &ldquo;hello %s&rdquo; % &ldquo;world&rdquo;
hello world
```</p></blockquote></blockquote></blockquote>

<p>Somehow, when <code>BINARY_MODULO</code> is faced with two strings, it does string interpolation instead of taking a remainder. This situation is a great example of dynamic typing. When the compiler built our code object for <code>modulus</code>, it had no idea whether <code>x</code> and <code>y</code> would be strings, numbers, or something else entirely. It just emitted some instructions: load one name, load another, <code>BINARY_MODULO</code> the two objects, and return the result. It&rsquo;s the interpreter&rsquo;s job to figure out what <code>BINARY_MODULO</code> actually means.</p>

<p>I&rsquo;d like to reflect on the depth of our ignorance for a moment. Our function <code>modulus</code> can calculate remainders, or it can do string formatting &hellip; what else?  If we define a custom object that responds to <code>__mod__</code>, then we can do <em>anything</em>.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>class Surprise(object):
&hellip;     def <strong>init</strong>(self, num):
&hellip;         self.num = num
&hellip;     def <strong>mod</strong>(self, other):
&hellip;         return self.num + other.num
&hellip;
seven = Surprise(7)
four = Surprise(4)
modulus(seven, four)
11
modulus(7,4)
3
modulus(&ldquo;hello %s&rdquo;, &ldquo;world&rdquo;)
&lsquo;hello world&rsquo;
```</p></blockquote></blockquote></blockquote>

<p>The same function <code>modulus</code>, with the same bytecode, has wildly different effects when passed different kinds of objects.  It&rsquo;s also possible for <code>modulus</code> to raise an error &ndash; for example, a <code>TypeError</code> if we called it on objects that didn&rsquo;t implement <code>__mod__</code>. Heck, we could even write a custom object that raises a <code>SystemExit</code> when <code>__mod__</code> is invoked.  Our <code>__mod__</code> function could have written to a file, or changed a global variable, or deleted another attribute of the object. We have near-total freedom.</p>

<p>This ignorance is one of the reasons that it&rsquo;s hard to optimize Python: you don&rsquo;t know when you&rsquo;re compiling the code object and generating the bytecode what it&rsquo;s going to end up doing. The compiler has no idea what&rsquo;s going to happen. As Russell Power and Alex Rubinsteyn wrote in <a href="http://arxiv.org/pdf/1306.6047v2.pdf">&ldquo;How fast can we make interpreted Python?&rdquo;</a>, &ldquo;In the general absence of type information, almost every instruction must be treated as INVOKE_ARBITRARY_METHOD.&rdquo;</p>

<p>While a general definition of &ldquo;compiling&rdquo; and &ldquo;interpreting&rdquo; can be difficult to nail down, in the context of Python it&rsquo;s fairly straightforward. Compiling is generating the code objects, including the bytecode. Interpreting is making sense of the bytecode in order to actually make things happen. One of the ways in which Python is &ldquo;dynamic&rdquo; is that the same bytecode doesn&rsquo;t always have the same effect. More generally, in Python the compiler does relatively little work, and the intrepreter relatively more.</p>

<p>In Part 5, we&rsquo;ll look at the actual virtual machine and interpreter.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>You sometimes hear &ldquo;interpreted language&rdquo; instead of &ldquo;dynamic language,&rdquo; which is usually, mostly, synonymous.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Thanks to David Nolen for this definition. The lines between &ldquo;parsing,&rdquo; &ldquo;compiling,&rdquo; and &ldquo;interpreting&rdquo; are not always clear. <a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Some languages that are usually not compiled at all include R, Scheme, and binary, depending on the implementation and your definition of &ldquo;compile.&rdquo;<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>As always in this series, I&rsquo;m talking about CPython and Python 2.7, although most of this content is true across implementations.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Python Interpreter, Part 3: Understanding Bytecode]]></title>
    <link href="http://akaptur.github.com/blog/2013/11/17/introduction-to-the-python-interpreter-3/"/>
    <updated>2013-11-17T09:56:00-05:00</updated>
    <id>http://akaptur.github.com/blog/2013/11/17/introduction-to-the-python-interpreter-3</id>
    <content type="html"><![CDATA[<p><em>This is Part 3 in a series on the Python interpreter.  Part 1 <a href="/blog/2013/11/15/introduction-to-the-python-interpreter/">here</a>, Part 2 <a href="/blog/2013/11/15/introduction-to-the-python-interpreter-2/">here</a>.  If you&rsquo;re enjoying this series, consider applying to <a href="https://www.hackerschool.com/">Hacker School</a>, where I work as a facilitator.</em></p>

<h3>Bytecode</h3>

<p>When we left our heroes, they had come across some odd-looking output:</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>foo.func_code.co_code
&rsquo;d\x01\x00}\x01\x00|\x01\x00|\x00\x00\x17S'
```</p></blockquote></blockquote></blockquote>

<p>This is python <em>bytecode</em>.</p>

<p>You recall from Part 2 that &ldquo;python bytecode&rdquo; and &ldquo;a python code object&rdquo; are not the same thing: the bytecode is an attribute of the code object, among many other attributes.  Bytecode is found in the <code>co_code</code> attribute of the code object, and contains instructions for the interpreter.</p>

<p>So what is bytecode?  Well, it&rsquo;s just a series of bytes.  They look wacky when we print them because some bytes are printable and others aren&rsquo;t, so let&rsquo;s take the <code>ord</code> of each byte to see that they&rsquo;re just numbers.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>[ord(b) for b in foo.func_code.co_code]
[100, 1, 0, 125, 1, 0, 124, 1, 0, 124, 0, 0, 23, 83]
```</p></blockquote></blockquote></blockquote>

<p>Here are the bytes that make up python bytecode.  The interpreter will loop through each byte, look up what it should do for each one, and then do that thing.  Notice that the bytecode itself doesn&rsquo;t include any python objects, or references to objects, or anything like that.</p>

<p>One way to understand python bytecode would be to find the CPython interpreter file (it&rsquo;s <code>ceval.c</code>), and flip through it looking up what <code>100</code> means, then <code>1</code>, then <code>0</code>, and so on.  We&rsquo;ll do this later in the series!  For now, there&rsquo;s a simpler way: the <code>dis</code> module.</p>

<h3>Disassembling bytecode</h3>

<p>Disassembling bytecode means taking this series of bytes and printing out something we humans can understand.  It&rsquo;s not a step in python execution; the <code>dis</code> module just helps us understand an intermediate state of python internals. I can&rsquo;t think of a reason why you&rsquo;d ever want to use <code>dis</code> in production code &ndash; it&rsquo;s for humans, not for machines.</p>

<p>Today, however, taking some bytecode and making it human-readable is exactly what we&rsquo;re trying to do, so <code>dis</code> is a great tool.  We&rsquo;ll use the function <code>dis.dis</code> to analyze the code object of our function <code>foo</code>.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>def foo(a):
&hellip;     x = 3
&hellip;     return x + a
&hellip;
import dis
dis.dis(foo.func_code)
  2           0 LOAD_CONST               1 (3)</p>

<pre><code>          3 STORE_FAST               1 (x)
</code></pre></blockquote></blockquote></blockquote>

<p>  3           6 LOAD_FAST                1 (x)</p>

<pre><code>          9 LOAD_FAST                0 (a)
         12 BINARY_ADD          
         13 RETURN_VALUE
</code></pre>

<p>```</p>

<p>(You usually see this called as <code>dis.dis(foo)</code>, directly on the function object.  That&rsquo;s just a convenience: <code>dis</code> is really analyzing the code object.  If it&rsquo;s passed a function, it just gets its code object.)</p>

<p>The numbers in the left-hand column are line numbers in the original source code.  The second column is the offset into the bytecode: <code>LOAD_CONST</code> appears at position 0, <code>STORE_FAST</code> at position 3, and so on.  The middle column shows the names of bytes. These names are just for our (human) benefit &ndash; the interpreter doesn&rsquo;t need the names.</p>

<p>The last two columns give details about the instructions&rsquo;s argument, if there is an argument.  The fourth column shows the argument itself, which represents an index into other attributes of the code object. In the example, <code>LOAD_CONST</code>&rsquo;s argument is an index into the list <code>co_consts</code>, and <code>STORE_FAST</code>&rsquo;s argument is an index into <code>co_varnames</code>.  Finally, in the fifth column, <code>dis</code> has looked up the constants or names in the place the fourth column specified and told us what it found there. We can easily verify this:</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>foo.func_code.co_consts[1]
3
foo.func_code.co_varnames[1]
&lsquo;x&rsquo;
```</p></blockquote></blockquote></blockquote>

<p>This also explains why the second instruction, <code>STORE_FAST</code>, is found at bytecode position 3.  If a bytecode has an argument, the next two bytes are that argument. It&rsquo;s the interpreter&rsquo;s job to handle this correctly.</p>

<p>(You may be surprised that <code>BINARY_ADD</code> doesn&rsquo;t have arguments. We&rsquo;ll come back to this in a future installment, when we get to the interpreter itself.)</p>

<p>People often say that <code>dis</code> is a disassembler of python bytecode.  This is true enough &ndash; the <code>dis</code> module&rsquo;s docs say it &ndash; but <code>dis</code> knows about more than just the bytecode, too: it uses the whole code object to give us an understandable printout.  The middle three columns show information actually encoded in the bytecode, while the first and the last columns show other information.  Again, the bytecode itself is really limited: it&rsquo;s just a series of numbers, and things like names and constants are not a part of it.</p>

<p>How does the <code>dis</code> module get from bytes like <code>100</code> to names like <code>LOAD_CONST</code> and back?  Try to think of a way you&rsquo;d do it.  If you thought &ldquo;Well, you could have a list that has the byte names in the right order,&rdquo; or you thought, &ldquo;I guess you could have a dictionary where the names are the keys and the byte values are the values,&rdquo; then congratulations!  That&rsquo;s exactly what&rsquo;s going on.  The file <code>opcode.py</code> defines the list and the dictionary.  It&rsquo;s full of lines like these (<code>def_op</code> inserts the mapping in both the list and the dictionary):</p>

<p><code>python
def_op('LOAD_CONST', 100)       # Index in const list
def_op('BUILD_TUPLE', 102)      # Number of tuple items
def_op('BUILD_LIST', 103)       # Number of list items
def_op('BUILD_SET', 104)        # Number of set items
</code></p>

<p>There&rsquo;s even a friendly comment telling us what each byte&rsquo;s argument means.</p>

<p>Ok, now we understand what python bytecode is (and isn&rsquo;t), and how to use <code>dis</code> to make sense of it. In Part 4, we&rsquo;ll look at another example to see how Python can compile down to bytecode but still be a dynamic language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Python Interpreter, Part 2: Code Objects]]></title>
    <link href="http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter-2/"/>
    <updated>2013-11-15T19:22:00-05:00</updated>
    <id>http://akaptur.github.com/blog/2013/11/15/introduction-to-the-python-interpreter-2</id>
    <content type="html"><![CDATA[<p>This is part of a <a href="/blog/categories/python-internals">series</a> on the python interpreter.
Part 1 <a href="/blog/2013/11/15/introduction-to-the-python-interpreter/">here</a>.</p>

<p>When we left our heroes, they were examining a simple function object.  Let&rsquo;s now dive a level deeper, and look at this function&rsquo;s code object.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>def foo(a):
&hellip;     x = 3
&hellip;     return x + a
&hellip;
foo
<function foo at 0x107ef7aa0>
foo.func_code
<code object foo at 0x107eeccb0, file "<stdin>&ldquo;, line 1>
```</p></blockquote></blockquote></blockquote>

<p>As you can see in the code above, the code object is an attribute of the function object.  (There are lots of other attributes on the function object, too. They&rsquo;re mostly not interesting because <code>foo</code> is so simple.)</p>

<p>A code object is generated by the Python compiler and intepreted by the interpreter.  It contains information that this interpreter needs to do its job. Let&rsquo;s look at the attributes of the code object.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>dir(foo.func_code)
[&lsquo;<strong>class</strong>&rsquo;, &lsquo;<strong>cmp</strong>&rsquo;, &lsquo;<strong>delattr</strong>&rsquo;, &lsquo;<strong>doc</strong>&rsquo;, &lsquo;<strong>eq</strong>&rsquo;, &lsquo;<strong>format</strong>&rsquo;, &lsquo;<strong>ge</strong>&rsquo;,
&lsquo;<strong>getattribute</strong>&rsquo;, &lsquo;<strong>gt</strong>&rsquo;, &lsquo;<strong>hash</strong>&rsquo;, &lsquo;<strong>init</strong>&rsquo;, &lsquo;<strong>le</strong>&rsquo;, &lsquo;<strong>lt</strong>&rsquo;, &lsquo;<strong>ne</strong>&rsquo;, &lsquo;<strong>new</strong>&rsquo;,
&lsquo;<strong>reduce</strong>&rsquo;, &lsquo;<strong>reduce_ex</strong>&rsquo;, &lsquo;<strong>repr</strong>&rsquo;, &lsquo;<strong>setattr</strong>&rsquo;, &lsquo;<strong>sizeof</strong>&rsquo;, &lsquo;<strong>str</strong>&rsquo;,
&lsquo;<strong>subclasshook</strong>&rsquo;, &lsquo;co_argcount&rsquo;, &lsquo;co_cellvars&rsquo;, &lsquo;co_code&rsquo;, &lsquo;co_consts&rsquo;, &lsquo;co_filename&rsquo;,
&lsquo;co_firstlineno&rsquo;, &lsquo;co_flags&rsquo;, &lsquo;co_freevars&rsquo;, &lsquo;co_lnotab&rsquo;, &lsquo;co_name&rsquo;, &lsquo;co_names&rsquo;, &lsquo;co_nlocals&rsquo;,
&lsquo;co_stacksize&rsquo;, &lsquo;co_varnames&rsquo;]
```</p></blockquote></blockquote></blockquote>

<p>There&rsquo;s a bunch of stuff going on here, much of which we&rsquo;re not going to worry about today.  Let&rsquo;s take a look at three attributes that are interesting to us for our code object on <code>foo</code>.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>foo.func_code.co_varnames
(&lsquo;a&rsquo;, &lsquo;x&rsquo;)
foo.func_code.co_consts
(None, 3)
foo.func_code.co_argcount
1
```</p></blockquote></blockquote></blockquote>

<p>Here are some intelligible-looking things: the names of the variables and the constants that our function knows about and the number of arguments the function takes.  But so far, we haven&rsquo;t seen anything that looks like instructions for how to execute the code object.  These instructions are called <em>bytecode</em>.  Bytecode is an attribute of the code object:</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>foo.func_code.co_code
&rsquo;d\x01\x00}\x01\x00|\x01\x00|\x00\x00\x17S'
```</p></blockquote></blockquote></blockquote>

<p>So much for our intelligible-looking things.  What&rsquo;s going on here?  We&rsquo;ll dive in to bytecode in Part 3.</p>
]]></content>
  </entry>
  
</feed>
