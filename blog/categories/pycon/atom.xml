<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pycon | Allison Kaptur]]></title>
  <link href="http://akaptur.github.com/blog/categories/pycon/atom.xml" rel="self"/>
  <link href="http://akaptur.github.com/"/>
  <updated>2015-10-10T18:20:00-07:00</updated>
  <id>http://akaptur.github.com/</id>
  <author>
    <name><![CDATA[akaptur]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rejected PyCon Proposals]]></title>
    <link href="http://akaptur.github.com/blog/2014/09/11/rejected-pycon-proposals/"/>
    <updated>2014-09-11T15:38:00-07:00</updated>
    <id>http://akaptur.github.com/blog/2014/09/11/rejected-pycon-proposals</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;All accepted proposals are alike, but each rejected proposal is rejected in its own way&rdquo; &ndash; Tolstoy, if he were on the PyCon talk review committee</p></blockquote>

<p>I&rsquo;m building a collection of <a href="https://github.com/akaptur/pycon-proposals">old PyCon talk proposals</a>, particularly rejected ones.  I think rejected proposals are more interesting than accepted ones, for a couple of reasons:</p>

<h4>See examples of anti-patterns</h4>

<p>Flipping through these proposals, you can see concrete examples of the talk committee&rsquo;s <a href="https://us.pycon.org/2015/speaking/proposal_advice/">suggestions for what to avoid</a>. There is an example of a &ldquo;state of our project&rdquo; talk and one of &ldquo;here&rsquo;s some code I hope to have written by the time the conference rolls around.&rdquo;</p>

<h4>&ldquo;I can do better than that&rdquo;</h4>

<p>Being a great or famous programmer doesn&rsquo;t mean you&rsquo;ll give a great talk or submit a great proposal. You&rsquo;ll notice that you can write a better proposal than some of the ones from people you&rsquo;ve heard of. (This fits with the <a href="http://juliepagano.com/blog/2013/11/02/it-s-dangerous-to-go-alone-battling-the-invisible-monsters-in-tech/">Kill your heroes</a> theme from Julie Pagano&rsquo;s great talk on impostor syndrome at PyCon 2014.)</p>

<h4>Empathize with the talk committee</h4>

<p>Any application is an exercise in empathy &ndash; you need to imagine what the people who will be reading your submission are thinking. What do they care about? Where are they coming from? You can read past proposals and decide if you&rsquo;d make the same decision the committee did. When submitters have shared the feedback they received, you can see <em>exactly</em> what the committee members thought. This helps you write a proposal that will address their concerns.</p>

<p>The deadline for submitting a proposal is Monday, September 15th. I encourage you to browse through the collection of past proposals to get inspiration or to improve your proposal. Once you&rsquo;ve submitted a proposal, please <a href="https://github.com/akaptur/pycon-proposals/pulls">add it to the collection!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyCon prep: `require` in Ruby]]></title>
    <link href="http://akaptur.github.com/blog/2014/02/16/pycon-prep-require-in-ruby/"/>
    <updated>2014-02-16T14:18:00-08:00</updated>
    <id>http://akaptur.github.com/blog/2014/02/16/pycon-prep-require-in-ruby</id>
    <content type="html"><![CDATA[<p>I&rsquo;m talking about <code>import</code> at PyCon in April. In the talk, we&rsquo;ll imagine that there is no <code>import</code> and will reinvent it from scratch. I hope this will give everyone (including me!) a deeper understanding of the choices <code>import</code> makes and the ways it could have been different. Ideally, the structure will be a couple of sections of the form &ldquo;We could have made [decisions].  That would mean [effects].  Surprise &ndash; that&rsquo;s how it works in [language]!&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>This is the first of (probably) several posts with notes of things I&rsquo;m learning as I prepare my talk.  Feedback is welcome.</p>

<p>Today I&rsquo;m looking into Ruby&rsquo;s <code>require</code> and <code>require_relative</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> to see if aspects of them would be interesting to Python programmers. So far, here&rsquo;s what I think is most relevant:</p>

<ul>
<li><p>Unlike Python, <code>require</code> won&rsquo;t load all objects in the required file. There&rsquo;s a concept of local versus global variables in the file scope that doesn&rsquo;t exist in Python.</p></li>
<li><p>Unlike Python, one file does not map to one module. Modules are created by using the keyword <code>module</code>.</p></li>
<li><p>Unlike Python, namespace collisions are completely possible. Consider the following simple files:</p></li>
</ul>


<p>``` ruby one.rb
puts &ldquo;one!&rdquo;</p>

<p>def foo
  :hello
end
```</p>

<p>``` ruby two.rb
puts &ldquo;two!&rdquo;</p>

<p>def foo
  :world
end
```</p>

<p>``` ruby main.rb
require_relative &lsquo;one&rsquo;
require_relative &lsquo;two&rsquo;</p>

<p>puts foo
```</p>

<p>And the output from running <code>main.rb</code>:</p>

<p><code>ruby output
one!
two!
world
</code></p>

<ul>
<li>Like Python&rsquo;s <code>import</code>, <code>require</code> will only load a file once. This can interact interestingly with namespace collisions &ndash; to take a contrived example:
``` ruby main.rb
require_relative &lsquo;one&rsquo;
require_relative &lsquo;two&rsquo;
require_relative &lsquo;one&rsquo;</li>
</ul>


<p>puts foo
```</p>

<p>Because <code>one.rb</code> isn&rsquo;t reloaded, <code>foo</code> is still <code>'world'</code>:</p>

<p><code>ruby output
one!
two!
world
</code></p>

<h3>Questions for further investigation / thought</h3>

<p>My talk should <em>not</em> convince people that Python is Right and other languages are Wrong.  I&rsquo;m trying to overcome my bias towards the system I&rsquo;m most used to. (I think I&rsquo;ve written roughly equal amounts of Python and Ruby, but the vast majority of the Ruby I&rsquo;ve written is Rails, where all the <code>require</code>ing and namespacing happens by magic.) Here are some questions I&rsquo;d like to research more.</p>

<ol>
<li><p>Python&rsquo;s namespacing feels much better to me, although I&rsquo;m sure that&rsquo;s partly because I&rsquo;m used to it. What&rsquo;s the advantage to doing namespacing this way?</p></li>
<li><p>Why have both <code>require</code> and <code>require_relative</code>? Why not have <code>require</code> check the relative path as well before raising a <code>LoadError</code>?</p></li>
<li><p>What&rsquo;s the advantage of uncoupling a module from a file?</p></li>
</ol>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I <a href="https://twitter.com/akaptur/status/433281929199095809">asked on twitter</a> for suggestions of languages that make interesting decisions about <code>import</code> equivalents. So far the suggestions are R, Go, Rust, Ruby, JavaScript, and Clojure. If you have others, let me know.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>As far as I can tell, the only difference between <code>require</code> and <code>require_relative</code> is the load path searched.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
